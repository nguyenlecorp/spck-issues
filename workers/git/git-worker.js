function wrap(e,t){var s={};return t.forEach(function(t){s[t]=function(s){return new Promise(function(r,a){var o=++messageId;messageCallbacks[o]=function(e,t){delete self.messageCallbacks[o],e?a(e):r(t)},self.postMessage({type:"call",id:o,object:e,method:t,params:s})})}}),s}window=self,importScripts("git-worker.bundle.js","isomorphic-git/dist/bundle.umd.min.js"),Buffer=buffer.Buffer;var messageId=0,messageCallbacks={},RemoteFileWatcher=wrap("FileWatcher",["update","remove"]),RemoteProgressReporter=wrap("ProgressReporter",["reportProgress"]),GlobalEmitter={emit:function(e,t){var s=e.split("::"),e=s[1];switch(t.id=s[0],t.type=e,e){case"remove":RemoteFileWatcher.remove(t);break;case"conflict":case"add":case"write":RemoteFileWatcher.update(t);break;case"progress":RemoteProgressReporter.reportProgress(t)}}};git.plugins.set("fs",GitFileSystem),git.plugins.set("emitter",GlobalEmitter),self.addEventListener("message",function(e){var t=e.data,s=t.id;if("call"===t.type&&null!==s)switch(t.type){case"put":var r=messageCallbacks[s];r&&r(t.error,t.result);break;case"call":var a=t.method;a&&"function"==typeof git[a]&&git[a].call(git,t.params).then(function(e){"push"===a&&e&&e.headers&&delete e.headers,self.postMessage({type:"put",id:s,result:e,method:a,params:t.params})}).catch(function(e){self.postMessage({type:"put",id:s,error:""+e,method:a,params:t.params})})}});