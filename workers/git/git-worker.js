window=self,importScripts("isomorphic-git/dist/bundle.umd.min.js","fetch.js","git-worker.bundle.js");var messageId=0,messageCallbacks={},RemoteFileWatcher=wrap("FileWatcher",["update","remove"]),RemoteProgressReporter=wrap("ProgressReporter",["reportProgress"]),GlobalEmitter={emit:function(e,s){var t=e.split("::"),a=t[1];switch(s.id=t[0],a){case"update":case"conflict":case"add":RemoteFileWatcher.update(a,s);break;case"progress":RemoteProgressReporter.reportProgress(s)}}};function wrap(e,s){var t={};return s.forEach((function(s){t[s]=function(t){return new Promise((function(a,r){var o=++messageId;messageCallbacks[o]=function(e,s){delete self.messageCallbacks[o],e?r(e):a(s)},self.postMessage({type:"call",id:o,object:e,method:s,params:t})}))}})),t}git.plugins.set("fs",GFS),git.plugins.set("emitter",GlobalEmitter),self.addEventListener("message",(function(e){var s=e.data,t=s.id;if("call"===s.type&&null!==t)switch(s.type){case"put":var a=messageCallbacks[t];a&&a(s.error,s.result);break;case"call":var r=s.method;r&&"function"==typeof git[r]&&git[r].call(git,s.params).then((function(e){"push"===r&&e&&e.headers&&delete e.headers,self.postMessage({type:"put",id:t,result:e,method:r,params:s.params})})).catch((function({stack:e,message:a,source:o,fn:i}){self.postMessage({type:"put",id:t,error:{stack:e,message:a,source:o,fn:i},method:r,params:s.params})}))}}));