var __extends=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,s){e.__proto__=s}||function(e,s){for(var t in s)s.hasOwnProperty(t)&&(e[t]=s[t])};return function(s,t){function n(){this.constructor=s}e(s,t),s.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}}();!function(e){if("object"==typeof module&&"object"==typeof module.exports){var s=e(require,exports);void 0!==s&&(module.exports=s)}else"function"==typeof define&&define.amd&&define(["require","exports","./cssCompletion","vscode-languageserver-types","vscode-nls"],e)}(function(e,s){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var t=e("./cssCompletion"),n=e("vscode-languageserver-types"),o=e("vscode-nls").loadMessageBundle(),r=function(e){function s(){return e.call(this,"$")||this}return __extends(s,e),s.prototype.createReplaceFunction=function(){var e=1;return function(t,n){return"\\"+n+": ${"+e+++":"+(s.variableDefaults[n]||"")+"}"}},s.prototype.createFunctionProposals=function(e,s,t,o){for(var r=0,c=e;r<c.length;r++){var i=c[r],a=i.func.replace(/\[?(\$\w+)\]?/g,this.createReplaceFunction()),u={label:i.func.substr(0,i.func.indexOf("(")),detail:i.func,documentation:i.desc,textEdit:n.TextEdit.replace(this.getCompletionRange(s),a),insertTextFormat:n.InsertTextFormat.Snippet,kind:n.CompletionItemKind.Function};t&&(u.sortText="z"),o.items.push(u)}return o},s.prototype.getCompletionsForSelector=function(t,n,o){return this.createFunctionProposals(s.selectorFuncs,void 0,!0,o),e.prototype.getCompletionsForSelector.call(this,t,n,o)},s.prototype.getTermProposals=function(t,n,o){var r=s.builtInFuncs;return t&&(r=r.filter(function(e){return!e.type||-1!==t.restrictions.indexOf(e.type)})),this.createFunctionProposals(r,n,!0,o),e.prototype.getTermProposals.call(this,t,n,o)},s.prototype.getColorProposals=function(t,n,o){return this.createFunctionProposals(s.colorProposals,n,!1,o),e.prototype.getColorProposals.call(this,t,n,o)},s.prototype.getCompletionsForDeclarationProperty=function(s,t){return this.getCompletionsForSelector(null,!0,t),e.prototype.getCompletionsForDeclarationProperty.call(this,s,t)},s.variableDefaults={$red:"1",$green:"2",$blue:"3",$alpha:"1.0",$color:"#000000",$weight:"0.5",$hue:"0",$saturation:"0%",$lightness:"0%",$degrees:"0",$amount:"0",$string:'""',$substring:'"s"',$number:"0",$limit:"1"},s.colorProposals=[{func:"red($color)",desc:o("scss.builtin.red","Gets the red component of a color.")},{func:"green($color)",desc:o("scss.builtin.green","Gets the green component of a color.")},{func:"blue($color)",desc:o("scss.builtin.blue","Gets the blue component of a color.")},{func:"mix($color, $color, [$weight])",desc:o("scss.builtin.mix","Mixes two colors together.")},{func:"hue($color)",desc:o("scss.builtin.hue","Gets the hue component of a color.")},{func:"saturation($color)",desc:o("scss.builtin.saturation","Gets the saturation component of a color.")},{func:"lightness($color)",desc:o("scss.builtin.lightness","Gets the lightness component of a color.")},{func:"adjust-hue($color, $degrees)",desc:o("scss.builtin.adjust-hue","Changes the hue of a color.")},{func:"lighten($color, $amount)",desc:o("scss.builtin.lighten","Makes a color lighter.")},{func:"darken($color, $amount)",desc:o("scss.builtin.darken","Makes a color darker.")},{func:"saturate($color, $amount)",desc:o("scss.builtin.saturate","Makes a color more saturated.")},{func:"desaturate($color, $amount)",desc:o("scss.builtin.desaturate","Makes a color less saturated.")},{func:"grayscale($color)",desc:o("scss.builtin.grayscale","Converts a color to grayscale.")},{func:"complement($color)",desc:o("scss.builtin.complement","Returns the complement of a color.")},{func:"invert($color)",desc:o("scss.builtin.invert","Returns the inverse of a color.")},{func:"alpha($color)",desc:o("scss.builtin.alpha","Gets the opacity component of a color.")},{func:"opacity($color)",desc:"Gets the alpha component (opacity) of a color."},{func:"rgba($color, $alpha)",desc:o("scss.builtin.rgba","Changes the alpha component for a color.")},{func:"opacify($color, $amount)",desc:o("scss.builtin.opacify","Makes a color more opaque.")},{func:"fade-in($color, $amount)",desc:o("scss.builtin.fade-in","Makes a color more opaque.")},{func:"transparentize($color, $amount)",desc:o("scss.builtin.transparentize","Makes a color more transparent.")},{func:"fade-out($color, $amount)",desc:o("scss.builtin.fade-out","Makes a color more transparent.")},{func:"adjust-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])",desc:o("scss.builtin.adjust-color","Increases or decreases one or more components of a color.")},{func:"scale-color($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha])",desc:o("scss.builtin.scale-color","Fluidly scales one or more properties of a color.")},{func:"change-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])",desc:o("scss.builtin.change-color","Changes one or more properties of a color.")},{func:"ie-hex-str($color)",desc:o("scss.builtin.ie-hex-str","Converts a color into the format understood by IE filters.")}],s.selectorFuncs=[{func:"selector-nest($selectors…)",desc:o("scss.builtin.selector-nest","Nests selector beneath one another like they would be nested in the stylesheet.")},{func:"selector-append($selectors…)",desc:o("scss.builtin.selector-append","Appends selectors to one another without spaces in between.")},{func:"selector-extend($selector, $extendee, $extender)",desc:o("scss.builtin.selector-extend","Extends $extendee with $extender within $selector.")},{func:"selector-replace($selector, $original, $replacement)",desc:o("scss.builtin.selector-replace","Replaces $original with $replacement within $selector.")},{func:"selector-unify($selector1, $selector2)",desc:o("scss.builtin.selector-unify","Unifies two selectors to produce a selector that matches elements matched by both.")},{func:"is-superselector($super, $sub)",desc:o("scss.builtin.is-superselector","Returns whether $super matches all the elements $sub does, and possibly more.")},{func:"simple-selectors($selector)",desc:o("scss.builtin.simple-selectors","Returns the simple selectors that comprise a compound selector.")},{func:"selector-parse($selector)",desc:o("scss.builtin.selector-parse","Parses a selector into the format returned by &.")}],s.builtInFuncs=[{func:"unquote($string)",desc:o("scss.builtin.unquote","Removes quotes from a string.")},{func:"quote($string)",desc:o("scss.builtin.quote","Adds quotes to a string.")},{func:"str-length($string)",desc:o("scss.builtin.str-length","Returns the number of characters in a string.")},{func:"str-insert($string, $insert, $index)",desc:o("scss.builtin.str-insert","Inserts $insert into $string at $index.")},{func:"str-index($string, $substring)",desc:o("scss.builtin.str-index","Returns the index of the first occurance of $substring in $string.")},{func:"str-slice($string, $start-at, [$end-at])",desc:o("scss.builtin.str-slice","Extracts a substring from $string.")},{func:"to-upper-case($string)",desc:o("scss.builtin.to-upper-case","Converts a string to upper case.")},{func:"to-lower-case($string)",desc:o("scss.builtin.to-lower-case","Converts a string to lower case.")},{func:"percentage($number)",desc:o("scss.builtin.percentage","Converts a unitless number to a percentage."),type:"percentage"},{func:"round($number)",desc:o("scss.builtin.round","Rounds a number to the nearest whole number.")},{func:"ceil($number)",desc:o("scss.builtin.ceil","Rounds a number up to the next whole number.")},{func:"floor($number)",desc:o("scss.builtin.floor","Rounds a number down to the previous whole number.")},{func:"abs($number)",desc:o("scss.builtin.abs","Returns the absolute value of a number.")},{func:"min($numbers)",desc:o("scss.builtin.min","Finds the minimum of several numbers.")},{func:"max($numbers)",desc:o("scss.builtin.max","Finds the maximum of several numbers.")},{func:"random([$limit])",desc:o("scss.builtin.random","Returns a random number.")},{func:"length($list)",desc:o("scss.builtin.length","Returns the length of a list.")},{func:"nth($list, $n)",desc:o("scss.builtin.nth","Returns a specific item in a list.")},{func:"set-nth($list, $n, $value)",desc:o("scss.builtin.set-nth","Replaces the nth item in a list.")},{func:"join($list1, $list2, [$separator])",desc:o("scss.builtin.join","Joins together two lists into one.")},{func:"append($list1, $val, [$separator])",desc:o("scss.builtin.append","Appends a single value onto the end of a list.")},{func:"zip($lists)",desc:o("scss.builtin.zip","Combines several lists into a single multidimensional list.")},{func:"index($list, $value)",desc:o("scss.builtin.index","Returns the position of a value within a list.")},{func:"list-separator(#list)",desc:o("scss.builtin.list-separator","Returns the separator of a list.")},{func:"map-get($map, $key)",desc:o("scss.builtin.map-get","Returns the value in a map associated with a given key.")},{func:"map-merge($map1, $map2)",desc:o("scss.builtin.map-merge","Merges two maps together into a new map.")},{func:"map-remove($map, $keys)",desc:o("scss.builtin.map-remove","Returns a new map with keys removed.")},{func:"map-keys($map)",desc:o("scss.builtin.map-keys","Returns a list of all keys in a map.")},{func:"map-values($map)",desc:o("scss.builtin.map-values","Returns a list of all values in a map.")},{func:"map-has-key($map, $key)",desc:o("scss.builtin.map-has-key","Returns whether a map has a value associated with a given key.")},{func:"keywords($args)",desc:o("scss.builtin.keywords","Returns the keywords passed to a function that takes variable arguments.")},{func:"feature-exists($feature)",desc:o("scss.builtin.feature-exists","Returns whether a feature exists in the current Sass runtime.")},{func:"variable-exists($name)",desc:o("scss.builtin.variable-exists","Returns whether a variable with the given name exists in the current scope.")},{func:"global-variable-exists($name)",desc:o("scss.builtin.global-variable-exists","Returns whether a variable with the given name exists in the global scope.")},{func:"function-exists($name)",desc:o("scss.builtin.function-exists","Returns whether a function with the given name exists.")},{func:"mixin-exists($name)",desc:o("scss.builtin.mixin-exists","Returns whether a mixin with the given name exists.")},{func:"inspect($value)",desc:o("scss.builtin.inspect","Returns the string representation of a value as it would be represented in Sass.")},{func:"type-of($value)",desc:o("scss.builtin.type-of","Returns the type of a value.")},{func:"unit($number)",desc:o("scss.builtin.unit","Returns the unit(s) associated with a number.")},{func:"unitless($number)",desc:o("scss.builtin.unitless","Returns whether a number has units.")},{func:"comparable($number1, $number2)",desc:o("scss.builtin.comparable","Returns whether two numbers can be added, subtracted, or compared.")},{func:"call($name, $args…)",desc:o("scss.builtin.call","Dynamically calls a Sass function.")}],s}(t.CSSCompletion);s.SCSSCompletion=r});