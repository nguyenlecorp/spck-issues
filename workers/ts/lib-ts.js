define([],function(){return{
contents:'/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved. \nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \n \nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \nMERCHANTABLITY OR NON-INFRINGEMENT. \n \nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\n\n\n/////////////////////////////\n/// ECMAScript APIs\n/////////////////////////////\n\ndeclare const NaN: number;\ndeclare const Infinity: number;\n\n/**\n  * Evaluates JavaScript code and executes it.\n  * @param x A String value that contains valid JavaScript code.\n  */\ndeclare function eval(x: string): any;\n\n/**\n  * Converts A string to an integer.\n  * @param s A string to convert into a number.\n  * @param radix A value between 2 and 36 that specifies the base of the number in numString.\n  * If this argument is not supplied, strings with a prefix of \'0x\' are considered hexadecimal.\n  * All other strings are considered decimal.\n  */\ndeclare function parseInt(s: string, radix?: number): number;\n\n/**\n  * Converts a string to a floating-point number.\n  * @param string A string that contains a floating-point number.\n  */\ndeclare function parseFloat(string: string): number;\n\n/**\n  * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).\n  * @param number A numeric value.\n  */\ndeclare function isNaN(number: number): boolean;\n\n/**\n  * Determines whether a supplied number is finite.\n  * @param number Any numeric value.\n  */\ndeclare function isFinite(number: number): boolean;\n\n/**\n  * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\n  * @param encodedURI A value representing an encoded URI.\n  */\ndeclare function decodeURI(encodedURI: string): string;\n\n/**\n  * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\n  * @param encodedURIComponent A value representing an encoded URI component.\n  */\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\n\n/**\n  * Encodes a text string as a valid Uniform Resource Identifier (URI)\n  * @param uri A value representing an encoded URI.\n  */\ndeclare function encodeURI(uri: string): string;\n\n/**\n  * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\n  * @param uriComponent A value representing an encoded URI component.\n  */\ndeclare function encodeURIComponent(uriComponent: string): string;\n\ninterface PropertyDescriptor {\n\tconfigurable?: boolean;\n\tenumerable?: boolean;\n\tvalue?: any;\n\twritable?: boolean;\n\tget?(): any;\n\tset?(v: any): void;\n}\n\ninterface PropertyDescriptorMap {\n\t[s: string]: PropertyDescriptor;\n}\n\ninterface Object {\n\t/** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\n\tconstructor: Function;\n\n\t/** Returns a string representation of an object. */\n\ttoString(): string;\n\n\t/** Returns a date converted to a string using the current locale. */\n\ttoLocaleString(): string;\n\n\t/** Returns the primitive value of the specified object. */\n\tvalueOf(): Object;\n\n\t/**\n\t  * Determines whether an object has a property with the specified name.\n\t  * @param v A property name.\n\t  */\n\thasOwnProperty(v: string): boolean;\n\n\t/**\n\t  * Determines whether an object exists in another object\'s prototype chain.\n\t  * @param v Another object whose prototype chain is to be checked.\n\t  */\n\tisPrototypeOf(v: Object): boolean;\n\n\t/**\n\t  * Determines whether a specified property is enumerable.\n\t  * @param v A property name.\n\t  */\n\tpropertyIsEnumerable(v: string): boolean;\n}\n\ninterface ObjectConstructor {\n\tnew(value?: any): Object;\n\t(): any;\n\t(value: any): any;\n\n\t/** A reference to the prototype for a class of objects. */\n\treadonly prototype: Object;\n\n\t/**\n\t  * Returns the prototype of an object.\n\t  * @param o The object that references the prototype.\n\t  */\n\tgetPrototypeOf(o: any): any;\n\n\t/**\n\t  * Gets the own property descriptor of the specified object.\n\t  * An own property descriptor is one that is defined directly on the object and is not inherited from the object\'s prototype.\n\t  * @param o Object that contains the property.\n\t  * @param p Name of the property.\n\t*/\n\tgetOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor;\n\n\t/**\n\t  * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\n\t  * on that object, and are not inherited from the object\'s prototype. The properties of an object include both fields (objects) and functions.\n\t  * @param o Object that contains the own properties.\n\t  */\n\tgetOwnPropertyNames(o: any): string[];\n\n\t/**\n\t  * Creates an object that has the specified prototype or that has null prototype.\n\t  * @param o Object to use as a prototype. May be null.\n\t  */\n\tcreate(o: object | null): any;\n\n\t/**\n\t  * Creates an object that has the specified prototype, and that optionally contains specified properties.\n\t  * @param o Object to use as a prototype. May be null\n\t  * @param properties JavaScript object that contains one or more property descriptors.\n\t  */\n\tcreate(o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;\n\n\t/**\n\t  * Adds a property to an object, or modifies attributes of an existing property.\n\t  * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\n\t  * @param p The property name.\n\t  * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\n\t  */\n\tdefineProperty(o: any, p: string, attributes: PropertyDescriptor & ThisType<any>): any;\n\n\t/**\n\t  * Adds one or more properties to an object, and/or modifies attributes of existing properties.\n\t  * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\n\t  * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\n\t  */\n\tdefineProperties(o: any, properties: PropertyDescriptorMap & ThisType<any>): any;\n\n\t/**\n\t  * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\n\t  * @param o Object on which to lock the attributes.\n\t  */\n\tseal<T>(o: T): T;\n\n\t/**\n\t  * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n\t  * @param o Object on which to lock the attributes.\n\t  */\n\tfreeze<T>(a: T[]): ReadonlyArray<T>;\n\n\t/**\n\t  * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n\t  * @param o Object on which to lock the attributes.\n\t  */\n\tfreeze<T extends Function>(f: T): T;\n\n\t/**\n\t  * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n\t  * @param o Object on which to lock the attributes.\n\t  */\n\tfreeze<T>(o: T): Readonly<T>;\n\n\t/**\n\t  * Prevents the addition of new properties to an object.\n\t  * @param o Object to make non-extensible.\n\t  */\n\tpreventExtensions<T>(o: T): T;\n\n\t/**\n\t  * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\n\t  * @param o Object to test.\n\t  */\n\tisSealed(o: any): boolean;\n\n\t/**\n\t  * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\n\t  * @param o Object to test.\n\t  */\n\tisFrozen(o: any): boolean;\n\n\t/**\n\t  * Returns a value that indicates whether new properties can be added to an object.\n\t  * @param o Object to test.\n\t  */\n\tisExtensible(o: any): boolean;\n\n\t/**\n\t  * Returns the names of the enumerable properties and methods of an object.\n\t  * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n\t  */\n\tkeys(o: {}): string[];\n}\n\n/**\n  * Provides functionality common to all JavaScript objects.\n  */\ndeclare const Object: ObjectConstructor;\n\n/**\n  * Creates a new function.\n  */\ninterface Function {\n\t/**\n\t  * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\n\t  * @param thisArg The object to be used as the this object.\n\t  * @param argArray A set of arguments to be passed to the function.\n\t  */\n\tapply(this: Function, thisArg: any, argArray?: any): any;\n\n\t/**\n\t  * Calls a method of an object, substituting another object for the current object.\n\t  * @param thisArg The object to be used as the current object.\n\t  * @param argArray A list of arguments to be passed to the method.\n\t  */\n\tcall(this: Function, thisArg: any, ...argArray: any[]): any;\n\n\t/**\n\t  * For a given function, creates a bound function that has the same body as the original function.\n\t  * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n\t  * @param thisArg An object to which the this keyword can refer inside the new function.\n\t  * @param argArray A list of arguments to be passed to the new function.\n\t  */\n\tbind(this: Function, thisArg: any, ...argArray: any[]): any;\n\n\t/** Returns a string representation of a function. */\n\ttoString(): string;\n\n\tprototype: any;\n\treadonly length: number;\n\n\t// Non-standard extensions\n\targuments: any;\n\tcaller: Function;\n}\n\ninterface FunctionConstructor {\n\t/**\n\t  * Creates a new function.\n\t  * @param args A list of arguments the function accepts.\n\t  */\n\tnew(...args: string[]): Function;\n\t(...args: string[]): Function;\n\treadonly prototype: Function;\n}\n\ndeclare const Function: FunctionConstructor;\n\ninterface String {\n\t/** Returns a string representation of a string. */\n\ttoString(): string;\n\n\t/**\n\t  * Returns the character at the specified index.\n\t  * @param pos The zero-based index of the desired character.\n\t  */\n\tcharAt(pos: number): string;\n\n\t/**\n\t  * Returns the Unicode value of the character at the specified location.\n\t  * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\n\t  */\n\tcharCodeAt(index: number): number;\n\n\t/**\n\t  * Returns a string that contains the concatenation of two or more strings.\n\t  * @param strings The strings to append to the end of the string.\n\t  */\n\tconcat(...strings: string[]): string;\n\n\t/**\n\t  * Returns the position of the first occurrence of a substring.\n\t  * @param searchString The substring to search for in the string\n\t  * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\n\t  */\n\tindexOf(searchString: string, position?: number): number;\n\n\t/**\n\t  * Returns the last occurrence of a substring in the string.\n\t  * @param searchString The substring to search for.\n\t  * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\n\t  */\n\tlastIndexOf(searchString: string, position?: number): number;\n\n\t/**\n\t  * Determines whether two strings are equivalent in the current locale.\n\t  * @param that String to compare to target string\n\t  */\n\tlocaleCompare(that: string): number;\n\n\t/**\n\t  * Matches a string with a regular expression, and returns an array containing the results of that search.\n\t  * @param regexp A variable name or string literal containing the regular expression pattern and flags.\n\t  */\n\tmatch(regexp: string | RegExp): RegExpMatchArray | null;\n\n\t/**\n\t  * Replaces text in a string, using a regular expression or search string.\n\t  * @param searchValue A string to search for.\n\t  * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n\t  */\n\treplace(searchValue: string | RegExp, replaceValue: string): string;\n\n\t/**\n\t  * Replaces text in a string, using a regular expression or search string.\n\t  * @param searchValue A string to search for.\n\t  * @param replacer A function that returns the replacement text.\n\t  */\n\treplace(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;\n\n\t/**\n\t  * Finds the first substring match in a regular expression search.\n\t  * @param regexp The regular expression pattern and applicable flags.\n\t  */\n\tsearch(regexp: string | RegExp): number;\n\n\t/**\n\t  * Returns a section of a string.\n\t  * @param start The index to the beginning of the specified portion of stringObj.\n\t  * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\n\t  * If this value is not specified, the substring continues to the end of stringObj.\n\t  */\n\tslice(start?: number, end?: number): string;\n\n\t/**\n\t  * Split a string into substrings using the specified separator and return them as an array.\n\t  * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n\t  * @param limit A value used to limit the number of elements returned in the array.\n\t  */\n\tsplit(separator: string | RegExp, limit?: number): string[];\n\n\t/**\n\t  * Returns the substring at the specified location within a String object.\n\t  * @param start The zero-based index number indicating the beginning of the substring.\n\t  * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\n\t  * If end is omitted, the characters from start through the end of the original string are returned.\n\t  */\n\tsubstring(start: number, end?: number): string;\n\n\t/** Converts all the alphabetic characters in a string to lowercase. */\n\ttoLowerCase(): string;\n\n\t/** Converts all alphabetic characters to lowercase, taking into account the host environment\'s current locale. */\n\ttoLocaleLowerCase(): string;\n\n\t/** Converts all the alphabetic characters in a string to uppercase. */\n\ttoUpperCase(): string;\n\n\t/** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment\'s current locale. */\n\ttoLocaleUpperCase(): string;\n\n\t/** Removes the leading and trailing white space and line terminator characters from a string. */\n\ttrim(): string;\n\n\t/** Returns the length of a String object. */\n\treadonly length: number;\n\n\t// IE extensions\n\t/**\n\t  * Gets a substring beginning at the specified location and having the specified length.\n\t  * @param from The starting position of the desired substring. The index of the first character in the string is zero.\n\t  * @param length The number of characters to include in the returned substring.\n\t  */\n\tsubstr(from: number, length?: number): string;\n\n\t/** Returns the primitive value of the specified object. */\n\tvalueOf(): string;\n\n\treadonly [index: number]: string;\n}\n\ninterface StringConstructor {\n\tnew(value?: any): String;\n\t(value?: any): string;\n\treadonly prototype: String;\n\tfromCharCode(...codes: number[]): string;\n}\n\n/**\n  * Allows manipulation and formatting of text strings and determination and location of substrings within strings.\n  */\ndeclare const String: StringConstructor;\n\ninterface Boolean {\n\t/** Returns the primitive value of the specified object. */\n\tvalueOf(): boolean;\n}\n\ninterface BooleanConstructor {\n\tnew(value?: any): Boolean;\n\t(value?: any): boolean;\n\treadonly prototype: Boolean;\n}\n\ndeclare const Boolean: BooleanConstructor;\n\ninterface Number {\n\t/**\n\t  * Returns a string representation of an object.\n\t  * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\n\t  */\n\ttoString(radix?: number): string;\n\n\t/**\n\t  * Returns a string representing a number in fixed-point notation.\n\t  * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n\t  */\n\ttoFixed(fractionDigits?: number): string;\n\n\t/**\n\t  * Returns a string containing a number represented in exponential notation.\n\t  * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n\t  */\n\ttoExponential(fractionDigits?: number): string;\n\n\t/**\n\t  * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n\t  * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\n\t  */\n\ttoPrecision(precision?: number): string;\n\n\t/** Returns the primitive value of the specified object. */\n\tvalueOf(): number;\n}\n\ninterface NumberConstructor {\n\tnew(value?: any): Number;\n\t(value?: any): number;\n\treadonly prototype: Number;\n\n\t/** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\n\treadonly MAX_VALUE: number;\n\n\t/** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\n\treadonly MIN_VALUE: number;\n\n\t/**\n\t  * A value that is not a number.\n\t  * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\n\t  */\n\treadonly NaN: number;\n\n\t/**\n\t  * A value that is less than the largest negative number that can be represented in JavaScript.\n\t  * JavaScript displays NEGATIVE_INFINITY values as -infinity.\n\t  */\n\treadonly NEGATIVE_INFINITY: number;\n\n\t/**\n\t  * A value greater than the largest number that can be represented in JavaScript.\n\t  * JavaScript displays POSITIVE_INFINITY values as infinity.\n\t  */\n\treadonly POSITIVE_INFINITY: number;\n}\n\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\ndeclare const Number: NumberConstructor;\n\ninterface TemplateStringsArray extends ReadonlyArray<string> {\n\treadonly raw: ReadonlyArray<string>;\n}\n\ninterface Math {\n\t/** The mathematical constant e. This is Euler\'s number, the base of natural logarithms. */\n\treadonly E: number;\n\t/** The natural logarithm of 10. */\n\treadonly LN10: number;\n\t/** The natural logarithm of 2. */\n\treadonly LN2: number;\n\t/** The base-2 logarithm of e. */\n\treadonly LOG2E: number;\n\t/** The base-10 logarithm of e. */\n\treadonly LOG10E: number;\n\t/** Pi. This is the ratio of the circumference of a circle to its diameter. */\n\treadonly PI: number;\n\t/** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\n\treadonly SQRT1_2: number;\n\t/** The square root of 2. */\n\treadonly SQRT2: number;\n\t/**\n\t  * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\n\t  * For example, the absolute value of -5 is the same as the absolute value of 5.\n\t  * @param x A numeric expression for which the absolute value is needed.\n\t  */\n\tabs(x: number): number;\n\t/**\n\t  * Returns the arc cosine (or inverse cosine) of a number.\n\t  * @param x A numeric expression.\n\t  */\n\tacos(x: number): number;\n\t/**\n\t  * Returns the arcsine of a number.\n\t  * @param x A numeric expression.\n\t  */\n\tasin(x: number): number;\n\t/**\n\t  * Returns the arctangent of a number.\n\t  * @param x A numeric expression for which the arctangent is needed.\n\t  */\n\tatan(x: number): number;\n\t/**\n\t  * Returns the angle (in radians) from the X axis to a point.\n\t  * @param y A numeric expression representing the cartesian y-coordinate.\n\t  * @param x A numeric expression representing the cartesian x-coordinate.\n\t  */\n\tatan2(y: number, x: number): number;\n\t/**\n\t  * Returns the smallest number greater than or equal to its numeric argument.\n\t  * @param x A numeric expression.\n\t  */\n\tceil(x: number): number;\n\t/**\n\t  * Returns the cosine of a number.\n\t  * @param x A numeric expression that contains an angle measured in radians.\n\t  */\n\tcos(x: number): number;\n\t/**\n\t  * Returns e (the base of natural logarithms) raised to a power.\n\t  * @param x A numeric expression representing the power of e.\n\t  */\n\texp(x: number): number;\n\t/**\n\t  * Returns the greatest number less than or equal to its numeric argument.\n\t  * @param x A numeric expression.\n\t  */\n\tfloor(x: number): number;\n\t/**\n\t  * Returns the natural logarithm (base e) of a number.\n\t  * @param x A numeric expression.\n\t  */\n\tlog(x: number): number;\n\t/**\n\t  * Returns the larger of a set of supplied numeric expressions.\n\t  * @param values Numeric expressions to be evaluated.\n\t  */\n\tmax(...values: number[]): number;\n\t/**\n\t  * Returns the smaller of a set of supplied numeric expressions.\n\t  * @param values Numeric expressions to be evaluated.\n\t  */\n\tmin(...values: number[]): number;\n\t/**\n\t  * Returns the value of a base expression taken to a specified power.\n\t  * @param x The base value of the expression.\n\t  * @param y The exponent value of the expression.\n\t  */\n\tpow(x: number, y: number): number;\n\t/** Returns a pseudorandom number between 0 and 1. */\n\trandom(): number;\n\t/**\n\t  * Returns a supplied numeric expression rounded to the nearest number.\n\t  * @param x The value to be rounded to the nearest number.\n\t  */\n\tround(x: number): number;\n\t/**\n\t  * Returns the sine of a number.\n\t  * @param x A numeric expression that contains an angle measured in radians.\n\t  */\n\tsin(x: number): number;\n\t/**\n\t  * Returns the square root of a number.\n\t  * @param x A numeric expression.\n\t  */\n\tsqrt(x: number): number;\n\t/**\n\t  * Returns the tangent of a number.\n\t  * @param x A numeric expression that contains an angle measured in radians.\n\t  */\n\ttan(x: number): number;\n}\n/** An intrinsic object that provides basic mathematics functionality and constants. */\ndeclare const Math: Math;\n\n/** Enables basic storage and retrieval of dates and times. */\ninterface Date {\n\t/** Returns a string representation of a date. The format of the string depends on the locale. */\n\ttoString(): string;\n\t/** Returns a date as a string value. */\n\ttoDateString(): string;\n\t/** Returns a time as a string value. */\n\ttoTimeString(): string;\n\t/** Returns a value as a string value appropriate to the host environment\'s current locale. */\n\ttoLocaleString(): string;\n\t/** Returns a date as a string value appropriate to the host environment\'s current locale. */\n\ttoLocaleDateString(): string;\n\t/** Returns a time as a string value appropriate to the host environment\'s current locale. */\n\ttoLocaleTimeString(): string;\n\t/** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\n\tvalueOf(): number;\n\t/** Gets the time value in milliseconds. */\n\tgetTime(): number;\n\t/** Gets the year, using local time. */\n\tgetFullYear(): number;\n\t/** Gets the year using Universal Coordinated Time (UTC). */\n\tgetUTCFullYear(): number;\n\t/** Gets the month, using local time. */\n\tgetMonth(): number;\n\t/** Gets the month of a Date object using Universal Coordinated Time (UTC). */\n\tgetUTCMonth(): number;\n\t/** Gets the day-of-the-month, using local time. */\n\tgetDate(): number;\n\t/** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\n\tgetUTCDate(): number;\n\t/** Gets the day of the week, using local time. */\n\tgetDay(): number;\n\t/** Gets the day of the week using Universal Coordinated Time (UTC). */\n\tgetUTCDay(): number;\n\t/** Gets the hours in a date, using local time. */\n\tgetHours(): number;\n\t/** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\n\tgetUTCHours(): number;\n\t/** Gets the minutes of a Date object, using local time. */\n\tgetMinutes(): number;\n\t/** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\n\tgetUTCMinutes(): number;\n\t/** Gets the seconds of a Date object, using local time. */\n\tgetSeconds(): number;\n\t/** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\n\tgetUTCSeconds(): number;\n\t/** Gets the milliseconds of a Date, using local time. */\n\tgetMilliseconds(): number;\n\t/** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\n\tgetUTCMilliseconds(): number;\n\t/** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */\n\tgetTimezoneOffset(): number;\n\t/**\n\t  * Sets the date and time value in the Date object.\n\t  * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.\n\t  */\n\tsetTime(time: number): number;\n\t/**\n\t  * Sets the milliseconds value in the Date object using local time.\n\t  * @param ms A numeric value equal to the millisecond value.\n\t  */\n\tsetMilliseconds(ms: number): number;\n\t/**\n\t  * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\n\t  * @param ms A numeric value equal to the millisecond value.\n\t  */\n\tsetUTCMilliseconds(ms: number): number;\n\n\t/**\n\t  * Sets the seconds value in the Date object using local time.\n\t  * @param sec A numeric value equal to the seconds value.\n\t  * @param ms A numeric value equal to the milliseconds value.\n\t  */\n\tsetSeconds(sec: number, ms?: number): number;\n\t/**\n\t  * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\n\t  * @param sec A numeric value equal to the seconds value.\n\t  * @param ms A numeric value equal to the milliseconds value.\n\t  */\n\tsetUTCSeconds(sec: number, ms?: number): number;\n\t/**\n\t  * Sets the minutes value in the Date object using local time.\n\t  * @param min A numeric value equal to the minutes value.\n\t  * @param sec A numeric value equal to the seconds value.\n\t  * @param ms A numeric value equal to the milliseconds value.\n\t  */\n\tsetMinutes(min: number, sec?: number, ms?: number): number;\n\t/**\n\t  * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\n\t  * @param min A numeric value equal to the minutes value.\n\t  * @param sec A numeric value equal to the seconds value.\n\t  * @param ms A numeric value equal to the milliseconds value.\n\t  */\n\tsetUTCMinutes(min: number, sec?: number, ms?: number): number;\n\t/**\n\t  * Sets the hour value in the Date object using local time.\n\t  * @param hours A numeric value equal to the hours value.\n\t  * @param min A numeric value equal to the minutes value.\n\t  * @param sec A numeric value equal to the seconds value.\n\t  * @param ms A numeric value equal to the milliseconds value.\n\t  */\n\tsetHours(hours: number, min?: number, sec?: number, ms?: number): number;\n\t/**\n\t  * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\n\t  * @param hours A numeric value equal to the hours value.\n\t  * @param min A numeric value equal to the minutes value.\n\t  * @param sec A numeric value equal to the seconds value.\n\t  * @param ms A numeric value equal to the milliseconds value.\n\t  */\n\tsetUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\n\t/**\n\t  * Sets the numeric day-of-the-month value of the Date object using local time.\n\t  * @param date A numeric value equal to the day of the month.\n\t  */\n\tsetDate(date: number): number;\n\t/**\n\t  * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\n\t  * @param date A numeric value equal to the day of the month.\n\t  */\n\tsetUTCDate(date: number): number;\n\t/**\n\t  * Sets the month value in the Date object using local time.\n\t  * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n\t  * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\n\t  */\n\tsetMonth(month: number, date?: number): number;\n\t/**\n\t  * Sets the month value in the Date object using Universal Coordinated Time (UTC).\n\t  * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n\t  * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\n\t  */\n\tsetUTCMonth(month: number, date?: number): number;\n\t/**\n\t  * Sets the year of the Date object using local time.\n\t  * @param year A numeric value for the year.\n\t  * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\n\t  * @param date A numeric value equal for the day of the month.\n\t  */\n\tsetFullYear(year: number, month?: number, date?: number): number;\n\t/**\n\t  * Sets the year value in the Date object using Universal Coordinated Time (UTC).\n\t  * @param year A numeric value equal to the year.\n\t  * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\n\t  * @param date A numeric value equal to the day of the month.\n\t  */\n\tsetUTCFullYear(year: number, month?: number, date?: number): number;\n\t/** Returns a date converted to a string using Universal Coordinated Time (UTC). */\n\ttoUTCString(): string;\n\t/** Returns a date as a string value in ISO format. */\n\ttoISOString(): string;\n\t/** Used by the JSON.stringify method to enable the transformation of an object\'s data for JavaScript Object Notation (JSON) serialization. */\n\ttoJSON(key?: any): string;\n}\n\ninterface DateConstructor {\n\tnew(): Date;\n\tnew(value: number): Date;\n\tnew(value: string): Date;\n\tnew(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\n\t(): string;\n\treadonly prototype: Date;\n\t/**\n\t  * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\n\t  * @param s A date string\n\t  */\n\tparse(s: string): number;\n\t/**\n\t  * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.\n\t  * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\n\t  * @param month The month as an number between 0 and 11 (January to December).\n\t  * @param date The date as an number between 1 and 31.\n\t  * @param hours Must be supplied if minutes is supplied. An number from 0 to 23 (midnight to 11pm) that specifies the hour.\n\t  * @param minutes Must be supplied if seconds is supplied. An number from 0 to 59 that specifies the minutes.\n\t  * @param seconds Must be supplied if milliseconds is supplied. An number from 0 to 59 that specifies the seconds.\n\t  * @param ms An number from 0 to 999 that specifies the milliseconds.\n\t  */\n\tUTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\n\tnow(): number;\n}\n\ndeclare const Date: DateConstructor;\n\ninterface RegExpMatchArray extends Array<string> {\n\tindex?: number;\n\tinput?: string;\n}\n\ninterface RegExpExecArray extends Array<string> {\n\tindex: number;\n\tinput: string;\n}\n\ninterface RegExp {\n\t/**\n\t  * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\n\t  * @param string The String object or string literal on which to perform the search.\n\t  */\n\texec(string: string): RegExpExecArray | null;\n\n\t/**\n\t  * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\n\t  * @param string String on which to perform the search.\n\t  */\n\ttest(string: string): boolean;\n\n\t/** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */\n\treadonly source: string;\n\n\t/** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\n\treadonly global: boolean;\n\n\t/** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\n\treadonly ignoreCase: boolean;\n\n\t/** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\n\treadonly multiline: boolean;\n\n\tlastIndex: number;\n\n\t// Non-standard extensions\n\tcompile(): this;\n}\n\ninterface RegExpConstructor {\n\tnew(pattern: RegExp | string): RegExp;\n\tnew(pattern: string, flags?: string): RegExp;\n\t(pattern: RegExp | string): RegExp;\n\t(pattern: string, flags?: string): RegExp;\n\treadonly prototype: RegExp;\n\n\t// Non-standard extensions\n\t$1: string;\n\t$2: string;\n\t$3: string;\n\t$4: string;\n\t$5: string;\n\t$6: string;\n\t$7: string;\n\t$8: string;\n\t$9: string;\n\tlastMatch: string;\n}\n\ndeclare const RegExp: RegExpConstructor;\n\ninterface Error {\n\tname: string;\n\tmessage: string;\n\tstack?: string;\n}\n\ninterface ErrorConstructor {\n\tnew(message?: string): Error;\n\t(message?: string): Error;\n\treadonly prototype: Error;\n}\n\ndeclare const Error: ErrorConstructor;\n\ninterface EvalError extends Error {\n}\n\ninterface EvalErrorConstructor {\n\tnew(message?: string): EvalError;\n\t(message?: string): EvalError;\n\treadonly prototype: EvalError;\n}\n\ndeclare const EvalError: EvalErrorConstructor;\n\ninterface RangeError extends Error {\n}\n\ninterface RangeErrorConstructor {\n\tnew(message?: string): RangeError;\n\t(message?: string): RangeError;\n\treadonly prototype: RangeError;\n}\n\ndeclare const RangeError: RangeErrorConstructor;\n\ninterface ReferenceError extends Error {\n}\n\ninterface ReferenceErrorConstructor {\n\tnew(message?: string): ReferenceError;\n\t(message?: string): ReferenceError;\n\treadonly prototype: ReferenceError;\n}\n\ndeclare const ReferenceError: ReferenceErrorConstructor;\n\ninterface SyntaxError extends Error {\n}\n\ninterface SyntaxErrorConstructor {\n\tnew(message?: string): SyntaxError;\n\t(message?: string): SyntaxError;\n\treadonly prototype: SyntaxError;\n}\n\ndeclare const SyntaxError: SyntaxErrorConstructor;\n\ninterface TypeError extends Error {\n}\n\ninterface TypeErrorConstructor {\n\tnew(message?: string): TypeError;\n\t(message?: string): TypeError;\n\treadonly prototype: TypeError;\n}\n\ndeclare const TypeError: TypeErrorConstructor;\n\ninterface URIError extends Error {\n}\n\ninterface URIErrorConstructor {\n\tnew(message?: string): URIError;\n\t(message?: string): URIError;\n\treadonly prototype: URIError;\n}\n\ndeclare const URIError: URIErrorConstructor;\n\ninterface JSON {\n\t/**\n\t  * Converts a JavaScript Object Notation (JSON) string into an object.\n\t  * @param text A valid JSON string.\n\t  * @param reviver A function that transforms the results. This function is called for each member of the object.\n\t  * If a member contains nested objects, the nested objects are transformed before the parent object is.\n\t  */\n\tparse(text: string, reviver?: (key: any, value: any) => any): any;\n\t/**\n\t  * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n\t  * @param value A JavaScript value, usually an object or array, to be converted.\n\t  * @param replacer A function that transforms the results.\n\t  * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n\t  */\n\tstringify(value: any, replacer?: (key: string, value: any) => any, space?: string | number): string;\n\t/**\n\t  * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n\t  * @param value A JavaScript value, usually an object or array, to be converted.\n\t  * @param replacer An array of strings and numbers that acts as a approved list for selecting the object properties that will be stringified.\n\t  * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n\t  */\n\tstringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;\n}\n\n/**\n  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\n  */\ndeclare const JSON: JSON;\n\n\n/////////////////////////////\n/// ECMAScript Array API (specially handled by compiler)\n/////////////////////////////\n\ninterface ReadonlyArray<T> {\n\t/**\n\t  * Gets the length of the array. This is a number one higher than the highest element defined in an array.\n\t  */\n\treadonly length: number;\n\t/**\n\t  * Returns a string representation of an array.\n\t  */\n\ttoString(): string;\n\t/**\n\t  * Returns a string representation of an array. The elements are converted to string using thier toLocalString methods.\n\t  */\n\ttoLocaleString(): string;\n\t/**\n\t  * Combines two or more arrays.\n\t  * @param items Additional items to add to the end of array1.\n\t  */\n\tconcat(...items: T[][]): T[];\n\t/**\n\t  * Combines two or more arrays.\n\t  * @param items Additional items to add to the end of array1.\n\t  */\n\tconcat(...items: (T | T[])[]): T[];\n\t/**\n\t  * Adds all the elements of an array separated by the specified separator string.\n\t  * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\n\t  */\n\tjoin(separator?: string): string;\n\t/**\n\t  * Returns a section of an array.\n\t  * @param start The beginning of the specified portion of the array.\n\t  * @param end The end of the specified portion of the array.\n\t  */\n\tslice(start?: number, end?: number): T[];\n\t/**\n\t  * Returns the index of the first occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n\t  */\n\tindexOf(searchElement: T, fromIndex?: number): number;\n\t/**\n\t  * Returns the index of the last occurrence of a specified value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\n\t  */\n\tlastIndexOf(searchElement: T, fromIndex?: number): number;\n\t/**\n\t  * Determines whether all the members of an array satisfy the specified test.\n\t  * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tevery(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => boolean, thisArg?: any): boolean;\n\t/**\n\t  * Determines whether the specified callback function returns true for any element of an array.\n\t  * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tsome(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => boolean, thisArg?: any): boolean;\n\t/**\n\t  * Performs the specified action for each element in an array.\n\t  * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n\t  * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tforEach(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => void, thisArg?: any): void;\n\t/**\n\t  * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n\t  * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tmap<U>(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => U, thisArg?: any): U[];\n\t/**\n\t * Returns the elements of an array that meet the condition specified in a callback function.\n\t * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n\t * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t */\n\tfilter<S extends T>(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => value is S, thisArg?: any): S[];\n\t/**\n\t  * Returns the elements of an array that meet the condition specified in a callback function.\n\t  * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tfilter(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => any, thisArg?: any): T[];\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n\t  */\n\treduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T, initialValue?: T): T;\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n\t  */\n\treduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => U, initialValue: U): U;\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n\t  */\n\treduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T, initialValue?: T): T;\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n\t  */\n\treduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => U, initialValue: U): U;\n\n\treadonly [n: number]: T;\n}\n\ninterface Array<T> {\n\t/**\n\t  * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.\n\t  */\n\tlength: number;\n\t/**\n\t  * Returns a string representation of an array.\n\t  */\n\ttoString(): string;\n\t/**\n\t  * Returns a string representation of an array. The elements are converted to string using thier toLocalString methods.\n\t  */\n\ttoLocaleString(): string;\n\t/**\n\t  * Appends new elements to an array, and returns the new length of the array.\n\t  * @param items New elements of the Array.\n\t  */\n\tpush(...items: T[]): number;\n\t/**\n\t  * Removes the last element from an array and returns it.\n\t  */\n\tpop(): T | undefined;\n\t/**\n\t  * Combines two or more arrays.\n\t  * @param items Additional items to add to the end of array1.\n\t  */\n\tconcat(...items: T[][]): T[];\n\t/**\n\t  * Combines two or more arrays.\n\t  * @param items Additional items to add to the end of array1.\n\t  */\n\tconcat(...items: (T | T[])[]): T[];\n\t/**\n\t  * Adds all the elements of an array separated by the specified separator string.\n\t  * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\n\t  */\n\tjoin(separator?: string): string;\n\t/**\n\t  * Reverses the elements in an Array.\n\t  */\n\treverse(): T[];\n\t/**\n\t  * Removes the first element from an array and returns it.\n\t  */\n\tshift(): T | undefined;\n\t/**\n\t  * Returns a section of an array.\n\t  * @param start The beginning of the specified portion of the array.\n\t  * @param end The end of the specified portion of the array.\n\t  */\n\tslice(start?: number, end?: number): T[];\n\t/**\n\t  * Sorts an array.\n\t  * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.\n\t  */\n\tsort(compareFn?: (a: T, b: T) => number): this;\n\t/**\n\t  * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n\t  * @param start The zero-based location in the array from which to start removing elements.\n\t  * @param deleteCount The number of elements to remove.\n\t  */\n\tsplice(start: number, deleteCount?: number): T[];\n\t/**\n\t  * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n\t  * @param start The zero-based location in the array from which to start removing elements.\n\t  * @param deleteCount The number of elements to remove.\n\t  * @param items Elements to insert into the array in place of the deleted elements.\n\t  */\n\tsplice(start: number, deleteCount: number, ...items: T[]): T[];\n\t/**\n\t  * Inserts new elements at the start of an array.\n\t  * @param items  Elements to insert at the start of the Array.\n\t  */\n\tunshift(...items: T[]): number;\n\t/**\n\t  * Returns the index of the first occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n\t  */\n\tindexOf(searchElement: T, fromIndex?: number): number;\n\t/**\n\t  * Returns the index of the last occurrence of a specified value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\n\t  */\n\tlastIndexOf(searchElement: T, fromIndex?: number): number;\n\t/**\n\t  * Determines whether all the members of an array satisfy the specified test.\n\t  * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tevery(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\n\t/**\n\t  * Determines whether the specified callback function returns true for any element of an array.\n\t  * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tsome(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\n\t/**\n\t  * Performs the specified action for each element in an array.\n\t  * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n\t  * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tforEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\n\t/**\n\t  * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n\t  * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tmap<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n\t/**\n\t * Returns the elements of an array that meet the condition specified in a callback function.\n\t * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n\t * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t */\n\tfilter<S extends T>(callbackfn: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];\n\t/**\n\t  * Returns the elements of an array that meet the condition specified in a callback function.\n\t  * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tfilter(callbackfn: (value: T, index: number, array: T[]) => any, thisArg?: any): T[];\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n\t  */\n\treduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n\t  */\n\treduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n\t  */\n\treduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n\t  */\n\treduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\n\t[n: number]: T;\n}\n\ninterface ArrayConstructor {\n\tnew(arrayLength?: number): any[];\n\tnew <T>(arrayLength: number): T[];\n\tnew <T>(...items: T[]): T[];\n\t(arrayLength?: number): any[];\n\t<T>(arrayLength: number): T[];\n\t<T>(...items: T[]): T[];\n\tisArray(arg: any): arg is Array<any>;\n\treadonly prototype: Array<any>;\n}\n\ndeclare const Array: ArrayConstructor;\n\ninterface TypedPropertyDescriptor<T> {\n\tenumerable?: boolean;\n\tconfigurable?: boolean;\n\twritable?: boolean;\n\tvalue?: T;\n\tget?: () => T;\n\tset?: (value: T) => void;\n}\n\ndeclare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;\ndeclare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;\ndeclare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;\ndeclare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;\n\ndeclare type PromiseConstructorLike = new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;\n\ninterface PromiseLike<T> {\n\t/**\n\t * Attaches callbacks for the resolution and/or rejection of the Promise.\n\t * @param onfulfilled The callback to execute when the Promise is resolved.\n\t * @param onrejected The callback to execute when the Promise is rejected.\n\t * @returns A Promise for the completion of which ever callback is executed.\n\t */\n\tthen<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;\n}\n\n/**\n * Represents the completion of an asynchronous operation\n */\ninterface Promise<T> {\n\t/**\n\t * Attaches callbacks for the resolution and/or rejection of the Promise.\n\t * @param onfulfilled The callback to execute when the Promise is resolved.\n\t * @param onrejected The callback to execute when the Promise is rejected.\n\t * @returns A Promise for the completion of which ever callback is executed.\n\t */\n\tthen<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;\n\n\t/**\n\t * Attaches a callback for only the rejection of the Promise.\n\t * @param onrejected The callback to execute when the Promise is rejected.\n\t * @returns A Promise for the completion of the callback.\n\t */\n\tcatch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;\n}\n\ninterface ArrayLike<T> {\n\treadonly length: number;\n\treadonly [n: number]: T;\n}\n\n/**\n * Make all properties in T optional\n */\ntype Partial<T> = {\n\t[P in keyof T]?: T[P];\n};\n\n/**\n * Make all properties in T readonly\n */\ntype Readonly<T> = {\n\treadonly [P in keyof T]: T[P];\n};\n\n/**\n * From T pick a set of properties K\n */\ntype Pick<T, K extends keyof T> = {\n\t[P in K]: T[P];\n};\n\n/**\n * Construct a type with a set of properties K of type T\n */\ntype Record<K extends string, T> = {\n\t[P in K]: T;\n};\n\n/**\n * Marker for contextual \'this\' type\n */\ninterface ThisType<T> { }\n\n/**\n  * Represents a raw buffer of binary data, which is used to store data for the\n  * different typed arrays. ArrayBuffers cannot be read from or written to directly,\n  * but can be passed to a typed array or DataView Object to interpret the raw\n  * buffer as needed.\n  */\ninterface ArrayBuffer {\n\t/**\n\t  * Read-only. The length of the ArrayBuffer (in bytes).\n\t  */\n\treadonly byteLength: number;\n\n\t/**\n\t  * Returns a section of an ArrayBuffer.\n\t  */\n\tslice(begin: number, end?: number): ArrayBuffer;\n}\n\n/**\n * Allowed ArrayBuffer types for the buffer of an ArrayBufferView and related Typed Arrays.\n */\ninterface ArrayBufferTypes {\n\tArrayBuffer: ArrayBuffer;\n}\ntype ArrayBufferLike = ArrayBufferTypes[keyof ArrayBufferTypes];\n\ninterface ArrayBufferConstructor {\n\treadonly prototype: ArrayBuffer;\n\tnew(byteLength: number): ArrayBuffer;\n\tisView(arg: any): arg is ArrayBufferView;\n}\ndeclare const ArrayBuffer: ArrayBufferConstructor;\n\ninterface ArrayBufferView {\n\t/**\n\t  * The ArrayBuffer instance referenced by the array.\n\t  */\n\tbuffer: ArrayBufferLike;\n\n\t/**\n\t  * The length in bytes of the array.\n\t  */\n\tbyteLength: number;\n\n\t/**\n\t  * The offset in bytes of the array.\n\t  */\n\tbyteOffset: number;\n}\n\ninterface DataView {\n\treadonly buffer: ArrayBuffer;\n\treadonly byteLength: number;\n\treadonly byteOffset: number;\n\t/**\n\t  * Gets the Float32 value at the specified byte offset from the start of the view. There is\n\t  * no alignment constraint; multi-byte values may be fetched from any offset.\n\t  * @param byteOffset The place in the buffer at which the value should be retrieved.\n\t  */\n\tgetFloat32(byteOffset: number, littleEndian?: boolean): number;\n\n\t/**\n\t  * Gets the Float64 value at the specified byte offset from the start of the view. There is\n\t  * no alignment constraint; multi-byte values may be fetched from any offset.\n\t  * @param byteOffset The place in the buffer at which the value should be retrieved.\n\t  */\n\tgetFloat64(byteOffset: number, littleEndian?: boolean): number;\n\n\t/**\n\t  * Gets the Int8 value at the specified byte offset from the start of the view. There is\n\t  * no alignment constraint; multi-byte values may be fetched from any offset.\n\t  * @param byteOffset The place in the buffer at which the value should be retrieved.\n\t  */\n\tgetInt8(byteOffset: number): number;\n\n\t/**\n\t  * Gets the Int16 value at the specified byte offset from the start of the view. There is\n\t  * no alignment constraint; multi-byte values may be fetched from any offset.\n\t  * @param byteOffset The place in the buffer at which the value should be retrieved.\n\t  */\n\tgetInt16(byteOffset: number, littleEndian?: boolean): number;\n\t/**\n\t  * Gets the Int32 value at the specified byte offset from the start of the view. There is\n\t  * no alignment constraint; multi-byte values may be fetched from any offset.\n\t  * @param byteOffset The place in the buffer at which the value should be retrieved.\n\t  */\n\tgetInt32(byteOffset: number, littleEndian?: boolean): number;\n\n\t/**\n\t  * Gets the Uint8 value at the specified byte offset from the start of the view. There is\n\t  * no alignment constraint; multi-byte values may be fetched from any offset.\n\t  * @param byteOffset The place in the buffer at which the value should be retrieved.\n\t  */\n\tgetUint8(byteOffset: number): number;\n\n\t/**\n\t  * Gets the Uint16 value at the specified byte offset from the start of the view. There is\n\t  * no alignment constraint; multi-byte values may be fetched from any offset.\n\t  * @param byteOffset The place in the buffer at which the value should be retrieved.\n\t  */\n\tgetUint16(byteOffset: number, littleEndian?: boolean): number;\n\n\t/**\n\t  * Gets the Uint32 value at the specified byte offset from the start of the view. There is\n\t  * no alignment constraint; multi-byte values may be fetched from any offset.\n\t  * @param byteOffset The place in the buffer at which the value should be retrieved.\n\t  */\n\tgetUint32(byteOffset: number, littleEndian?: boolean): number;\n\n\t/**\n\t  * Stores an Float32 value at the specified byte offset from the start of the view.\n\t  * @param byteOffset The place in the buffer at which the value should be set.\n\t  * @param value The value to set.\n\t  * @param littleEndian If false or undefined, a big-endian value should be written,\n\t  * otherwise a little-endian value should be written.\n\t  */\n\tsetFloat32(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n\t/**\n\t  * Stores an Float64 value at the specified byte offset from the start of the view.\n\t  * @param byteOffset The place in the buffer at which the value should be set.\n\t  * @param value The value to set.\n\t  * @param littleEndian If false or undefined, a big-endian value should be written,\n\t  * otherwise a little-endian value should be written.\n\t  */\n\tsetFloat64(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n\t/**\n\t  * Stores an Int8 value at the specified byte offset from the start of the view.\n\t  * @param byteOffset The place in the buffer at which the value should be set.\n\t  * @param value The value to set.\n\t  */\n\tsetInt8(byteOffset: number, value: number): void;\n\n\t/**\n\t  * Stores an Int16 value at the specified byte offset from the start of the view.\n\t  * @param byteOffset The place in the buffer at which the value should be set.\n\t  * @param value The value to set.\n\t  * @param littleEndian If false or undefined, a big-endian value should be written,\n\t  * otherwise a little-endian value should be written.\n\t  */\n\tsetInt16(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n\t/**\n\t  * Stores an Int32 value at the specified byte offset from the start of the view.\n\t  * @param byteOffset The place in the buffer at which the value should be set.\n\t  * @param value The value to set.\n\t  * @param littleEndian If false or undefined, a big-endian value should be written,\n\t  * otherwise a little-endian value should be written.\n\t  */\n\tsetInt32(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n\t/**\n\t  * Stores an Uint8 value at the specified byte offset from the start of the view.\n\t  * @param byteOffset The place in the buffer at which the value should be set.\n\t  * @param value The value to set.\n\t  */\n\tsetUint8(byteOffset: number, value: number): void;\n\n\t/**\n\t  * Stores an Uint16 value at the specified byte offset from the start of the view.\n\t  * @param byteOffset The place in the buffer at which the value should be set.\n\t  * @param value The value to set.\n\t  * @param littleEndian If false or undefined, a big-endian value should be written,\n\t  * otherwise a little-endian value should be written.\n\t  */\n\tsetUint16(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n\t/**\n\t  * Stores an Uint32 value at the specified byte offset from the start of the view.\n\t  * @param byteOffset The place in the buffer at which the value should be set.\n\t  * @param value The value to set.\n\t  * @param littleEndian If false or undefined, a big-endian value should be written,\n\t  * otherwise a little-endian value should be written.\n\t  */\n\tsetUint32(byteOffset: number, value: number, littleEndian?: boolean): void;\n}\n\ninterface DataViewConstructor {\n\tnew(buffer: ArrayBufferLike, byteOffset?: number, byteLength?: number): DataView;\n}\ndeclare const DataView: DataViewConstructor;\n\n/**\n  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested\n  * number of bytes could not be allocated an exception is raised.\n  */\ninterface Int8Array {\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * The ArrayBuffer instance referenced by the array.\n\t  */\n\treadonly buffer: ArrayBufferLike;\n\n\t/**\n\t  * The length in bytes of the array.\n\t  */\n\treadonly byteLength: number;\n\n\t/**\n\t  * The offset in bytes of the array.\n\t  */\n\treadonly byteOffset: number;\n\n\t/**\n\t  * Returns the this object after copying a section of the array identified by start and end\n\t  * to the same array starting at position target\n\t  * @param target If target is negative, it is treated as length+target where length is the\n\t  * length of the array.\n\t  * @param start If start is negative, it is treated as length+start. If end is negative, it\n\t  * is treated as length+end.\n\t  * @param end If not specified, length of the this object is used as its default value.\n\t  */\n\tcopyWithin(target: number, start: number, end?: number): this;\n\n\t/**\n\t  * Determines whether all the members of an array satisfy the specified test.\n\t  * @param callbackfn A function that accepts up to three arguments. The every method calls\n\t  * the callbackfn function for each element in array1 until the callbackfn returns false,\n\t  * or until the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tevery(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t\t* Returns the this object after filling the section identified by start and end with value\n\t\t* @param value value to fill array section with\n\t\t* @param start index to start filling the array at. If start is negative, it is treated as\n\t\t* length+start where length is the length of the array.\n\t\t* @param end index to stop filling the array at. If end is negative, it is treated as\n\t\t* length+end.\n\t\t*/\n\tfill(value: number, start?: number, end?: number): this;\n\n\t/**\n\t  * Returns the elements of an array that meet the condition specified in a callback function.\n\t  * @param callbackfn A function that accepts up to three arguments. The filter method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tfilter(callbackfn: (value: number, index: number, array: Int8Array) => any, thisArg?: any): Int8Array;\n\n\t/**\n\t  * Returns the value of the first element in the array where predicate is true, and undefined\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found, find\n\t  * immediately returns that element value. Otherwise, find returns undefined.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfind(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\n\n\t/**\n\t  * Returns the index of the first element in the array where predicate is true, and -1\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found,\n\t  * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfindIndex(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n\t/**\n\t  * Performs the specified action for each element in an array.\n\t  * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tforEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void;\n\n\t/**\n\t  * Returns the index of the first occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  *  search starts at index 0.\n\t  */\n\tindexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * Adds all the elements of an array separated by the specified separator string.\n\t  * @param separator A string used to separate one element of an array from the next in the\n\t  * resulting String. If omitted, the array elements are separated with a comma.\n\t  */\n\tjoin(separator?: string): string;\n\n\t/**\n\t  * Returns the index of the last occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  * search starts at index 0.\n\t  */\n\tlastIndexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * The length of the array.\n\t  */\n\treadonly length: number;\n\n\t/**\n\t  * Calls a defined callback function on each element of an array, and returns an array that\n\t  * contains the results.\n\t  * @param callbackfn A function that accepts up to three arguments. The map method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tmap(callbackfn: (this: void, value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an\n\t  * argument instead of an array value.\n\t  */\n\treduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Reverses the elements in an Array.\n\t  */\n\treverse(): Int8Array;\n\n\t/**\n\t  * Sets a value or an array of values.\n\t  * @param array A typed or untyped array of values to set.\n\t  * @param offset The index in the current array at which the values are to be written.\n\t  */\n\tset(array: ArrayLike<number>, offset?: number): void;\n\n\t/**\n\t  * Returns a section of an array.\n\t  * @param start The beginning of the specified portion of the array.\n\t  * @param end The end of the specified portion of the array.\n\t  */\n\tslice(start?: number, end?: number): Int8Array;\n\n\t/**\n\t  * Determines whether the specified callback function returns true for any element of an array.\n\t  * @param callbackfn A function that accepts up to three arguments. The some method calls the\n\t  * callbackfn function for each element in array1 until the callbackfn returns true, or until\n\t  * the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tsome(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t  * Sorts an array.\n\t  * @param compareFn The name of the function used to determine the order of the elements. If\n\t  * omitted, the elements are sorted in ascending, ASCII character order.\n\t  */\n\tsort(compareFn?: (a: number, b: number) => number): this;\n\n\t/**\n\t  * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements\n\t  * at begin, inclusive, up to end, exclusive.\n\t  * @param begin The index of the beginning of the array.\n\t  * @param end The index of the end of the array.\n\t  */\n\tsubarray(begin: number, end?: number): Int8Array;\n\n\t/**\n\t  * Converts a number to a string by using the current locale.\n\t  */\n\ttoLocaleString(): string;\n\n\t/**\n\t  * Returns a string representation of an array.\n\t  */\n\ttoString(): string;\n\n\t[index: number]: number;\n}\ninterface Int8ArrayConstructor {\n\treadonly prototype: Int8Array;\n\tnew(length: number): Int8Array;\n\tnew(array: ArrayLike<number>): Int8Array;\n\tnew(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int8Array;\n\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * Returns a new array from a set of elements.\n\t  * @param items A set of elements to include in the new array object.\n\t  */\n\tof(...items: number[]): Int8Array;\n\n\t/**\n\t  * Creates an array from an array-like or iterable object.\n\t  * @param arrayLike An array-like or iterable object to convert to an array.\n\t  * @param mapfn A mapping function to call on every element of the array.\n\t  * @param thisArg Value of \'this\' used to invoke the mapfn.\n\t  */\n\tfrom(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int8Array;\n\n\n}\ndeclare const Int8Array: Int8ArrayConstructor;\n\n/**\n  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Uint8Array {\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * The ArrayBuffer instance referenced by the array.\n\t  */\n\treadonly buffer: ArrayBufferLike;\n\n\t/**\n\t  * The length in bytes of the array.\n\t  */\n\treadonly byteLength: number;\n\n\t/**\n\t  * The offset in bytes of the array.\n\t  */\n\treadonly byteOffset: number;\n\n\t/**\n\t  * Returns the this object after copying a section of the array identified by start and end\n\t  * to the same array starting at position target\n\t  * @param target If target is negative, it is treated as length+target where length is the\n\t  * length of the array.\n\t  * @param start If start is negative, it is treated as length+start. If end is negative, it\n\t  * is treated as length+end.\n\t  * @param end If not specified, length of the this object is used as its default value.\n\t  */\n\tcopyWithin(target: number, start: number, end?: number): this;\n\n\t/**\n\t  * Determines whether all the members of an array satisfy the specified test.\n\t  * @param callbackfn A function that accepts up to three arguments. The every method calls\n\t  * the callbackfn function for each element in array1 until the callbackfn returns false,\n\t  * or until the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tevery(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t\t* Returns the this object after filling the section identified by start and end with value\n\t\t* @param value value to fill array section with\n\t\t* @param start index to start filling the array at. If start is negative, it is treated as\n\t\t* length+start where length is the length of the array.\n\t\t* @param end index to stop filling the array at. If end is negative, it is treated as\n\t\t* length+end.\n\t\t*/\n\tfill(value: number, start?: number, end?: number): this;\n\n\t/**\n\t  * Returns the elements of an array that meet the condition specified in a callback function.\n\t  * @param callbackfn A function that accepts up to three arguments. The filter method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tfilter(callbackfn: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;\n\n\t/**\n\t  * Returns the value of the first element in the array where predicate is true, and undefined\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found, find\n\t  * immediately returns that element value. Otherwise, find returns undefined.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfind(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\n\n\t/**\n\t  * Returns the index of the first element in the array where predicate is true, and -1\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found,\n\t  * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfindIndex(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n\t/**\n\t  * Performs the specified action for each element in an array.\n\t  * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tforEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;\n\n\t/**\n\t  * Returns the index of the first occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  *  search starts at index 0.\n\t  */\n\tindexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * Adds all the elements of an array separated by the specified separator string.\n\t  * @param separator A string used to separate one element of an array from the next in the\n\t  * resulting String. If omitted, the array elements are separated with a comma.\n\t  */\n\tjoin(separator?: string): string;\n\n\t/**\n\t  * Returns the index of the last occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  * search starts at index 0.\n\t  */\n\tlastIndexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * The length of the array.\n\t  */\n\treadonly length: number;\n\n\t/**\n\t  * Calls a defined callback function on each element of an array, and returns an array that\n\t  * contains the results.\n\t  * @param callbackfn A function that accepts up to three arguments. The map method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tmap(callbackfn: (this: void, value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an\n\t  * argument instead of an array value.\n\t  */\n\treduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Reverses the elements in an Array.\n\t  */\n\treverse(): Uint8Array;\n\n\t/**\n\t  * Sets a value or an array of values.\n\t  * @param array A typed or untyped array of values to set.\n\t  * @param offset The index in the current array at which the values are to be written.\n\t  */\n\tset(array: ArrayLike<number>, offset?: number): void;\n\n\t/**\n\t  * Returns a section of an array.\n\t  * @param start The beginning of the specified portion of the array.\n\t  * @param end The end of the specified portion of the array.\n\t  */\n\tslice(start?: number, end?: number): Uint8Array;\n\n\t/**\n\t  * Determines whether the specified callback function returns true for any element of an array.\n\t  * @param callbackfn A function that accepts up to three arguments. The some method calls the\n\t  * callbackfn function for each element in array1 until the callbackfn returns true, or until\n\t  * the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tsome(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t  * Sorts an array.\n\t  * @param compareFn The name of the function used to determine the order of the elements. If\n\t  * omitted, the elements are sorted in ascending, ASCII character order.\n\t  */\n\tsort(compareFn?: (a: number, b: number) => number): this;\n\n\t/**\n\t  * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements\n\t  * at begin, inclusive, up to end, exclusive.\n\t  * @param begin The index of the beginning of the array.\n\t  * @param end The index of the end of the array.\n\t  */\n\tsubarray(begin: number, end?: number): Uint8Array;\n\n\t/**\n\t  * Converts a number to a string by using the current locale.\n\t  */\n\ttoLocaleString(): string;\n\n\t/**\n\t  * Returns a string representation of an array.\n\t  */\n\ttoString(): string;\n\n\t[index: number]: number;\n}\n\ninterface Uint8ArrayConstructor {\n\treadonly prototype: Uint8Array;\n\tnew(length: number): Uint8Array;\n\tnew(array: ArrayLike<number>): Uint8Array;\n\tnew(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8Array;\n\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * Returns a new array from a set of elements.\n\t  * @param items A set of elements to include in the new array object.\n\t  */\n\tof(...items: number[]): Uint8Array;\n\n\t/**\n\t  * Creates an array from an array-like or iterable object.\n\t  * @param arrayLike An array-like or iterable object to convert to an array.\n\t  * @param mapfn A mapping function to call on every element of the array.\n\t  * @param thisArg Value of \'this\' used to invoke the mapfn.\n\t  */\n\tfrom(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;\n\n}\ndeclare const Uint8Array: Uint8ArrayConstructor;\n\n/**\n  * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.\n  * If the requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Uint8ClampedArray {\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * The ArrayBuffer instance referenced by the array.\n\t  */\n\treadonly buffer: ArrayBufferLike;\n\n\t/**\n\t  * The length in bytes of the array.\n\t  */\n\treadonly byteLength: number;\n\n\t/**\n\t  * The offset in bytes of the array.\n\t  */\n\treadonly byteOffset: number;\n\n\t/**\n\t  * Returns the this object after copying a section of the array identified by start and end\n\t  * to the same array starting at position target\n\t  * @param target If target is negative, it is treated as length+target where length is the\n\t  * length of the array.\n\t  * @param start If start is negative, it is treated as length+start. If end is negative, it\n\t  * is treated as length+end.\n\t  * @param end If not specified, length of the this object is used as its default value.\n\t  */\n\tcopyWithin(target: number, start: number, end?: number): this;\n\n\t/**\n\t  * Determines whether all the members of an array satisfy the specified test.\n\t  * @param callbackfn A function that accepts up to three arguments. The every method calls\n\t  * the callbackfn function for each element in array1 until the callbackfn returns false,\n\t  * or until the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tevery(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t\t* Returns the this object after filling the section identified by start and end with value\n\t\t* @param value value to fill array section with\n\t\t* @param start index to start filling the array at. If start is negative, it is treated as\n\t\t* length+start where length is the length of the array.\n\t\t* @param end index to stop filling the array at. If end is negative, it is treated as\n\t\t* length+end.\n\t\t*/\n\tfill(value: number, start?: number, end?: number): this;\n\n\t/**\n\t  * Returns the elements of an array that meet the condition specified in a callback function.\n\t  * @param callbackfn A function that accepts up to three arguments. The filter method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tfilter(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => any, thisArg?: any): Uint8ClampedArray;\n\n\t/**\n\t  * Returns the value of the first element in the array where predicate is true, and undefined\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found, find\n\t  * immediately returns that element value. Otherwise, find returns undefined.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfind(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\n\n\t/**\n\t  * Returns the index of the first element in the array where predicate is true, and -1\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found,\n\t  * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfindIndex(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n\t/**\n\t  * Performs the specified action for each element in an array.\n\t  * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tforEach(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => void, thisArg?: any): void;\n\n\t/**\n\t  * Returns the index of the first occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  *  search starts at index 0.\n\t  */\n\tindexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * Adds all the elements of an array separated by the specified separator string.\n\t  * @param separator A string used to separate one element of an array from the next in the\n\t  * resulting String. If omitted, the array elements are separated with a comma.\n\t  */\n\tjoin(separator?: string): string;\n\n\t/**\n\t  * Returns the index of the last occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  * search starts at index 0.\n\t  */\n\tlastIndexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * The length of the array.\n\t  */\n\treadonly length: number;\n\n\t/**\n\t  * Calls a defined callback function on each element of an array, and returns an array that\n\t  * contains the results.\n\t  * @param callbackfn A function that accepts up to three arguments. The map method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tmap(callbackfn: (this: void, value: number, index: number, array: Uint8ClampedArray) => number, thisArg?: any): Uint8ClampedArray;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an\n\t  * argument instead of an array value.\n\t  */\n\treduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\n\n\t/**\n\t  * Reverses the elements in an Array.\n\t  */\n\treverse(): Uint8ClampedArray;\n\n\t/**\n\t  * Sets a value or an array of values.\n\t  * @param array A typed or untyped array of values to set.\n\t  * @param offset The index in the current array at which the values are to be written.\n\t  */\n\tset(array: ArrayLike<number>, offset?: number): void;\n\n\t/**\n\t  * Returns a section of an array.\n\t  * @param start The beginning of the specified portion of the array.\n\t  * @param end The end of the specified portion of the array.\n\t  */\n\tslice(start?: number, end?: number): Uint8ClampedArray;\n\n\t/**\n\t  * Determines whether the specified callback function returns true for any element of an array.\n\t  * @param callbackfn A function that accepts up to three arguments. The some method calls the\n\t  * callbackfn function for each element in array1 until the callbackfn returns true, or until\n\t  * the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tsome(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t  * Sorts an array.\n\t  * @param compareFn The name of the function used to determine the order of the elements. If\n\t  * omitted, the elements are sorted in ascending, ASCII character order.\n\t  */\n\tsort(compareFn?: (a: number, b: number) => number): this;\n\n\t/**\n\t  * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements\n\t  * at begin, inclusive, up to end, exclusive.\n\t  * @param begin The index of the beginning of the array.\n\t  * @param end The index of the end of the array.\n\t  */\n\tsubarray(begin: number, end?: number): Uint8ClampedArray;\n\n\t/**\n\t  * Converts a number to a string by using the current locale.\n\t  */\n\ttoLocaleString(): string;\n\n\t/**\n\t  * Returns a string representation of an array.\n\t  */\n\ttoString(): string;\n\n\t[index: number]: number;\n}\n\ninterface Uint8ClampedArrayConstructor {\n\treadonly prototype: Uint8ClampedArray;\n\tnew(length: number): Uint8ClampedArray;\n\tnew(array: ArrayLike<number>): Uint8ClampedArray;\n\tnew(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8ClampedArray;\n\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * Returns a new array from a set of elements.\n\t  * @param items A set of elements to include in the new array object.\n\t  */\n\tof(...items: number[]): Uint8ClampedArray;\n\n\t/**\n\t  * Creates an array from an array-like or iterable object.\n\t  * @param arrayLike An array-like or iterable object to convert to an array.\n\t  * @param mapfn A mapping function to call on every element of the array.\n\t  * @param thisArg Value of \'this\' used to invoke the mapfn.\n\t  */\n\tfrom(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8ClampedArray;\n}\ndeclare const Uint8ClampedArray: Uint8ClampedArrayConstructor;\n\n/**\n  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Int16Array {\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * The ArrayBuffer instance referenced by the array.\n\t  */\n\treadonly buffer: ArrayBufferLike;\n\n\t/**\n\t  * The length in bytes of the array.\n\t  */\n\treadonly byteLength: number;\n\n\t/**\n\t  * The offset in bytes of the array.\n\t  */\n\treadonly byteOffset: number;\n\n\t/**\n\t  * Returns the this object after copying a section of the array identified by start and end\n\t  * to the same array starting at position target\n\t  * @param target If target is negative, it is treated as length+target where length is the\n\t  * length of the array.\n\t  * @param start If start is negative, it is treated as length+start. If end is negative, it\n\t  * is treated as length+end.\n\t  * @param end If not specified, length of the this object is used as its default value.\n\t  */\n\tcopyWithin(target: number, start: number, end?: number): this;\n\n\t/**\n\t  * Determines whether all the members of an array satisfy the specified test.\n\t  * @param callbackfn A function that accepts up to three arguments. The every method calls\n\t  * the callbackfn function for each element in array1 until the callbackfn returns false,\n\t  * or until the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tevery(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t\t* Returns the this object after filling the section identified by start and end with value\n\t\t* @param value value to fill array section with\n\t\t* @param start index to start filling the array at. If start is negative, it is treated as\n\t\t* length+start where length is the length of the array.\n\t\t* @param end index to stop filling the array at. If end is negative, it is treated as\n\t\t* length+end.\n\t\t*/\n\tfill(value: number, start?: number, end?: number): this;\n\n\t/**\n\t  * Returns the elements of an array that meet the condition specified in a callback function.\n\t  * @param callbackfn A function that accepts up to three arguments. The filter method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tfilter(callbackfn: (this: void, value: number, index: number, array: Int16Array) => any, thisArg?: any): Int16Array;\n\n\t/**\n\t  * Returns the value of the first element in the array where predicate is true, and undefined\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found, find\n\t  * immediately returns that element value. Otherwise, find returns undefined.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfind(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\n\n\t/**\n\t  * Returns the index of the first element in the array where predicate is true, and -1\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found,\n\t  * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfindIndex(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n\t/**\n\t  * Performs the specified action for each element in an array.\n\t  * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tforEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void;\n\t/**\n\t  * Returns the index of the first occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  *  search starts at index 0.\n\t  */\n\tindexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * Adds all the elements of an array separated by the specified separator string.\n\t  * @param separator A string used to separate one element of an array from the next in the\n\t  * resulting String. If omitted, the array elements are separated with a comma.\n\t  */\n\tjoin(separator?: string): string;\n\n\t/**\n\t  * Returns the index of the last occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  * search starts at index 0.\n\t  */\n\tlastIndexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * The length of the array.\n\t  */\n\treadonly length: number;\n\n\t/**\n\t  * Calls a defined callback function on each element of an array, and returns an array that\n\t  * contains the results.\n\t  * @param callbackfn A function that accepts up to three arguments. The map method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tmap(callbackfn: (this: void, value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an\n\t  * argument instead of an array value.\n\t  */\n\treduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Reverses the elements in an Array.\n\t  */\n\treverse(): Int16Array;\n\n\t/**\n\t  * Sets a value or an array of values.\n\t  * @param array A typed or untyped array of values to set.\n\t  * @param offset The index in the current array at which the values are to be written.\n\t  */\n\tset(array: ArrayLike<number>, offset?: number): void;\n\n\t/**\n\t  * Returns a section of an array.\n\t  * @param start The beginning of the specified portion of the array.\n\t  * @param end The end of the specified portion of the array.\n\t  */\n\tslice(start?: number, end?: number): Int16Array;\n\n\t/**\n\t  * Determines whether the specified callback function returns true for any element of an array.\n\t  * @param callbackfn A function that accepts up to three arguments. The some method calls the\n\t  * callbackfn function for each element in array1 until the callbackfn returns true, or until\n\t  * the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tsome(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t  * Sorts an array.\n\t  * @param compareFn The name of the function used to determine the order of the elements. If\n\t  * omitted, the elements are sorted in ascending, ASCII character order.\n\t  */\n\tsort(compareFn?: (a: number, b: number) => number): this;\n\n\t/**\n\t  * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements\n\t  * at begin, inclusive, up to end, exclusive.\n\t  * @param begin The index of the beginning of the array.\n\t  * @param end The index of the end of the array.\n\t  */\n\tsubarray(begin: number, end?: number): Int16Array;\n\n\t/**\n\t  * Converts a number to a string by using the current locale.\n\t  */\n\ttoLocaleString(): string;\n\n\t/**\n\t  * Returns a string representation of an array.\n\t  */\n\ttoString(): string;\n\n\t[index: number]: number;\n}\n\ninterface Int16ArrayConstructor {\n\treadonly prototype: Int16Array;\n\tnew(length: number): Int16Array;\n\tnew(array: ArrayLike<number>): Int16Array;\n\tnew(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int16Array;\n\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * Returns a new array from a set of elements.\n\t  * @param items A set of elements to include in the new array object.\n\t  */\n\tof(...items: number[]): Int16Array;\n\n\t/**\n\t  * Creates an array from an array-like or iterable object.\n\t  * @param arrayLike An array-like or iterable object to convert to an array.\n\t  * @param mapfn A mapping function to call on every element of the array.\n\t  * @param thisArg Value of \'this\' used to invoke the mapfn.\n\t  */\n\tfrom(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int16Array;\n\n\n}\ndeclare const Int16Array: Int16ArrayConstructor;\n\n/**\n  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Uint16Array {\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * The ArrayBuffer instance referenced by the array.\n\t  */\n\treadonly buffer: ArrayBufferLike;\n\n\t/**\n\t  * The length in bytes of the array.\n\t  */\n\treadonly byteLength: number;\n\n\t/**\n\t  * The offset in bytes of the array.\n\t  */\n\treadonly byteOffset: number;\n\n\t/**\n\t  * Returns the this object after copying a section of the array identified by start and end\n\t  * to the same array starting at position target\n\t  * @param target If target is negative, it is treated as length+target where length is the\n\t  * length of the array.\n\t  * @param start If start is negative, it is treated as length+start. If end is negative, it\n\t  * is treated as length+end.\n\t  * @param end If not specified, length of the this object is used as its default value.\n\t  */\n\tcopyWithin(target: number, start: number, end?: number): this;\n\n\t/**\n\t  * Determines whether all the members of an array satisfy the specified test.\n\t  * @param callbackfn A function that accepts up to three arguments. The every method calls\n\t  * the callbackfn function for each element in array1 until the callbackfn returns false,\n\t  * or until the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tevery(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t\t* Returns the this object after filling the section identified by start and end with value\n\t\t* @param value value to fill array section with\n\t\t* @param start index to start filling the array at. If start is negative, it is treated as\n\t\t* length+start where length is the length of the array.\n\t\t* @param end index to stop filling the array at. If end is negative, it is treated as\n\t\t* length+end.\n\t\t*/\n\tfill(value: number, start?: number, end?: number): this;\n\n\t/**\n\t  * Returns the elements of an array that meet the condition specified in a callback function.\n\t  * @param callbackfn A function that accepts up to three arguments. The filter method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tfilter(callbackfn: (value: number, index: number, array: Uint16Array) => any, thisArg?: any): Uint16Array;\n\n\t/**\n\t  * Returns the value of the first element in the array where predicate is true, and undefined\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found, find\n\t  * immediately returns that element value. Otherwise, find returns undefined.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfind(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\n\n\t/**\n\t  * Returns the index of the first element in the array where predicate is true, and -1\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found,\n\t  * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfindIndex(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n\t/**\n\t  * Performs the specified action for each element in an array.\n\t  * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tforEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void;\n\n\t/**\n\t  * Returns the index of the first occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  *  search starts at index 0.\n\t  */\n\tindexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * Adds all the elements of an array separated by the specified separator string.\n\t  * @param separator A string used to separate one element of an array from the next in the\n\t  * resulting String. If omitted, the array elements are separated with a comma.\n\t  */\n\tjoin(separator?: string): string;\n\n\t/**\n\t  * Returns the index of the last occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  * search starts at index 0.\n\t  */\n\tlastIndexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * The length of the array.\n\t  */\n\treadonly length: number;\n\n\t/**\n\t  * Calls a defined callback function on each element of an array, and returns an array that\n\t  * contains the results.\n\t  * @param callbackfn A function that accepts up to three arguments. The map method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tmap(callbackfn: (this: void, value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an\n\t  * argument instead of an array value.\n\t  */\n\treduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Reverses the elements in an Array.\n\t  */\n\treverse(): Uint16Array;\n\n\t/**\n\t  * Sets a value or an array of values.\n\t  * @param array A typed or untyped array of values to set.\n\t  * @param offset The index in the current array at which the values are to be written.\n\t  */\n\tset(array: ArrayLike<number>, offset?: number): void;\n\n\t/**\n\t  * Returns a section of an array.\n\t  * @param start The beginning of the specified portion of the array.\n\t  * @param end The end of the specified portion of the array.\n\t  */\n\tslice(start?: number, end?: number): Uint16Array;\n\n\t/**\n\t  * Determines whether the specified callback function returns true for any element of an array.\n\t  * @param callbackfn A function that accepts up to three arguments. The some method calls the\n\t  * callbackfn function for each element in array1 until the callbackfn returns true, or until\n\t  * the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tsome(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t  * Sorts an array.\n\t  * @param compareFn The name of the function used to determine the order of the elements. If\n\t  * omitted, the elements are sorted in ascending, ASCII character order.\n\t  */\n\tsort(compareFn?: (a: number, b: number) => number): this;\n\n\t/**\n\t  * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements\n\t  * at begin, inclusive, up to end, exclusive.\n\t  * @param begin The index of the beginning of the array.\n\t  * @param end The index of the end of the array.\n\t  */\n\tsubarray(begin: number, end?: number): Uint16Array;\n\n\t/**\n\t  * Converts a number to a string by using the current locale.\n\t  */\n\ttoLocaleString(): string;\n\n\t/**\n\t  * Returns a string representation of an array.\n\t  */\n\ttoString(): string;\n\n\t[index: number]: number;\n}\n\ninterface Uint16ArrayConstructor {\n\treadonly prototype: Uint16Array;\n\tnew(length: number): Uint16Array;\n\tnew(array: ArrayLike<number>): Uint16Array;\n\tnew(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint16Array;\n\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * Returns a new array from a set of elements.\n\t  * @param items A set of elements to include in the new array object.\n\t  */\n\tof(...items: number[]): Uint16Array;\n\n\t/**\n\t  * Creates an array from an array-like or iterable object.\n\t  * @param arrayLike An array-like or iterable object to convert to an array.\n\t  * @param mapfn A mapping function to call on every element of the array.\n\t  * @param thisArg Value of \'this\' used to invoke the mapfn.\n\t  */\n\tfrom(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint16Array;\n\n\n}\ndeclare const Uint16Array: Uint16ArrayConstructor;\n/**\n  * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Int32Array {\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * The ArrayBuffer instance referenced by the array.\n\t  */\n\treadonly buffer: ArrayBufferLike;\n\n\t/**\n\t  * The length in bytes of the array.\n\t  */\n\treadonly byteLength: number;\n\n\t/**\n\t  * The offset in bytes of the array.\n\t  */\n\treadonly byteOffset: number;\n\n\t/**\n\t  * Returns the this object after copying a section of the array identified by start and end\n\t  * to the same array starting at position target\n\t  * @param target If target is negative, it is treated as length+target where length is the\n\t  * length of the array.\n\t  * @param start If start is negative, it is treated as length+start. If end is negative, it\n\t  * is treated as length+end.\n\t  * @param end If not specified, length of the this object is used as its default value.\n\t  */\n\tcopyWithin(target: number, start: number, end?: number): this;\n\n\t/**\n\t  * Determines whether all the members of an array satisfy the specified test.\n\t  * @param callbackfn A function that accepts up to three arguments. The every method calls\n\t  * the callbackfn function for each element in array1 until the callbackfn returns false,\n\t  * or until the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tevery(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t\t* Returns the this object after filling the section identified by start and end with value\n\t\t* @param value value to fill array section with\n\t\t* @param start index to start filling the array at. If start is negative, it is treated as\n\t\t* length+start where length is the length of the array.\n\t\t* @param end index to stop filling the array at. If end is negative, it is treated as\n\t\t* length+end.\n\t\t*/\n\tfill(value: number, start?: number, end?: number): this;\n\n\t/**\n\t  * Returns the elements of an array that meet the condition specified in a callback function.\n\t  * @param callbackfn A function that accepts up to three arguments. The filter method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tfilter(callbackfn: (value: number, index: number, array: Int32Array) => any, thisArg?: any): Int32Array;\n\n\t/**\n\t  * Returns the value of the first element in the array where predicate is true, and undefined\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found, find\n\t  * immediately returns that element value. Otherwise, find returns undefined.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfind(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\n\n\t/**\n\t  * Returns the index of the first element in the array where predicate is true, and -1\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found,\n\t  * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfindIndex(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n\t/**\n\t  * Performs the specified action for each element in an array.\n\t  * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tforEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void;\n\n\t/**\n\t  * Returns the index of the first occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  *  search starts at index 0.\n\t  */\n\tindexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * Adds all the elements of an array separated by the specified separator string.\n\t  * @param separator A string used to separate one element of an array from the next in the\n\t  * resulting String. If omitted, the array elements are separated with a comma.\n\t  */\n\tjoin(separator?: string): string;\n\n\t/**\n\t  * Returns the index of the last occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  * search starts at index 0.\n\t  */\n\tlastIndexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * The length of the array.\n\t  */\n\treadonly length: number;\n\n\t/**\n\t  * Calls a defined callback function on each element of an array, and returns an array that\n\t  * contains the results.\n\t  * @param callbackfn A function that accepts up to three arguments. The map method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tmap(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an\n\t  * argument instead of an array value.\n\t  */\n\treduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Reverses the elements in an Array.\n\t  */\n\treverse(): Int32Array;\n\n\t/**\n\t  * Sets a value or an array of values.\n\t  * @param array A typed or untyped array of values to set.\n\t  * @param offset The index in the current array at which the values are to be written.\n\t  */\n\tset(array: ArrayLike<number>, offset?: number): void;\n\n\t/**\n\t  * Returns a section of an array.\n\t  * @param start The beginning of the specified portion of the array.\n\t  * @param end The end of the specified portion of the array.\n\t  */\n\tslice(start?: number, end?: number): Int32Array;\n\n\t/**\n\t  * Determines whether the specified callback function returns true for any element of an array.\n\t  * @param callbackfn A function that accepts up to three arguments. The some method calls the\n\t  * callbackfn function for each element in array1 until the callbackfn returns true, or until\n\t  * the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tsome(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t  * Sorts an array.\n\t  * @param compareFn The name of the function used to determine the order of the elements. If\n\t  * omitted, the elements are sorted in ascending, ASCII character order.\n\t  */\n\tsort(compareFn?: (a: number, b: number) => number): this;\n\n\t/**\n\t  * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements\n\t  * at begin, inclusive, up to end, exclusive.\n\t  * @param begin The index of the beginning of the array.\n\t  * @param end The index of the end of the array.\n\t  */\n\tsubarray(begin: number, end?: number): Int32Array;\n\n\t/**\n\t  * Converts a number to a string by using the current locale.\n\t  */\n\ttoLocaleString(): string;\n\n\t/**\n\t  * Returns a string representation of an array.\n\t  */\n\ttoString(): string;\n\n\t[index: number]: number;\n}\n\ninterface Int32ArrayConstructor {\n\treadonly prototype: Int32Array;\n\tnew(length: number): Int32Array;\n\tnew(array: ArrayLike<number>): Int32Array;\n\tnew(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int32Array;\n\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * Returns a new array from a set of elements.\n\t  * @param items A set of elements to include in the new array object.\n\t  */\n\tof(...items: number[]): Int32Array;\n\n\t/**\n\t  * Creates an array from an array-like or iterable object.\n\t  * @param arrayLike An array-like or iterable object to convert to an array.\n\t  * @param mapfn A mapping function to call on every element of the array.\n\t  * @param thisArg Value of \'this\' used to invoke the mapfn.\n\t  */\n\tfrom(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int32Array;\n\n}\ndeclare const Int32Array: Int32ArrayConstructor;\n\n/**\n  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Uint32Array {\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * The ArrayBuffer instance referenced by the array.\n\t  */\n\treadonly buffer: ArrayBufferLike;\n\n\t/**\n\t  * The length in bytes of the array.\n\t  */\n\treadonly byteLength: number;\n\n\t/**\n\t  * The offset in bytes of the array.\n\t  */\n\treadonly byteOffset: number;\n\n\t/**\n\t  * Returns the this object after copying a section of the array identified by start and end\n\t  * to the same array starting at position target\n\t  * @param target If target is negative, it is treated as length+target where length is the\n\t  * length of the array.\n\t  * @param start If start is negative, it is treated as length+start. If end is negative, it\n\t  * is treated as length+end.\n\t  * @param end If not specified, length of the this object is used as its default value.\n\t  */\n\tcopyWithin(target: number, start: number, end?: number): this;\n\n\t/**\n\t  * Determines whether all the members of an array satisfy the specified test.\n\t  * @param callbackfn A function that accepts up to three arguments. The every method calls\n\t  * the callbackfn function for each element in array1 until the callbackfn returns false,\n\t  * or until the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tevery(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t\t* Returns the this object after filling the section identified by start and end with value\n\t\t* @param value value to fill array section with\n\t\t* @param start index to start filling the array at. If start is negative, it is treated as\n\t\t* length+start where length is the length of the array.\n\t\t* @param end index to stop filling the array at. If end is negative, it is treated as\n\t\t* length+end.\n\t\t*/\n\tfill(value: number, start?: number, end?: number): this;\n\n\t/**\n\t  * Returns the elements of an array that meet the condition specified in a callback function.\n\t  * @param callbackfn A function that accepts up to three arguments. The filter method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tfilter(callbackfn: (value: number, index: number, array: Uint32Array) => any, thisArg?: any): Uint32Array;\n\n\t/**\n\t  * Returns the value of the first element in the array where predicate is true, and undefined\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found, find\n\t  * immediately returns that element value. Otherwise, find returns undefined.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfind(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\n\n\t/**\n\t  * Returns the index of the first element in the array where predicate is true, and -1\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found,\n\t  * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfindIndex(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n\t/**\n\t  * Performs the specified action for each element in an array.\n\t  * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tforEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void;\n\t/**\n\t  * Returns the index of the first occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  *  search starts at index 0.\n\t  */\n\tindexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * Adds all the elements of an array separated by the specified separator string.\n\t  * @param separator A string used to separate one element of an array from the next in the\n\t  * resulting String. If omitted, the array elements are separated with a comma.\n\t  */\n\tjoin(separator?: string): string;\n\n\t/**\n\t  * Returns the index of the last occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  * search starts at index 0.\n\t  */\n\tlastIndexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * The length of the array.\n\t  */\n\treadonly length: number;\n\n\t/**\n\t  * Calls a defined callback function on each element of an array, and returns an array that\n\t  * contains the results.\n\t  * @param callbackfn A function that accepts up to three arguments. The map method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tmap(callbackfn: (this: void, value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an\n\t  * argument instead of an array value.\n\t  */\n\treduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Reverses the elements in an Array.\n\t  */\n\treverse(): Uint32Array;\n\n\t/**\n\t  * Sets a value or an array of values.\n\t  * @param array A typed or untyped array of values to set.\n\t  * @param offset The index in the current array at which the values are to be written.\n\t  */\n\tset(array: ArrayLike<number>, offset?: number): void;\n\n\t/**\n\t  * Returns a section of an array.\n\t  * @param start The beginning of the specified portion of the array.\n\t  * @param end The end of the specified portion of the array.\n\t  */\n\tslice(start?: number, end?: number): Uint32Array;\n\n\t/**\n\t  * Determines whether the specified callback function returns true for any element of an array.\n\t  * @param callbackfn A function that accepts up to three arguments. The some method calls the\n\t  * callbackfn function for each element in array1 until the callbackfn returns true, or until\n\t  * the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tsome(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t  * Sorts an array.\n\t  * @param compareFn The name of the function used to determine the order of the elements. If\n\t  * omitted, the elements are sorted in ascending, ASCII character order.\n\t  */\n\tsort(compareFn?: (a: number, b: number) => number): this;\n\n\t/**\n\t  * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements\n\t  * at begin, inclusive, up to end, exclusive.\n\t  * @param begin The index of the beginning of the array.\n\t  * @param end The index of the end of the array.\n\t  */\n\tsubarray(begin: number, end?: number): Uint32Array;\n\n\t/**\n\t  * Converts a number to a string by using the current locale.\n\t  */\n\ttoLocaleString(): string;\n\n\t/**\n\t  * Returns a string representation of an array.\n\t  */\n\ttoString(): string;\n\n\t[index: number]: number;\n}\n\ninterface Uint32ArrayConstructor {\n\treadonly prototype: Uint32Array;\n\tnew(length: number): Uint32Array;\n\tnew(array: ArrayLike<number>): Uint32Array;\n\tnew(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint32Array;\n\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * Returns a new array from a set of elements.\n\t  * @param items A set of elements to include in the new array object.\n\t  */\n\tof(...items: number[]): Uint32Array;\n\n\t/**\n\t  * Creates an array from an array-like or iterable object.\n\t  * @param arrayLike An array-like or iterable object to convert to an array.\n\t  * @param mapfn A mapping function to call on every element of the array.\n\t  * @param thisArg Value of \'this\' used to invoke the mapfn.\n\t  */\n\tfrom(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint32Array;\n\n}\ndeclare const Uint32Array: Uint32ArrayConstructor;\n\n/**\n  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\n  * of bytes could not be allocated an exception is raised.\n  */\ninterface Float32Array {\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * The ArrayBuffer instance referenced by the array.\n\t  */\n\treadonly buffer: ArrayBufferLike;\n\n\t/**\n\t  * The length in bytes of the array.\n\t  */\n\treadonly byteLength: number;\n\n\t/**\n\t  * The offset in bytes of the array.\n\t  */\n\treadonly byteOffset: number;\n\n\t/**\n\t  * Returns the this object after copying a section of the array identified by start and end\n\t  * to the same array starting at position target\n\t  * @param target If target is negative, it is treated as length+target where length is the\n\t  * length of the array.\n\t  * @param start If start is negative, it is treated as length+start. If end is negative, it\n\t  * is treated as length+end.\n\t  * @param end If not specified, length of the this object is used as its default value.\n\t  */\n\tcopyWithin(target: number, start: number, end?: number): this;\n\n\t/**\n\t  * Determines whether all the members of an array satisfy the specified test.\n\t  * @param callbackfn A function that accepts up to three arguments. The every method calls\n\t  * the callbackfn function for each element in array1 until the callbackfn returns false,\n\t  * or until the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tevery(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t\t* Returns the this object after filling the section identified by start and end with value\n\t\t* @param value value to fill array section with\n\t\t* @param start index to start filling the array at. If start is negative, it is treated as\n\t\t* length+start where length is the length of the array.\n\t\t* @param end index to stop filling the array at. If end is negative, it is treated as\n\t\t* length+end.\n\t\t*/\n\tfill(value: number, start?: number, end?: number): this;\n\n\t/**\n\t  * Returns the elements of an array that meet the condition specified in a callback function.\n\t  * @param callbackfn A function that accepts up to three arguments. The filter method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tfilter(callbackfn: (value: number, index: number, array: Float32Array) => any, thisArg?: any): Float32Array;\n\n\t/**\n\t  * Returns the value of the first element in the array where predicate is true, and undefined\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found, find\n\t  * immediately returns that element value. Otherwise, find returns undefined.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfind(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\n\n\t/**\n\t  * Returns the index of the first element in the array where predicate is true, and -1\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found,\n\t  * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfindIndex(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n\t/**\n\t  * Performs the specified action for each element in an array.\n\t  * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tforEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void;\n\n\t/**\n\t  * Returns the index of the first occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  *  search starts at index 0.\n\t  */\n\tindexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * Adds all the elements of an array separated by the specified separator string.\n\t  * @param separator A string used to separate one element of an array from the next in the\n\t  * resulting String. If omitted, the array elements are separated with a comma.\n\t  */\n\tjoin(separator?: string): string;\n\n\t/**\n\t  * Returns the index of the last occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  * search starts at index 0.\n\t  */\n\tlastIndexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * The length of the array.\n\t  */\n\treadonly length: number;\n\n\t/**\n\t  * Calls a defined callback function on each element of an array, and returns an array that\n\t  * contains the results.\n\t  * @param callbackfn A function that accepts up to three arguments. The map method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tmap(callbackfn: (this: void, value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an\n\t  * argument instead of an array value.\n\t  */\n\treduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Reverses the elements in an Array.\n\t  */\n\treverse(): Float32Array;\n\n\t/**\n\t  * Sets a value or an array of values.\n\t  * @param array A typed or untyped array of values to set.\n\t  * @param offset The index in the current array at which the values are to be written.\n\t  */\n\tset(array: ArrayLike<number>, offset?: number): void;\n\n\t/**\n\t  * Returns a section of an array.\n\t  * @param start The beginning of the specified portion of the array.\n\t  * @param end The end of the specified portion of the array.\n\t  */\n\tslice(start?: number, end?: number): Float32Array;\n\n\t/**\n\t  * Determines whether the specified callback function returns true for any element of an array.\n\t  * @param callbackfn A function that accepts up to three arguments. The some method calls the\n\t  * callbackfn function for each element in array1 until the callbackfn returns true, or until\n\t  * the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tsome(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t  * Sorts an array.\n\t  * @param compareFn The name of the function used to determine the order of the elements. If\n\t  * omitted, the elements are sorted in ascending, ASCII character order.\n\t  */\n\tsort(compareFn?: (a: number, b: number) => number): this;\n\n\t/**\n\t  * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements\n\t  * at begin, inclusive, up to end, exclusive.\n\t  * @param begin The index of the beginning of the array.\n\t  * @param end The index of the end of the array.\n\t  */\n\tsubarray(begin: number, end?: number): Float32Array;\n\n\t/**\n\t  * Converts a number to a string by using the current locale.\n\t  */\n\ttoLocaleString(): string;\n\n\t/**\n\t  * Returns a string representation of an array.\n\t  */\n\ttoString(): string;\n\n\t[index: number]: number;\n}\n\ninterface Float32ArrayConstructor {\n\treadonly prototype: Float32Array;\n\tnew(length: number): Float32Array;\n\tnew(array: ArrayLike<number>): Float32Array;\n\tnew(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float32Array;\n\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * Returns a new array from a set of elements.\n\t  * @param items A set of elements to include in the new array object.\n\t  */\n\tof(...items: number[]): Float32Array;\n\n\t/**\n\t  * Creates an array from an array-like or iterable object.\n\t  * @param arrayLike An array-like or iterable object to convert to an array.\n\t  * @param mapfn A mapping function to call on every element of the array.\n\t  * @param thisArg Value of \'this\' used to invoke the mapfn.\n\t  */\n\tfrom(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float32Array;\n\n\n}\ndeclare const Float32Array: Float32ArrayConstructor;\n\n/**\n  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested\n  * number of bytes could not be allocated an exception is raised.\n  */\ninterface Float64Array {\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * The ArrayBuffer instance referenced by the array.\n\t  */\n\treadonly buffer: ArrayBufferLike;\n\n\t/**\n\t  * The length in bytes of the array.\n\t  */\n\treadonly byteLength: number;\n\n\t/**\n\t  * The offset in bytes of the array.\n\t  */\n\treadonly byteOffset: number;\n\n\t/**\n\t  * Returns the this object after copying a section of the array identified by start and end\n\t  * to the same array starting at position target\n\t  * @param target If target is negative, it is treated as length+target where length is the\n\t  * length of the array.\n\t  * @param start If start is negative, it is treated as length+start. If end is negative, it\n\t  * is treated as length+end.\n\t  * @param end If not specified, length of the this object is used as its default value.\n\t  */\n\tcopyWithin(target: number, start: number, end?: number): this;\n\n\t/**\n\t  * Determines whether all the members of an array satisfy the specified test.\n\t  * @param callbackfn A function that accepts up to three arguments. The every method calls\n\t  * the callbackfn function for each element in array1 until the callbackfn returns false,\n\t  * or until the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tevery(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t\t* Returns the this object after filling the section identified by start and end with value\n\t\t* @param value value to fill array section with\n\t\t* @param start index to start filling the array at. If start is negative, it is treated as\n\t\t* length+start where length is the length of the array.\n\t\t* @param end index to stop filling the array at. If end is negative, it is treated as\n\t\t* length+end.\n\t\t*/\n\tfill(value: number, start?: number, end?: number): this;\n\n\t/**\n\t  * Returns the elements of an array that meet the condition specified in a callback function.\n\t  * @param callbackfn A function that accepts up to three arguments. The filter method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tfilter(callbackfn: (value: number, index: number, array: Float64Array) => any, thisArg?: any): Float64Array;\n\n\t/**\n\t  * Returns the value of the first element in the array where predicate is true, and undefined\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found, find\n\t  * immediately returns that element value. Otherwise, find returns undefined.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfind(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\n\n\t/**\n\t  * Returns the index of the first element in the array where predicate is true, and -1\n\t  * otherwise.\n\t  * @param predicate find calls predicate once for each element of the array, in ascending\n\t  * order, until it finds one where predicate returns true. If such an element is found,\n\t  * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n\t  * @param thisArg If provided, it will be used as the this value for each invocation of\n\t  * predicate. If it is not provided, undefined is used instead.\n\t  */\n\tfindIndex(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n\t/**\n\t  * Performs the specified action for each element in an array.\n\t  * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tforEach(callbackfn: (value: number, index: number, array: Float64Array) => void, thisArg?: any): void;\n\n\t/**\n\t  * Returns the index of the first occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  *  search starts at index 0.\n\t  */\n\tindexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * Adds all the elements of an array separated by the specified separator string.\n\t  * @param separator A string used to separate one element of an array from the next in the\n\t  * resulting String. If omitted, the array elements are separated with a comma.\n\t  */\n\tjoin(separator?: string): string;\n\n\t/**\n\t  * Returns the index of the last occurrence of a value in an array.\n\t  * @param searchElement The value to locate in the array.\n\t  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n\t  * search starts at index 0.\n\t  */\n\tlastIndexOf(searchElement: number, fromIndex?: number): number;\n\n\t/**\n\t  * The length of the array.\n\t  */\n\treadonly length: number;\n\n\t/**\n\t  * Calls a defined callback function on each element of an array, and returns an array that\n\t  * contains the results.\n\t  * @param callbackfn A function that accepts up to three arguments. The map method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tmap(callbackfn: (this: void, value: number, index: number, array: Float64Array) => number, thisArg?: any): Float64Array;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array. The return value of\n\t  * the callback function is the accumulated result, and is provided as an argument in the next\n\t  * call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n\t  * callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an\n\t  * argument instead of an array value.\n\t  */\n\treduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue?: number): number;\n\n\t/**\n\t  * Calls the specified callback function for all the elements in an array, in descending order.\n\t  * The return value of the callback function is the accumulated result, and is provided as an\n\t  * argument in the next call to the callback function.\n\t  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n\t  * the callbackfn function one time for each element in the array.\n\t  * @param initialValue If initialValue is specified, it is used as the initial value to start\n\t  * the accumulation. The first call to the callbackfn function provides this value as an argument\n\t  * instead of an array value.\n\t  */\n\treduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\n\n\t/**\n\t  * Reverses the elements in an Array.\n\t  */\n\treverse(): Float64Array;\n\n\t/**\n\t  * Sets a value or an array of values.\n\t  * @param array A typed or untyped array of values to set.\n\t  * @param offset The index in the current array at which the values are to be written.\n\t  */\n\tset(array: ArrayLike<number>, offset?: number): void;\n\n\t/**\n\t  * Returns a section of an array.\n\t  * @param start The beginning of the specified portion of the array.\n\t  * @param end The end of the specified portion of the array.\n\t  */\n\tslice(start?: number, end?: number): Float64Array;\n\n\t/**\n\t  * Determines whether the specified callback function returns true for any element of an array.\n\t  * @param callbackfn A function that accepts up to three arguments. The some method calls the\n\t  * callbackfn function for each element in array1 until the callbackfn returns true, or until\n\t  * the end of the array.\n\t  * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n\t  * If thisArg is omitted, undefined is used as the this value.\n\t  */\n\tsome(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;\n\n\t/**\n\t  * Sorts an array.\n\t  * @param compareFn The name of the function used to determine the order of the elements. If\n\t  * omitted, the elements are sorted in ascending, ASCII character order.\n\t  */\n\tsort(compareFn?: (a: number, b: number) => number): this;\n\n\t/**\n\t  * Gets a new Float64Array view of the ArrayBuffer store for this array, referencing the elements\n\t  * at begin, inclusive, up to end, exclusive.\n\t  * @param begin The index of the beginning of the array.\n\t  * @param end The index of the end of the array.\n\t  */\n\tsubarray(begin: number, end?: number): Float64Array;\n\n\t/**\n\t  * Converts a number to a string by using the current locale.\n\t  */\n\ttoLocaleString(): string;\n\n\t/**\n\t  * Returns a string representation of an array.\n\t  */\n\ttoString(): string;\n\n\t[index: number]: number;\n}\n\ninterface Float64ArrayConstructor {\n\treadonly prototype: Float64Array;\n\tnew(length: number): Float64Array;\n\tnew(array: ArrayLike<number>): Float64Array;\n\tnew(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float64Array;\n\n\t/**\n\t  * The size in bytes of each element in the array.\n\t  */\n\treadonly BYTES_PER_ELEMENT: number;\n\n\t/**\n\t  * Returns a new array from a set of elements.\n\t  * @param items A set of elements to include in the new array object.\n\t  */\n\tof(...items: number[]): Float64Array;\n\n\t/**\n\t  * Creates an array from an array-like or iterable object.\n\t  * @param arrayLike An array-like or iterable object to convert to an array.\n\t  * @param mapfn A mapping function to call on every element of the array.\n\t  * @param thisArg Value of \'this\' used to invoke the mapfn.\n\t  */\n\tfrom(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float64Array;\n\n}\ndeclare const Float64Array: Float64ArrayConstructor;\n\n/////////////////////////////\n/// ECMAScript Internationalization API\n/////////////////////////////\n\ndeclare namespace Intl {\n\tinterface CollatorOptions {\n\t\tusage?: string;\n\t\tlocaleMatcher?: string;\n\t\tnumeric?: boolean;\n\t\tcaseFirst?: string;\n\t\tsensitivity?: string;\n\t\tignorePunctuation?: boolean;\n\t}\n\n\tinterface ResolvedCollatorOptions {\n\t\tlocale: string;\n\t\tusage: string;\n\t\tsensitivity: string;\n\t\tignorePunctuation: boolean;\n\t\tcollation: string;\n\t\tcaseFirst: string;\n\t\tnumeric: boolean;\n\t}\n\n\tinterface Collator {\n\t\tcompare(x: string, y: string): number;\n\t\tresolvedOptions(): ResolvedCollatorOptions;\n\t}\n\tvar Collator: {\n\t\tnew(locales?: string | string[], options?: CollatorOptions): Collator;\n\t\t(locales?: string | string[], options?: CollatorOptions): Collator;\n\t\tsupportedLocalesOf(locales: string | string[], options?: CollatorOptions): string[];\n\t};\n\n\tinterface NumberFormatOptions {\n\t\tlocaleMatcher?: string;\n\t\tstyle?: string;\n\t\tcurrency?: string;\n\t\tcurrencyDisplay?: string;\n\t\tuseGrouping?: boolean;\n\t\tminimumIntegerDigits?: number;\n\t\tminimumFractionDigits?: number;\n\t\tmaximumFractionDigits?: number;\n\t\tminimumSignificantDigits?: number;\n\t\tmaximumSignificantDigits?: number;\n\t}\n\n\tinterface ResolvedNumberFormatOptions {\n\t\tlocale: string;\n\t\tnumberingSystem: string;\n\t\tstyle: string;\n\t\tcurrency?: string;\n\t\tcurrencyDisplay?: string;\n\t\tminimumIntegerDigits: number;\n\t\tminimumFractionDigits: number;\n\t\tmaximumFractionDigits: number;\n\t\tminimumSignificantDigits?: number;\n\t\tmaximumSignificantDigits?: number;\n\t\tuseGrouping: boolean;\n\t}\n\n\tinterface NumberFormat {\n\t\tformat(value: number): string;\n\t\tresolvedOptions(): ResolvedNumberFormatOptions;\n\t}\n\tvar NumberFormat: {\n\t\tnew(locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\n\t\t(locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\n\t\tsupportedLocalesOf(locales: string | string[], options?: NumberFormatOptions): string[];\n\t};\n\n\tinterface DateTimeFormatOptions {\n\t\tlocaleMatcher?: string;\n\t\tweekday?: string;\n\t\tera?: string;\n\t\tyear?: string;\n\t\tmonth?: string;\n\t\tday?: string;\n\t\thour?: string;\n\t\tminute?: string;\n\t\tsecond?: string;\n\t\ttimeZoneName?: string;\n\t\tformatMatcher?: string;\n\t\thour12?: boolean;\n\t\ttimeZone?: string;\n\t}\n\n\tinterface ResolvedDateTimeFormatOptions {\n\t\tlocale: string;\n\t\tcalendar: string;\n\t\tnumberingSystem: string;\n\t\ttimeZone: string;\n\t\thour12?: boolean;\n\t\tweekday?: string;\n\t\tera?: string;\n\t\tyear?: string;\n\t\tmonth?: string;\n\t\tday?: string;\n\t\thour?: string;\n\t\tminute?: string;\n\t\tsecond?: string;\n\t\ttimeZoneName?: string;\n\t}\n\n\tinterface DateTimeFormat {\n\t\tformat(date?: Date | number): string;\n\t\tresolvedOptions(): ResolvedDateTimeFormatOptions;\n\t}\n\tvar DateTimeFormat: {\n\t\tnew(locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\n\t\t(locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\n\t\tsupportedLocalesOf(locales: string | string[], options?: DateTimeFormatOptions): string[];\n\t};\n}\n\ninterface String {\n\t/**\n\t  * Determines whether two strings are equivalent in the current or specified locale.\n\t  * @param that String to compare to target string\n\t  * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n\t  * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\n\t  */\n\tlocaleCompare(that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;\n}\n\ninterface Number {\n\t/**\n\t  * Converts a number to a string by using the current or specified locale.\n\t  * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n\t  * @param options An object that contains one or more properties that specify comparison options.\n\t  */\n\ttoLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Date {\n\t/**\n\t  * Converts a date and time to a string by using the current or specified locale.\n\t  * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n\t  * @param options An object that contains one or more properties that specify comparison options.\n\t  */\n\ttoLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n\t/**\n\t  * Converts a date to a string by using the current or specified locale.\n\t  * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n\t  * @param options An object that contains one or more properties that specify comparison options.\n\t  */\n\ttoLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n\n\t/**\n\t  * Converts a time to a string by using the current or specified locale.\n\t  * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n\t  * @param options An object that contains one or more properties that specify comparison options.\n\t  */\n\ttoLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n}\n\n\n\n/////////////////////////////\n/// DOM APIs\n/////////////////////////////\n\ninterface AnimationEventInit extends EventInit {\n\tanimationName?: string;\n\telapsedTime?: number;\n}\n\ninterface CacheQueryOptions {\n\tcacheName?: string;\n\tignoreMethod?: boolean;\n\tignoreSearch?: boolean;\n\tignoreVary?: boolean;\n}\n\ninterface CloseEventInit extends EventInit {\n\tcode?: number;\n\treason?: string;\n\twasClean?: boolean;\n}\n\ninterface CompositionEventInit extends UIEventInit {\n\tdata?: string;\n}\n\ninterface ConfirmSiteSpecificExceptionsInformation extends ExceptionInformation {\n\tarrayOfDomainStrings?: string[];\n}\n\ninterface ConstrainBooleanParameters {\n\texact?: boolean;\n\tideal?: boolean;\n}\n\ninterface ConstrainDOMStringParameters {\n\texact?: string | string[];\n\tideal?: string | string[];\n}\n\ninterface ConstrainDoubleRange extends DoubleRange {\n\texact?: number;\n\tideal?: number;\n}\n\ninterface ConstrainLongRange extends LongRange {\n\texact?: number;\n\tideal?: number;\n}\n\ninterface CustomEventInit extends EventInit {\n\tdetail?: any;\n}\n\ninterface DeviceAccelerationDict {\n\tx?: number;\n\ty?: number;\n\tz?: number;\n}\n\ninterface DeviceLightEventInit extends EventInit {\n\tvalue?: number;\n}\n\ninterface DeviceMotionEventInit extends EventInit {\n\tacceleration?: DeviceAccelerationDict;\n\taccelerationIncludingGravity?: DeviceAccelerationDict;\n\tinterval?: number;\n\trotationRate?: DeviceRotationRateDict;\n}\n\ninterface DeviceOrientationEventInit extends EventInit {\n\tabsolute?: boolean;\n\talpha?: number;\n\tbeta?: number;\n\tgamma?: number;\n}\n\ninterface DeviceRotationRateDict {\n\talpha?: number;\n\tbeta?: number;\n\tgamma?: number;\n}\n\ninterface DOMRectInit {\n\theight?: any;\n\twidth?: any;\n\tx?: any;\n\ty?: any;\n}\n\ninterface DoubleRange {\n\tmax?: number;\n\tmin?: number;\n}\n\ninterface ErrorEventInit extends EventInit {\n\tcolno?: number;\n\terror?: any;\n\tfilename?: string;\n\tlineno?: number;\n\tmessage?: string;\n}\n\ninterface EventInit {\n\tscoped?: boolean;\n\tbubbles?: boolean;\n\tcancelable?: boolean;\n}\n\ninterface EventModifierInit extends UIEventInit {\n\taltKey?: boolean;\n\tctrlKey?: boolean;\n\tmetaKey?: boolean;\n\tmodifierAltGraph?: boolean;\n\tmodifierCapsLock?: boolean;\n\tmodifierFn?: boolean;\n\tmodifierFnLock?: boolean;\n\tmodifierHyper?: boolean;\n\tmodifierNumLock?: boolean;\n\tmodifierOS?: boolean;\n\tmodifierScrollLock?: boolean;\n\tmodifierSuper?: boolean;\n\tmodifierSymbol?: boolean;\n\tmodifierSymbolLock?: boolean;\n\tshiftKey?: boolean;\n}\n\ninterface ExceptionInformation {\n\tdomain?: string;\n}\n\ninterface FocusEventInit extends UIEventInit {\n\trelatedTarget?: EventTarget;\n}\n\ninterface FocusNavigationEventInit extends EventInit {\n\tnavigationReason?: string;\n\toriginHeight?: number;\n\toriginLeft?: number;\n\toriginTop?: number;\n\toriginWidth?: number;\n}\n\ninterface FocusNavigationOrigin {\n\toriginHeight?: number;\n\toriginLeft?: number;\n\toriginTop?: number;\n\toriginWidth?: number;\n}\n\ninterface GamepadEventInit extends EventInit {\n\tgamepad?: Gamepad;\n}\n\ninterface GetNotificationOptions {\n\ttag?: string;\n}\n\ninterface HashChangeEventInit extends EventInit {\n\tnewURL?: string;\n\toldURL?: string;\n}\n\ninterface IDBIndexParameters {\n\tmultiEntry?: boolean;\n\tunique?: boolean;\n}\n\ninterface IDBObjectStoreParameters {\n\tautoIncrement?: boolean;\n\tkeyPath?: IDBKeyPath;\n}\n\ninterface IntersectionObserverEntryInit {\n\tboundingClientRect?: DOMRectInit;\n\tintersectionRect?: DOMRectInit;\n\trootBounds?: DOMRectInit;\n\ttarget?: Element;\n\ttime?: number;\n}\n\ninterface IntersectionObserverInit {\n\troot?: Element;\n\trootMargin?: string;\n\tthreshold?: number | number[];\n}\n\ninterface KeyboardEventInit extends EventModifierInit {\n\tcode?: string;\n\tkey?: string;\n\tlocation?: number;\n\trepeat?: boolean;\n}\n\ninterface LongRange {\n\tmax?: number;\n\tmin?: number;\n}\n\ninterface MessageEventInit extends EventInit {\n\tlastEventId?: string;\n\tchannel?: string;\n\tdata?: any;\n\torigin?: string;\n\tports?: MessagePort[];\n\tsource?: Window;\n}\n\ninterface MouseEventInit extends EventModifierInit {\n\tbutton?: number;\n\tbuttons?: number;\n\tclientX?: number;\n\tclientY?: number;\n\trelatedTarget?: EventTarget;\n\tscreenX?: number;\n\tscreenY?: number;\n}\n\ninterface MsZoomToOptions {\n\tanimate?: string;\n\tcontentX?: number;\n\tcontentY?: number;\n\tscaleFactor?: number;\n\tviewportX?: string;\n\tviewportY?: string;\n}\n\ninterface MutationObserverInit {\n\tattributeFilter?: string[];\n\tattributeOldValue?: boolean;\n\tattributes?: boolean;\n\tcharacterData?: boolean;\n\tcharacterDataOldValue?: boolean;\n\tchildList?: boolean;\n\tsubtree?: boolean;\n}\n\ninterface NotificationOptions {\n\tbody?: string;\n\tdir?: NotificationDirection;\n\ticon?: string;\n\tlang?: string;\n\ttag?: string;\n}\n\ninterface ObjectURLOptions {\n\toneTimeOnly?: boolean;\n}\n\ninterface PaymentCurrencyAmount {\n\tcurrency?: string;\n\tcurrencySystem?: string;\n\tvalue?: string;\n}\n\ninterface PaymentDetails {\n\tdisplayItems?: PaymentItem[];\n\terror?: string;\n\tmodifiers?: PaymentDetailsModifier[];\n\tshippingOptions?: PaymentShippingOption[];\n\ttotal?: PaymentItem;\n}\n\ninterface PaymentDetailsModifier {\n\tadditionalDisplayItems?: PaymentItem[];\n\tdata?: any;\n\tsupportedMethods?: string[];\n\ttotal?: PaymentItem;\n}\n\ninterface PaymentItem {\n\tamount?: PaymentCurrencyAmount;\n\tlabel?: string;\n\tpending?: boolean;\n}\n\ninterface PaymentMethodData {\n\tdata?: any;\n\tsupportedMethods?: string[];\n}\n\ninterface PaymentOptions {\n\trequestPayerEmail?: boolean;\n\trequestPayerName?: boolean;\n\trequestPayerPhone?: boolean;\n\trequestShipping?: boolean;\n\tshippingType?: string;\n}\n\ninterface PaymentRequestUpdateEventInit extends EventInit {\n}\n\ninterface PaymentShippingOption {\n\tamount?: PaymentCurrencyAmount;\n\tid?: string;\n\tlabel?: string;\n\tselected?: boolean;\n}\n\ninterface PeriodicWaveConstraints {\n\tdisableNormalization?: boolean;\n}\n\ninterface PointerEventInit extends MouseEventInit {\n\theight?: number;\n\tisPrimary?: boolean;\n\tpointerId?: number;\n\tpointerType?: string;\n\tpressure?: number;\n\ttiltX?: number;\n\ttiltY?: number;\n\twidth?: number;\n}\n\ninterface PopStateEventInit extends EventInit {\n\tstate?: any;\n}\n\ninterface PositionOptions {\n\tenableHighAccuracy?: boolean;\n\tmaximumAge?: number;\n\ttimeout?: number;\n}\n\ninterface ProgressEventInit extends EventInit {\n\tlengthComputable?: boolean;\n\tloaded?: number;\n\ttotal?: number;\n}\n\ninterface PushSubscriptionOptionsInit {\n\tapplicationServerKey?: any;\n\tuserVisibleOnly?: boolean;\n}\n\ninterface RegistrationOptions {\n\tscope?: string;\n}\n\ninterface RequestInit {\n\tbody?: any;\n\tcache?: RequestCache;\n\tcredentials?: RequestCredentials;\n\theaders?: any;\n\tintegrity?: string;\n\tkeepalive?: boolean;\n\tmethod?: string;\n\tmode?: RequestMode;\n\tredirect?: RequestRedirect;\n\treferrer?: string;\n\treferrerPolicy?: ReferrerPolicy;\n\twindow?: any;\n}\n\ninterface ResponseInit {\n\theaders?: any;\n\tstatus?: number;\n\tstatusText?: string;\n}\n\ninterface ServiceWorkerMessageEventInit extends EventInit {\n\tdata?: any;\n\tlastEventId?: string;\n\torigin?: string;\n\tports?: MessagePort[];\n\tsource?: ServiceWorker | MessagePort;\n}\n\ninterface StoreExceptionsInformation extends ExceptionInformation {\n\tdetailURI?: string;\n\texplanationString?: string;\n\tsiteName?: string;\n}\n\ninterface StoreSiteSpecificExceptionsInformation extends StoreExceptionsInformation {\n\tarrayOfDomainStrings?: string[];\n}\n\ninterface TransitionEventInit extends EventInit {\n\telapsedTime?: number;\n\tpropertyName?: string;\n}\n\ninterface UIEventInit extends EventInit {\n\tdetail?: number;\n\tview?: Window;\n}\n\ninterface WheelEventInit extends MouseEventInit {\n\tdeltaMode?: number;\n\tdeltaX?: number;\n\tdeltaY?: number;\n\tdeltaZ?: number;\n}\n\ninterface EventListener {\n\t(evt: Event): void;\n}\n\ninterface ANGLE_instanced_arrays {\n\tdrawArraysInstancedANGLE(mode: number, first: number, count: number, primcount: number): void;\n\tdrawElementsInstancedANGLE(mode: number, count: number, type: number, offset: number, primcount: number): void;\n\tvertexAttribDivisorANGLE(index: number, divisor: number): void;\n\treadonly VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: number;\n}\n\ndeclare var ANGLE_instanced_arrays: {\n\tprototype: ANGLE_instanced_arrays;\n\tnew(): ANGLE_instanced_arrays;\n\treadonly VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: number;\n};\n\ninterface AnimationEvent extends Event {\n\treadonly animationName: string;\n\treadonly elapsedTime: number;\n\tinitAnimationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, animationNameArg: string, elapsedTimeArg: number): void;\n}\n\ndeclare var AnimationEvent: {\n\tprototype: AnimationEvent;\n\tnew(typeArg: string, eventInitDict?: AnimationEventInit): AnimationEvent;\n};\n\ninterface ApplicationCacheEventMap {\n\t"cached": Event;\n\t"checking": Event;\n\t"downloading": Event;\n\t"error": Event;\n\t"noupdate": Event;\n\t"obsolete": Event;\n\t"progress": ProgressEvent;\n\t"updateready": Event;\n}\n\ninterface ApplicationCache extends EventTarget {\n\toncached: (this: ApplicationCache, ev: Event) => any;\n\tonchecking: (this: ApplicationCache, ev: Event) => any;\n\tondownloading: (this: ApplicationCache, ev: Event) => any;\n\tonerror: (this: ApplicationCache, ev: Event) => any;\n\tonnoupdate: (this: ApplicationCache, ev: Event) => any;\n\tonobsolete: (this: ApplicationCache, ev: Event) => any;\n\tonprogress: (this: ApplicationCache, ev: ProgressEvent) => any;\n\tonupdateready: (this: ApplicationCache, ev: Event) => any;\n\treadonly status: number;\n\tabort(): void;\n\tswapCache(): void;\n\tupdate(): void;\n\treadonly CHECKING: number;\n\treadonly DOWNLOADING: number;\n\treadonly IDLE: number;\n\treadonly OBSOLETE: number;\n\treadonly UNCACHED: number;\n\treadonly UPDATEREADY: number;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var ApplicationCache: {\n\tprototype: ApplicationCache;\n\tnew(): ApplicationCache;\n\treadonly CHECKING: number;\n\treadonly DOWNLOADING: number;\n\treadonly IDLE: number;\n\treadonly OBSOLETE: number;\n\treadonly UNCACHED: number;\n\treadonly UPDATEREADY: number;\n};\n\ninterface Attr extends Node {\n\treadonly name: string;\n\treadonly ownerElement: Element;\n\treadonly prefix: string | null;\n\treadonly specified: boolean;\n\tvalue: string;\n}\n\ndeclare var Attr: {\n\tprototype: Attr;\n\tnew(): Attr;\n};\n\ninterface BarProp {\n\treadonly visible: boolean;\n}\n\ndeclare var BarProp: {\n\tprototype: BarProp;\n\tnew(): BarProp;\n};\n\ninterface BeforeUnloadEvent extends Event {\n\treturnValue: any;\n}\n\ndeclare var BeforeUnloadEvent: {\n\tprototype: BeforeUnloadEvent;\n\tnew(): BeforeUnloadEvent;\n};\n\ninterface Blob {\n\treadonly size: number;\n\treadonly type: string;\n\tslice(start?: number, end?: number, contentType?: string): Blob;\n}\n\ndeclare var Blob: {\n\tprototype: Blob;\n\tnew (blobParts?: any[], options?: BlobPropertyBag): Blob;\n};\n\ninterface Cache {\n\tadd(request: RequestInfo): Promise<void>;\n\taddAll(requests: RequestInfo[]): Promise<void>;\n\tdelete(request: RequestInfo, options?: CacheQueryOptions): Promise<boolean>;\n\tkeys(request?: RequestInfo, options?: CacheQueryOptions): any;\n\tmatch(request: RequestInfo, options?: CacheQueryOptions): Promise<Response>;\n\tmatchAll(request?: RequestInfo, options?: CacheQueryOptions): any;\n\tput(request: RequestInfo, response: Response): Promise<void>;\n}\n\ndeclare var Cache: {\n\tprototype: Cache;\n\tnew(): Cache;\n};\n\ninterface CacheStorage {\n\tdelete(cacheName: string): Promise<boolean>;\n\thas(cacheName: string): Promise<boolean>;\n\tkeys(): any;\n\tmatch(request: RequestInfo, options?: CacheQueryOptions): Promise<any>;\n\topen(cacheName: string): Promise<Cache>;\n}\n\ndeclare var CacheStorage: {\n\tprototype: CacheStorage;\n\tnew(): CacheStorage;\n};\n\ninterface CanvasGradient {\n\taddColorStop(offset: number, color: string): void;\n}\n\ndeclare var CanvasGradient: {\n\tprototype: CanvasGradient;\n\tnew(): CanvasGradient;\n};\n\ninterface CanvasPattern {\n}\n\ndeclare var CanvasPattern: {\n\tprototype: CanvasPattern;\n\tnew(): CanvasPattern;\n};\n\ninterface CanvasRenderingContext2D extends Object, CanvasPathMethods {\n\treadonly canvas: HTMLCanvasElement;\n\tfillStyle: string | CanvasGradient | CanvasPattern;\n\tfont: string;\n\tglobalAlpha: number;\n\tglobalCompositeOperation: string;\n\timageSmoothingEnabled: boolean;\n\tlineCap: string;\n\tlineDashOffset: number;\n\tlineJoin: string;\n\tlineWidth: number;\n\tmiterLimit: number;\n\tshadowBlur: number;\n\tshadowColor: string;\n\tshadowOffsetX: number;\n\tshadowOffsetY: number;\n\tstrokeStyle: string | CanvasGradient | CanvasPattern;\n\ttextAlign: string;\n\ttextBaseline: string;\n\tmozImageSmoothingEnabled: boolean;\n\toImageSmoothingEnabled: boolean;\n\tbeginPath(): void;\n\tclearRect(x: number, y: number, w: number, h: number): void;\n\tclip(fillRule?: CanvasFillRule): void;\n\tcreateImageData(imageDataOrSw: number | ImageData, sh?: number): ImageData;\n\tcreateLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;\n\tcreatePattern(image: HTMLImageElement | HTMLCanvasElement , repetition: string): CanvasPattern;\n\tcreateRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;\n\tdrawFocusIfNeeded(element: Element): void;\n\tdrawImage(image: HTMLImageElement | HTMLCanvasElement  | ImageBitmap, dstX: number, dstY: number): void;\n\tdrawImage(image: HTMLImageElement | HTMLCanvasElement  | ImageBitmap, dstX: number, dstY: number, dstW: number, dstH: number): void;\n\tdrawImage(image: HTMLImageElement | HTMLCanvasElement  | ImageBitmap, srcX: number, srcY: number, srcW: number, srcH: number, dstX: number, dstY: number, dstW: number, dstH: number): void;\n\tfill(fillRule?: CanvasFillRule): void;\n\tfillRect(x: number, y: number, w: number, h: number): void;\n\tfillText(text: string, x: number, y: number, maxWidth?: number): void;\n\tgetImageData(sx: number, sy: number, sw: number, sh: number): ImageData;\n\tgetLineDash(): number[];\n\tisPointInPath(x: number, y: number, fillRule?: CanvasFillRule): boolean;\n\tmeasureText(text: string): TextMetrics;\n\tputImageData(imagedata: ImageData, dx: number, dy: number, dirtyX?: number, dirtyY?: number, dirtyWidth?: number, dirtyHeight?: number): void;\n\trestore(): void;\n\trotate(angle: number): void;\n\tsave(): void;\n\tscale(x: number, y: number): void;\n\tsetLineDash(segments: number[]): void;\n\tsetTransform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\n\tstroke(path?: Path2D): void;\n\tstrokeRect(x: number, y: number, w: number, h: number): void;\n\tstrokeText(text: string, x: number, y: number, maxWidth?: number): void;\n\ttransform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\n\ttranslate(x: number, y: number): void;\n}\n\ndeclare var CanvasRenderingContext2D: {\n\tprototype: CanvasRenderingContext2D;\n\tnew(): CanvasRenderingContext2D;\n};\n\ninterface CDATASection extends Text {\n}\n\ndeclare var CDATASection: {\n\tprototype: CDATASection;\n\tnew(): CDATASection;\n};\n\ninterface CharacterData extends Node, ChildNode {\n\tdata: string;\n\treadonly length: number;\n\tappendData(arg: string): void;\n\tdeleteData(offset: number, count: number): void;\n\tinsertData(offset: number, arg: string): void;\n\treplaceData(offset: number, count: number, arg: string): void;\n\tsubstringData(offset: number, count: number): string;\n}\n\ndeclare var CharacterData: {\n\tprototype: CharacterData;\n\tnew(): CharacterData;\n};\n\ninterface ClientRect {\n\tbottom: number;\n\treadonly height: number;\n\tleft: number;\n\tright: number;\n\ttop: number;\n\treadonly width: number;\n}\n\ndeclare var ClientRect: {\n\tprototype: ClientRect;\n\tnew(): ClientRect;\n};\n\ninterface ClientRectList {\n\treadonly length: number;\n\titem(index: number): ClientRect;\n\t[index: number]: ClientRect;\n}\n\ndeclare var ClientRectList: {\n\tprototype: ClientRectList;\n\tnew(): ClientRectList;\n};\n\ninterface ClipboardEvent extends Event {\n\treadonly clipboardData: DataTransfer;\n}\n\ndeclare var ClipboardEvent: {\n\tprototype: ClipboardEvent;\n\tnew(type: string, eventInitDict?: ClipboardEventInit): ClipboardEvent;\n};\n\ninterface CloseEvent extends Event {\n\treadonly code: number;\n\treadonly reason: string;\n\treadonly wasClean: boolean;\n\tinitCloseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, wasCleanArg: boolean, codeArg: number, reasonArg: string): void;\n}\n\ndeclare var CloseEvent: {\n\tprototype: CloseEvent;\n\tnew(typeArg: string, eventInitDict?: CloseEventInit): CloseEvent;\n};\n\ninterface Comment extends CharacterData {\n\ttext: string;\n}\n\ndeclare var Comment: {\n\tprototype: Comment;\n\tnew(): Comment;\n};\n\ninterface CompositionEvent extends UIEvent {\n\treadonly data: string;\n\treadonly locale: string;\n\tinitCompositionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, locale: string): void;\n}\n\ndeclare var CompositionEvent: {\n\tprototype: CompositionEvent;\n\tnew(typeArg: string, eventInitDict?: CompositionEventInit): CompositionEvent;\n};\n\ninterface Console {\n\tassert(test?: boolean, message?: string, ...optionalParams: any[]): void;\n\tclear(): void;\n\tcount(countTitle?: string): void;\n\tdebug(message?: any, ...optionalParams: any[]): void;\n\tdir(value?: any, ...optionalParams: any[]): void;\n\tdirxml(value: any): void;\n\terror(message?: any, ...optionalParams: any[]): void;\n\texception(message?: string, ...optionalParams: any[]): void;\n\tgroup(groupTitle?: string, ...optionalParams: any[]): void;\n\tgroupCollapsed(groupTitle?: string, ...optionalParams: any[]): void;\n\tgroupEnd(): void;\n\tinfo(message?: any, ...optionalParams: any[]): void;\n\tlog(message?: any, ...optionalParams: any[]): void;\n\tprofile(reportName?: string): void;\n\tprofileEnd(): void;\n\tselect(element: Element): void;\n\ttable(...data: any[]): void;\n\ttime(timerName?: string): void;\n\ttimeEnd(timerName?: string): void;\n\ttrace(message?: any, ...optionalParams: any[]): void;\n\twarn(message?: any, ...optionalParams: any[]): void;\n}\n\ndeclare var Console: {\n\tprototype: Console;\n\tnew(): Console;\n};\n\ninterface Coordinates {\n\treadonly accuracy: number;\n\treadonly altitude: number | null;\n\treadonly altitudeAccuracy: number | null;\n\treadonly heading: number | null;\n\treadonly latitude: number;\n\treadonly longitude: number;\n\treadonly speed: number | null;\n}\n\ndeclare var Coordinates: {\n\tprototype: Coordinates;\n\tnew(): Coordinates;\n};\n\ninterface CSS {\n\tsupports(property: string, value?: string): boolean;\n}\ndeclare var CSS: CSS;\n\ninterface CSSConditionRule extends CSSGroupingRule {\n\tconditionText: string;\n}\n\ndeclare var CSSConditionRule: {\n\tprototype: CSSConditionRule;\n\tnew(): CSSConditionRule;\n};\n\ninterface CSSFontFaceRule extends CSSRule {\n\treadonly style: CSSStyleDeclaration;\n}\n\ndeclare var CSSFontFaceRule: {\n\tprototype: CSSFontFaceRule;\n\tnew(): CSSFontFaceRule;\n};\n\ninterface CSSGroupingRule extends CSSRule {\n\treadonly cssRules: CSSRuleList;\n\tdeleteRule(index: number): void;\n\tinsertRule(rule: string, index: number): number;\n}\n\ndeclare var CSSGroupingRule: {\n\tprototype: CSSGroupingRule;\n\tnew(): CSSGroupingRule;\n};\n\ninterface CSSImportRule extends CSSRule {\n\treadonly href: string;\n\treadonly media: MediaList;\n\treadonly styleSheet: CSSStyleSheet;\n}\n\ndeclare var CSSImportRule: {\n\tprototype: CSSImportRule;\n\tnew(): CSSImportRule;\n};\n\ninterface CSSKeyframeRule extends CSSRule {\n\tkeyText: string;\n\treadonly style: CSSStyleDeclaration;\n}\n\ndeclare var CSSKeyframeRule: {\n\tprototype: CSSKeyframeRule;\n\tnew(): CSSKeyframeRule;\n};\n\ninterface CSSKeyframesRule extends CSSRule {\n\treadonly cssRules: CSSRuleList;\n\tname: string;\n\tappendRule(rule: string): void;\n\tdeleteRule(rule: string): void;\n\tfindRule(rule: string): CSSKeyframeRule;\n}\n\ndeclare var CSSKeyframesRule: {\n\tprototype: CSSKeyframesRule;\n\tnew(): CSSKeyframesRule;\n};\n\ninterface CSSMediaRule extends CSSConditionRule {\n\treadonly media: MediaList;\n}\n\ndeclare var CSSMediaRule: {\n\tprototype: CSSMediaRule;\n\tnew(): CSSMediaRule;\n};\n\ninterface CSSNamespaceRule extends CSSRule {\n\treadonly namespaceURI: string;\n\treadonly prefix: string;\n}\n\ndeclare var CSSNamespaceRule: {\n\tprototype: CSSNamespaceRule;\n\tnew(): CSSNamespaceRule;\n};\n\ninterface CSSPageRule extends CSSRule {\n\treadonly pseudoClass: string;\n\treadonly selector: string;\n\tselectorText: string;\n\treadonly style: CSSStyleDeclaration;\n}\n\ndeclare var CSSPageRule: {\n\tprototype: CSSPageRule;\n\tnew(): CSSPageRule;\n};\n\ninterface CSSRule {\n\tcssText: string;\n\treadonly parentRule: CSSRule;\n\treadonly parentStyleSheet: CSSStyleSheet;\n\treadonly type: number;\n\treadonly CHARSET_RULE: number;\n\treadonly FONT_FACE_RULE: number;\n\treadonly IMPORT_RULE: number;\n\treadonly KEYFRAME_RULE: number;\n\treadonly KEYFRAMES_RULE: number;\n\treadonly MEDIA_RULE: number;\n\treadonly NAMESPACE_RULE: number;\n\treadonly PAGE_RULE: number;\n\treadonly STYLE_RULE: number;\n\treadonly SUPPORTS_RULE: number;\n\treadonly UNKNOWN_RULE: number;\n\treadonly VIEWPORT_RULE: number;\n}\n\ndeclare var CSSRule: {\n\tprototype: CSSRule;\n\tnew(): CSSRule;\n\treadonly CHARSET_RULE: number;\n\treadonly FONT_FACE_RULE: number;\n\treadonly IMPORT_RULE: number;\n\treadonly KEYFRAME_RULE: number;\n\treadonly KEYFRAMES_RULE: number;\n\treadonly MEDIA_RULE: number;\n\treadonly NAMESPACE_RULE: number;\n\treadonly PAGE_RULE: number;\n\treadonly STYLE_RULE: number;\n\treadonly SUPPORTS_RULE: number;\n\treadonly UNKNOWN_RULE: number;\n\treadonly VIEWPORT_RULE: number;\n};\n\ninterface CSSRuleList {\n\treadonly length: number;\n\titem(index: number): CSSRule;\n\t[index: number]: CSSRule;\n}\n\ndeclare var CSSRuleList: {\n\tprototype: CSSRuleList;\n\tnew(): CSSRuleList;\n};\n\ninterface CSSStyleDeclaration {\n\talignContent: string | null;\n\talignItems: string | null;\n\talignmentBaseline: string | null;\n\talignSelf: string | null;\n\tanimation: string | null;\n\tanimationDelay: string | null;\n\tanimationDirection: string | null;\n\tanimationDuration: string | null;\n\tanimationFillMode: string | null;\n\tanimationIterationCount: string | null;\n\tanimationName: string | null;\n\tanimationPlayState: string | null;\n\tanimationTimingFunction: string | null;\n\tbackfaceVisibility: string | null;\n\tbackground: string | null;\n\tbackgroundAttachment: string | null;\n\tbackgroundClip: string | null;\n\tbackgroundColor: string | null;\n\tbackgroundImage: string | null;\n\tbackgroundOrigin: string | null;\n\tbackgroundPosition: string | null;\n\tbackgroundPositionX: string | null;\n\tbackgroundPositionY: string | null;\n\tbackgroundRepeat: string | null;\n\tbackgroundSize: string | null;\n\tbaselineShift: string | null;\n\tborder: string | null;\n\tborderBottom: string | null;\n\tborderBottomColor: string | null;\n\tborderBottomLeftRadius: string | null;\n\tborderBottomRightRadius: string | null;\n\tborderBottomStyle: string | null;\n\tborderBottomWidth: string | null;\n\tborderCollapse: string | null;\n\tborderColor: string | null;\n\tborderImage: string | null;\n\tborderImageOutset: string | null;\n\tborderImageRepeat: string | null;\n\tborderImageSlice: string | null;\n\tborderImageSource: string | null;\n\tborderImageWidth: string | null;\n\tborderLeft: string | null;\n\tborderLeftColor: string | null;\n\tborderLeftStyle: string | null;\n\tborderLeftWidth: string | null;\n\tborderRadius: string | null;\n\tborderRight: string | null;\n\tborderRightColor: string | null;\n\tborderRightStyle: string | null;\n\tborderRightWidth: string | null;\n\tborderSpacing: string | null;\n\tborderStyle: string | null;\n\tborderTop: string | null;\n\tborderTopColor: string | null;\n\tborderTopLeftRadius: string | null;\n\tborderTopRightRadius: string | null;\n\tborderTopStyle: string | null;\n\tborderTopWidth: string | null;\n\tborderWidth: string | null;\n\tbottom: string | null;\n\tboxShadow: string | null;\n\tboxSizing: string | null;\n\tbreakAfter: string | null;\n\tbreakBefore: string | null;\n\tbreakInside: string | null;\n\tcaptionSide: string | null;\n\tclear: string | null;\n\tclip: string | null;\n\tclipPath: string | null;\n\tclipRule: string | null;\n\tcolor: string | null;\n\tcolorInterpolationFilters: string | null;\n\tcolumnCount: any;\n\tcolumnFill: string | null;\n\tcolumnGap: any;\n\tcolumnRule: string | null;\n\tcolumnRuleColor: any;\n\tcolumnRuleStyle: string | null;\n\tcolumnRuleWidth: any;\n\tcolumns: string | null;\n\tcolumnSpan: string | null;\n\tcolumnWidth: any;\n\tcontent: string | null;\n\tcounterIncrement: string | null;\n\tcounterReset: string | null;\n\tcssFloat: string | null;\n\tcssText: string;\n\tcursor: string | null;\n\tdirection: string | null;\n\tdisplay: string | null;\n\tdominantBaseline: string | null;\n\temptyCells: string | null;\n\tenableBackground: string | null;\n\tfill: string | null;\n\tfillOpacity: string | null;\n\tfillRule: string | null;\n\tfilter: string | null;\n\tflex: string | null;\n\tflexBasis: string | null;\n\tflexDirection: string | null;\n\tflexFlow: string | null;\n\tflexGrow: string | null;\n\tflexShrink: string | null;\n\tflexWrap: string | null;\n\tfloodColor: string | null;\n\tfloodOpacity: string | null;\n\tfont: string | null;\n\tfontFamily: string | null;\n\tfontFeatureSettings: string | null;\n\tfontSize: string | null;\n\tfontSizeAdjust: string | null;\n\tfontStretch: string | null;\n\tfontStyle: string | null;\n\tfontVariant: string | null;\n\tfontWeight: string | null;\n\tglyphOrientationHorizontal: string | null;\n\tglyphOrientationVertical: string | null;\n\theight: string | null;\n\timeMode: string | null;\n\tjustifyContent: string | null;\n\tkerning: string | null;\n\tlayoutGrid: string | null;\n\tlayoutGridChar: string | null;\n\tlayoutGridLine: string | null;\n\tlayoutGridMode: string | null;\n\tlayoutGridType: string | null;\n\tleft: string | null;\n\treadonly length: number;\n\tletterSpacing: string | null;\n\tlightingColor: string | null;\n\tlineBreak: string | null;\n\tlineHeight: string | null;\n\tlistStyle: string | null;\n\tlistStyleImage: string | null;\n\tlistStylePosition: string | null;\n\tlistStyleType: string | null;\n\tmargin: string | null;\n\tmarginBottom: string | null;\n\tmarginLeft: string | null;\n\tmarginRight: string | null;\n\tmarginTop: string | null;\n\tmarker: string | null;\n\tmarkerEnd: string | null;\n\tmarkerMid: string | null;\n\tmarkerStart: string | null;\n\tmask: string | null;\n\tmaxHeight: string | null;\n\tmaxWidth: string | null;\n\tminHeight: string | null;\n\tminWidth: string | null;\n\topacity: string | null;\n\torder: string | null;\n\torphans: string | null;\n\toutline: string | null;\n\toutlineColor: string | null;\n\toutlineOffset: string | null;\n\toutlineStyle: string | null;\n\toutlineWidth: string | null;\n\toverflow: string | null;\n\toverflowX: string | null;\n\toverflowY: string | null;\n\tpadding: string | null;\n\tpaddingBottom: string | null;\n\tpaddingLeft: string | null;\n\tpaddingRight: string | null;\n\tpaddingTop: string | null;\n\tpageBreakAfter: string | null;\n\tpageBreakBefore: string | null;\n\tpageBreakInside: string | null;\n\treadonly parentRule: CSSRule;\n\tperspective: string | null;\n\tperspectiveOrigin: string | null;\n\tpointerEvents: string | null;\n\tposition: string | null;\n\tquotes: string | null;\n\tright: string | null;\n\trotate: string | null;\n\trubyAlign: string | null;\n\trubyOverhang: string | null;\n\trubyPosition: string | null;\n\tscale: string | null;\n\tstopColor: string | null;\n\tstopOpacity: string | null;\n\tstroke: string | null;\n\tstrokeDasharray: string | null;\n\tstrokeDashoffset: string | null;\n\tstrokeLinecap: string | null;\n\tstrokeLinejoin: string | null;\n\tstrokeMiterlimit: string | null;\n\tstrokeOpacity: string | null;\n\tstrokeWidth: string | null;\n\ttableLayout: string | null;\n\ttextAlign: string | null;\n\ttextAlignLast: string | null;\n\ttextAnchor: string | null;\n\ttextDecoration: string | null;\n\ttextIndent: string | null;\n\ttextJustify: string | null;\n\ttextKashida: string | null;\n\ttextKashidaSpace: string | null;\n\ttextOverflow: string | null;\n\ttextShadow: string | null;\n\ttextTransform: string | null;\n\ttextUnderlinePosition: string | null;\n\ttop: string | null;\n\ttouchAction: string | null;\n\ttransform: string | null;\n\ttransformOrigin: string | null;\n\ttransformStyle: string | null;\n\ttransition: string | null;\n\ttransitionDelay: string | null;\n\ttransitionDuration: string | null;\n\ttransitionProperty: string | null;\n\ttransitionTimingFunction: string | null;\n\ttranslate: string | null;\n\tunicodeBidi: string | null;\n\tverticalAlign: string | null;\n\tvisibility: string | null;\n\twhiteSpace: string | null;\n\twidows: string | null;\n\twidth: string | null;\n\twordBreak: string | null;\n\twordSpacing: string | null;\n\twordWrap: string | null;\n\twritingMode: string | null;\n\tzIndex: string | null;\n\tzoom: string | null;\n\tresize: string | null;\n\tuserSelect: string | null;\n\tgetPropertyPriority(propertyName: string): string;\n\tgetPropertyValue(propertyName: string): string;\n\titem(index: number): string;\n\tremoveProperty(propertyName: string): string;\n\tsetProperty(propertyName: string, value: string | null, priority?: string): void;\n\t[index: number]: string;\n}\n\ndeclare var CSSStyleDeclaration: {\n\tprototype: CSSStyleDeclaration;\n\tnew(): CSSStyleDeclaration;\n};\n\ninterface CSSStyleRule extends CSSRule {\n\treadonly readOnly: boolean;\n\tselectorText: string;\n\treadonly style: CSSStyleDeclaration;\n}\n\ndeclare var CSSStyleRule: {\n\tprototype: CSSStyleRule;\n\tnew(): CSSStyleRule;\n};\n\ninterface CSSStyleSheet extends StyleSheet {\n\treadonly cssRules: CSSRuleList;\n\tcssText: string;\n\treadonly id: string;\n\treadonly imports: StyleSheetList;\n\treadonly isAlternate: boolean;\n\treadonly isPrefAlternate: boolean;\n\treadonly ownerRule: CSSRule;\n\treadonly owningElement: Element;\n\treadonly pages: StyleSheetPageList;\n\treadonly readOnly: boolean;\n\treadonly rules: CSSRuleList;\n\taddImport(bstrURL: string, lIndex?: number): number;\n\taddPageRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;\n\taddRule(bstrSelector: string, bstrStyle?: string, lIndex?: number): number;\n\tdeleteRule(index?: number): void;\n\tinsertRule(rule: string, index?: number): number;\n\tremoveImport(lIndex: number): void;\n\tremoveRule(lIndex: number): void;\n}\n\ndeclare var CSSStyleSheet: {\n\tprototype: CSSStyleSheet;\n\tnew(): CSSStyleSheet;\n};\n\ninterface CSSSupportsRule extends CSSConditionRule {\n}\n\ndeclare var CSSSupportsRule: {\n\tprototype: CSSSupportsRule;\n\tnew(): CSSSupportsRule;\n};\n\ninterface CustomEvent extends Event {\n\treadonly detail: any;\n\tinitCustomEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, detailArg: any): void;\n}\n\ndeclare var CustomEvent: {\n\tprototype: CustomEvent;\n\tnew(typeArg: string, eventInitDict?: CustomEventInit): CustomEvent;\n};\n\ninterface DataTransfer {\n\tdropEffect: string;\n\teffectAllowed: string;\n\treadonly files: FileList;\n\treadonly items: DataTransferItemList;\n\treadonly types: string[];\n\tclearData(format?: string): boolean;\n\tgetData(format: string): string;\n\tsetData(format: string, data: string): boolean;\n\tsetDragImage(image: Element, x: number, y: number): void;\n}\n\ndeclare var DataTransfer: {\n\tprototype: DataTransfer;\n\tnew(): DataTransfer;\n};\n\ninterface DataTransferItem {\n\treadonly kind: string;\n\treadonly type: string;\n\tgetAsFile(): File | null;\n\tgetAsString(_callback: FunctionStringCallback | null): void;\n}\n\ndeclare var DataTransferItem: {\n\tprototype: DataTransferItem;\n\tnew(): DataTransferItem;\n};\n\ninterface DataTransferItemList {\n\treadonly length: number;\n\tadd(data: File): DataTransferItem | null;\n\tclear(): void;\n\titem(index: number): DataTransferItem;\n\tremove(index: number): void;\n\t[index: number]: DataTransferItem;\n}\n\ndeclare var DataTransferItemList: {\n\tprototype: DataTransferItemList;\n\tnew(): DataTransferItemList;\n};\n\ninterface DeferredPermissionRequest {\n\treadonly id: number;\n\treadonly uri: string;\n\tallow(): void;\n\tdeny(): void;\n}\n\ndeclare var DeferredPermissionRequest: {\n\tprototype: DeferredPermissionRequest;\n\tnew(): DeferredPermissionRequest;\n};\n\ninterface DeviceAcceleration {\n\treadonly x: number | null;\n\treadonly y: number | null;\n\treadonly z: number | null;\n}\n\ndeclare var DeviceAcceleration: {\n\tprototype: DeviceAcceleration;\n\tnew(): DeviceAcceleration;\n};\n\ninterface DeviceLightEvent extends Event {\n\treadonly value: number;\n}\n\ndeclare var DeviceLightEvent: {\n\tprototype: DeviceLightEvent;\n\tnew(typeArg: string, eventInitDict?: DeviceLightEventInit): DeviceLightEvent;\n};\n\ninterface DeviceMotionEvent extends Event {\n\treadonly acceleration: DeviceAcceleration | null;\n\treadonly accelerationIncludingGravity: DeviceAcceleration | null;\n\treadonly interval: number | null;\n\treadonly rotationRate: DeviceRotationRate | null;\n\tinitDeviceMotionEvent(type: string, bubbles: boolean, cancelable: boolean, acceleration: DeviceAccelerationDict | null, accelerationIncludingGravity: DeviceAccelerationDict | null, rotationRate: DeviceRotationRateDict | null, interval: number | null): void;\n}\n\ndeclare var DeviceMotionEvent: {\n\tprototype: DeviceMotionEvent;\n\tnew(typeArg: string, eventInitDict?: DeviceMotionEventInit): DeviceMotionEvent;\n};\n\ninterface DeviceOrientationEvent extends Event {\n\treadonly absolute: boolean;\n\treadonly alpha: number | null;\n\treadonly beta: number | null;\n\treadonly gamma: number | null;\n\tinitDeviceOrientationEvent(type: string, bubbles: boolean, cancelable: boolean, alpha: number | null, beta: number | null, gamma: number | null, absolute: boolean): void;\n}\n\ndeclare var DeviceOrientationEvent: {\n\tprototype: DeviceOrientationEvent;\n\tnew(typeArg: string, eventInitDict?: DeviceOrientationEventInit): DeviceOrientationEvent;\n};\n\ninterface DeviceRotationRate {\n\treadonly alpha: number | null;\n\treadonly beta: number | null;\n\treadonly gamma: number | null;\n}\n\ndeclare var DeviceRotationRate: {\n\tprototype: DeviceRotationRate;\n\tnew(): DeviceRotationRate;\n};\n\ninterface DocumentEventMap extends GlobalEventHandlersEventMap {\n\t"abort": UIEvent;\n\t"activate": UIEvent;\n\t"beforeactivate": UIEvent;\n\t"beforedeactivate": UIEvent;\n\t"blur": FocusEvent;\n\t"canplay": Event;\n\t"canplaythrough": Event;\n\t"change": Event;\n\t"click": MouseEvent;\n\t"contextmenu": PointerEvent;\n\t"dblclick": MouseEvent;\n\t"deactivate": UIEvent;\n\t"drag": DragEvent;\n\t"dragend": DragEvent;\n\t"dragenter": DragEvent;\n\t"dragleave": DragEvent;\n\t"dragover": DragEvent;\n\t"dragstart": DragEvent;\n\t"drop": DragEvent;\n\t"durationchange": Event;\n\t"emptied": Event;\n\t"error": ErrorEvent;\n\t"focus": FocusEvent;\n\t"fullscreenchange": Event;\n\t"fullscreenerror": Event;\n\t"input": Event;\n\t"invalid": Event;\n\t"keydown": KeyboardEvent;\n\t"keypress": KeyboardEvent;\n\t"keyup": KeyboardEvent;\n\t"load": Event;\n\t"loadeddata": Event;\n\t"loadedmetadata": Event;\n\t"loadstart": Event;\n\t"mousedown": MouseEvent;\n\t"mousemove": MouseEvent;\n\t"mouseout": MouseEvent;\n\t"mouseover": MouseEvent;\n\t"mouseup": MouseEvent;\n\t"mousewheel": WheelEvent;\n\t"pause": Event;\n\t"play": Event;\n\t"playing": Event;\n\t"pointerlockchange": Event;\n\t"pointerlockerror": Event;\n\t"progress": ProgressEvent;\n\t"ratechange": Event;\n\t"readystatechange": Event;\n\t"reset": Event;\n\t"scroll": UIEvent;\n\t"seeked": Event;\n\t"seeking": Event;\n\t"select": UIEvent;\n\t"selectionchange": Event;\n\t"selectstart": Event;\n\t"stalled": Event;\n\t"stop": Event;\n\t"submit": Event;\n\t"suspend": Event;\n\t"timeupdate": Event;\n\t"touchcancel": TouchEvent;\n\t"touchend": TouchEvent;\n\t"touchmove": TouchEvent;\n\t"touchstart": TouchEvent;\n\t"volumechange": Event;\n\t"waiting": Event;\n\t"webkitfullscreenchange": Event;\n\t"webkitfullscreenerror": Event;\n}\n\ninterface Document extends Node, GlobalEventHandlers, NodeSelector, DocumentEvent, ParentNode, DocumentOrShadowRoot {\n\t/**\n\t * Gets the object that has the focus when the parent document has focus.\n\t */\n\treadonly activeElement: Element;\n\t/**\n\t * Sets or gets the color of all active links in the document.\n\t */\n\talinkColor: string;\n\t/**\n\t * Returns a reference to the collection of elements contained by the object.\n\t */\n\treadonly all: HTMLAllCollection;\n\t/**\n\t * Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.\n\t */\n\tanchors: HTMLCollectionOf<HTMLAnchorElement>;\n\t/**\n\t * Retrieves a collection of all applet objects in the document.\n\t */\n\tapplets: HTMLCollectionOf<HTMLAppletElement>;\n\t/**\n\t * Deprecated. Sets or retrieves a value that indicates the background color behind the object.\n\t */\n\tbgColor: string;\n\t/**\n\t * Specifies the beginning and end of the document body.\n\t */\n\tbody: HTMLElement;\n\treadonly characterSet: string;\n\t/**\n\t * Gets or sets the character set used to encode the object.\n\t */\n\tcharset: string;\n\t/**\n\t * Gets a value that indicates whether standards-compliant mode is switched on for the object.\n\t */\n\treadonly compatMode: string;\n\tcookie: string;\n\treadonly currentScript: HTMLScriptElement ;\n\treadonly defaultView: Window;\n\t/**\n\t * Sets or gets a value that indicates whether the document can be edited.\n\t */\n\tdesignMode: string;\n\t/**\n\t * Sets or retrieves a value that indicates the reading order of the object.\n\t */\n\tdir: string;\n\t/**\n\t * Gets an object representing the document type declaration associated with the current document.\n\t */\n\treadonly doctype: DocumentType;\n\t/**\n\t * Gets a reference to the root node of the document.\n\t */\n\tdocumentElement: HTMLElement;\n\t/**\n\t * Sets or gets the security domain of the document.\n\t */\n\tdomain: string;\n\t/**\n\t * Retrieves a collection of all embed objects in the document.\n\t */\n\tembeds: HTMLCollectionOf<HTMLEmbedElement>;\n\t/**\n\t * Sets or gets the foreground (text) color of the document.\n\t */\n\tfgColor: string;\n\t/**\n\t * Retrieves a collection, in source order, of all form objects in the document.\n\t */\n\tforms: HTMLCollectionOf<HTMLFormElement>;\n\treadonly fullscreenElement: Element | null;\n\treadonly fullscreenEnabled: boolean;\n\treadonly head: HTMLHeadElement;\n\treadonly hidden: boolean;\n\t/**\n\t * Retrieves a collection, in source order, of img objects in the document.\n\t */\n\timages: HTMLCollectionOf<HTMLImageElement>;\n\t/**\n\t * Gets the implementation object of the current document.\n\t */\n\treadonly implementation: DOMImplementation;\n\t/**\n\t * Returns the character encoding used to create the webpage that is loaded into the document object.\n\t */\n\treadonly inputEncoding: string | null;\n\t/**\n\t * Gets the date that the page was last modified, if the page supplies one.\n\t */\n\treadonly lastModified: string;\n\t/**\n\t * Sets or gets the color of the document links.\n\t */\n\tlinkColor: string;\n\t/**\n\t * Retrieves a collection of all a objects that specify the href property and all area objects in the document.\n\t */\n\tlinks: HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>;\n\t/**\n\t * Contains information about the current URL.\n\t */\n\treadonly location: Location;\n\t/**\n\t * Fires when the user aborts the download.\n\t * @param ev The event.\n\t */\n\tonabort: (this: Document, ev: UIEvent) => any;\n\t/**\n\t * Fires when the object is set as the active element.\n\t * @param ev The event.\n\t */\n\tonactivate: (this: Document, ev: UIEvent) => any;\n\t/**\n\t * Fires immediately before the object is set as the active element.\n\t * @param ev The event.\n\t */\n\tonbeforeactivate: (this: Document, ev: UIEvent) => any;\n\t/**\n\t * Fires immediately before the activeElement is changed from the current object to another object in the parent document.\n\t * @param ev The event.\n\t */\n\tonbeforedeactivate: (this: Document, ev: UIEvent) => any;\n\t/**\n\t * Fires when the object loses the input focus.\n\t * @param ev The focus event.\n\t */\n\tonblur: (this: Document, ev: FocusEvent) => any;\n\t/**\n\t * Occurs when playback is possible, but would require further buffering.\n\t * @param ev The event.\n\t */\n\toncanplay: (this: Document, ev: Event) => any;\n\toncanplaythrough: (this: Document, ev: Event) => any;\n\t/**\n\t * Fires when the contents of the object or selection have changed.\n\t * @param ev The event.\n\t */\n\tonchange: (this: Document, ev: Event) => any;\n\t/**\n\t * Fires when the user clicks the left mouse button on the object\n\t * @param ev The mouse event.\n\t */\n\tonclick: (this: Document, ev: MouseEvent) => any;\n\t/**\n\t * Fires when the user clicks the right mouse button in the client area, opening the context menu.\n\t * @param ev The mouse event.\n\t */\n\toncontextmenu: (this: Document, ev: PointerEvent) => any;\n\t/**\n\t * Fires when the user double-clicks the object.\n\t * @param ev The mouse event.\n\t */\n\tondblclick: (this: Document, ev: MouseEvent) => any;\n\t/**\n\t * Fires when the activeElement is changed from the current object to another object in the parent document.\n\t * @param ev The UI Event\n\t */\n\tondeactivate: (this: Document, ev: UIEvent) => any;\n\t/**\n\t * Fires on the source object continuously during a drag operation.\n\t * @param ev The event.\n\t */\n\tondrag: (this: Document, ev: DragEvent) => any;\n\t/**\n\t * Fires on the source object when the user releases the mouse at the close of a drag operation.\n\t * @param ev The event.\n\t */\n\tondragend: (this: Document, ev: DragEvent) => any;\n\t/**\n\t * Fires on the target element when the user drags the object to a valid drop target.\n\t * @param ev The drag event.\n\t */\n\tondragenter: (this: Document, ev: DragEvent) => any;\n\t/**\n\t * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.\n\t * @param ev The drag event.\n\t */\n\tondragleave: (this: Document, ev: DragEvent) => any;\n\t/**\n\t * Fires on the target element continuously while the user drags the object over a valid drop target.\n\t * @param ev The event.\n\t */\n\tondragover: (this: Document, ev: DragEvent) => any;\n\t/**\n\t * Fires on the source object when the user starts to drag a text selection or selected object.\n\t * @param ev The event.\n\t */\n\tondragstart: (this: Document, ev: DragEvent) => any;\n\tondrop: (this: Document, ev: DragEvent) => any;\n\t/**\n\t * Occurs when the duration attribute is updated.\n\t * @param ev The event.\n\t */\n\tondurationchange: (this: Document, ev: Event) => any;\n\t/**\n\t * Occurs when the media element is reset to its initial state.\n\t * @param ev The event.\n\t */\n\tonemptied: (this: Document, ev: Event) => any;\n\t\n\t/**\n\t * Fires when an error occurs during object loading.\n\t * @param ev The event.\n\t */\n\tonerror: (this: Document, ev: ErrorEvent) => any;\n\t/**\n\t * Fires when the object receives focus.\n\t * @param ev The event.\n\t */\n\tonfocus: (this: Document, ev: FocusEvent) => any;\n\tonfullscreenchange: (this: Document, ev: Event) => any;\n\tonfullscreenerror: (this: Document, ev: Event) => any;\n\toninput: (this: Document, ev: Event) => any;\n\toninvalid: (this: Document, ev: Event) => any;\n\t/**\n\t * Fires when the user presses a key.\n\t * @param ev The keyboard event\n\t */\n\tonkeydown: (this: Document, ev: KeyboardEvent) => any;\n\t/**\n\t * Fires when the user presses an alphanumeric key.\n\t * @param ev The event.\n\t */\n\tonkeypress: (this: Document, ev: KeyboardEvent) => any;\n\t/**\n\t * Fires when the user releases a key.\n\t * @param ev The keyboard event\n\t */\n\tonkeyup: (this: Document, ev: KeyboardEvent) => any;\n\t/**\n\t * Fires immediately after the browser loads the object.\n\t * @param ev The event.\n\t */\n\tonload: (this: Document, ev: Event) => any;\n\t/**\n\t * Occurs when media data is loaded at the current playback position.\n\t * @param ev The event.\n\t */\n\tonloadeddata: (this: Document, ev: Event) => any;\n\t/**\n\t * Occurs when the duration and dimensions of the media have been determined.\n\t * @param ev The event.\n\t */\n\tonloadedmetadata: (this: Document, ev: Event) => any;\n\t/**\n\t * Occurs when Internet Explorer begins looking for media data.\n\t * @param ev The event.\n\t */\n\tonloadstart: (this: Document, ev: Event) => any;\n\t/**\n\t * Fires when the user clicks the object with either mouse button.\n\t * @param ev The mouse event.\n\t */\n\tonmousedown: (this: Document, ev: MouseEvent) => any;\n\t/**\n\t * Fires when the user moves the mouse over the object.\n\t * @param ev The mouse event.\n\t */\n\tonmousemove: (this: Document, ev: MouseEvent) => any;\n\t/**\n\t * Fires when the user moves the mouse pointer outside the boundaries of the object.\n\t * @param ev The mouse event.\n\t */\n\tonmouseout: (this: Document, ev: MouseEvent) => any;\n\t/**\n\t * Fires when the user moves the mouse pointer into the object.\n\t * @param ev The mouse event.\n\t */\n\tonmouseover: (this: Document, ev: MouseEvent) => any;\n\t/**\n\t * Fires when the user releases a mouse button while the mouse is over the object.\n\t * @param ev The mouse event.\n\t */\n\tonmouseup: (this: Document, ev: MouseEvent) => any;\n\t/**\n\t * Fires when the wheel button is rotated.\n\t * @param ev The mouse event\n\t */\n\tonmousewheel: (this: Document, ev: WheelEvent) => any;\n\t\n\t\n\t/**\n\t * Occurs when playback is paused.\n\t * @param ev The event.\n\t */\n\tonpause: (this: Document, ev: Event) => any;\n\t/**\n\t * Occurs when the play method is requested.\n\t * @param ev The event.\n\t */\n\tonplay: (this: Document, ev: Event) => any;\n\t/**\n\t * Occurs when the audio or video has started playing.\n\t * @param ev The event.\n\t */\n\tonplaying: (this: Document, ev: Event) => any;\n\tonpointerlockchange: (this: Document, ev: Event) => any;\n\tonpointerlockerror: (this: Document, ev: Event) => any;\n\t/**\n\t * Occurs to indicate progress while downloading media data.\n\t * @param ev The event.\n\t */\n\tonprogress: (this: Document, ev: ProgressEvent) => any;\n\t/**\n\t * Occurs when the playback rate is increased or decreased.\n\t * @param ev The event.\n\t */\n\tonratechange: (this: Document, ev: Event) => any;\n\t/**\n\t * Fires when the state of the object has changed.\n\t * @param ev The event\n\t */\n\tonreadystatechange: (this: Document, ev: Event) => any;\n\t/**\n\t * Fires when the user resets a form.\n\t * @param ev The event.\n\t */\n\tonreset: (this: Document, ev: Event) => any;\n\t/**\n\t * Fires when the user repositions the scroll box in the scroll bar on the object.\n\t * @param ev The event.\n\t */\n\tonscroll: (this: Document, ev: UIEvent) => any;\n\t/**\n\t * Occurs when the seek operation ends.\n\t * @param ev The event.\n\t */\n\tonseeked: (this: Document, ev: Event) => any;\n\t/**\n\t * Occurs when the current playback position is moved.\n\t * @param ev The event.\n\t */\n\tonseeking: (this: Document, ev: Event) => any;\n\t/**\n\t * Fires when the current selection changes.\n\t * @param ev The event.\n\t */\n\tonselect: (this: Document, ev: UIEvent) => any;\n\t/**\n\t * Fires when the selection state of a document changes.\n\t * @param ev The event.\n\t */\n\tonselectionchange: (this: Document, ev: Event) => any;\n\tonselectstart: (this: Document, ev: Event) => any;\n\t/**\n\t * Occurs when the download has stopped.\n\t * @param ev The event.\n\t */\n\tonstalled: (this: Document, ev: Event) => any;\n\t/**\n\t * Fires when the user clicks the Stop button or leaves the Web page.\n\t * @param ev The event.\n\t */\n\tonstop: (this: Document, ev: Event) => any;\n\tonsubmit: (this: Document, ev: Event) => any;\n\t/**\n\t * Occurs if the load operation has been intentionally halted.\n\t * @param ev The event.\n\t */\n\tonsuspend: (this: Document, ev: Event) => any;\n\t/**\n\t * Occurs to indicate the current playback position.\n\t * @param ev The event.\n\t */\n\tontimeupdate: (this: Document, ev: Event) => any;\n\tontouchcancel: (ev: TouchEvent) => any;\n\tontouchend: (ev: TouchEvent) => any;\n\tontouchmove: (ev: TouchEvent) => any;\n\tontouchstart: (ev: TouchEvent) => any;\n\t/**\n\t * Occurs when the volume is changed, or playback is muted or unmuted.\n\t * @param ev The event.\n\t */\n\tonvolumechange: (this: Document, ev: Event) => any;\n\t/**\n\t * Occurs when playback stops because the next frame of a video resource is not available.\n\t * @param ev The event.\n\t */\n\tonwaiting: (this: Document, ev: Event) => any;\n\tonwebkitfullscreenchange: (this: Document, ev: Event) => any;\n\tonwebkitfullscreenerror: (this: Document, ev: Event) => any;\n\tplugins: HTMLCollectionOf<HTMLEmbedElement>;\n\treadonly pointerLockElement: Element;\n\t/**\n\t * Retrieves a value that indicates the current state of the object.\n\t */\n\treadonly readyState: string;\n\t/**\n\t * Gets the URL of the location that referred the user to the current page.\n\t */\n\treadonly referrer: string;\n\t\n\t/**\n\t * Retrieves a collection of all script objects in the document.\n\t */\n\tscripts: HTMLCollectionOf<HTMLScriptElement>;\n\treadonly scrollingElement: Element | null;\n\t/**\n\t * Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.\n\t */\n\treadonly styleSheets: StyleSheetList;\n\t/**\n\t * Contains the title of the document.\n\t */\n\ttitle: string;\n\t/**\n\t * Sets or gets the URL for the current document.\n\t */\n\treadonly URL: string;\n\t/**\n\t * Gets the URL for the document, stripped of any character encoding.\n\t */\n\treadonly URLUnencoded: string;\n\treadonly visibilityState: VisibilityState;\n\t/**\n\t * Sets or gets the color of the links that the user has visited.\n\t */\n\tvlinkColor: string;\n\t\n\t\n\t\n\t\n\treadonly xmlEncoding: string | null;\n\txmlStandalone: boolean;\n\t/**\n\t * Gets or sets the version attribute specified in the declaration of an XML document.\n\t */\n\txmlVersion: string | null;\n\tadoptNode<T extends Node>(source: T): T;\n\tcaptureEvents(): void;\n\tcaretRangeFromPoint(x: number, y: number): Range;\n\tclear(): void;\n\t/**\n\t * Closes an output stream and forces the sent data to display.\n\t */\n\tclose(): void;\n\t/**\n\t * Creates an attribute object with a specified name.\n\t * @param name String that sets the attribute object\'s name.\n\t */\n\tcreateAttribute(name: string): Attr;\n\tcreateAttributeNS(namespaceURI: string | null, qualifiedName: string): Attr;\n\tcreateCDATASection(data: string): CDATASection;\n\t/**\n\t * Creates a comment object with the specified data.\n\t * @param data Sets the comment object\'s data.\n\t */\n\tcreateComment(data: string): Comment;\n\t/**\n\t * Creates a new document.\n\t */\n\tcreateDocumentFragment(): DocumentFragment;\n\t/**\n\t * Creates an instance of the element for the specified tag.\n\t * @param tagName The name of an element.\n\t */\n\tcreateElement<K extends keyof HTMLElementTagNameMap>(tagName: K): HTMLElementTagNameMap[K];\n\tcreateElement(tagName: string): HTMLElement;\n\tcreateElementNS(namespaceURI: "http://www.w3.org/1999/xhtml", qualifiedName: string): HTMLElement;\n\tcreateElementNS(namespaceURI: string | null, qualifiedName: string): Element;\n\tcreateExpression(expression: string, resolver: XPathNSResolver): XPathExpression;\n\t/**\n\t * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n\t * @param root The root element or node to start traversing on.\n\t * @param whatToShow The type of nodes or elements to appear in the node list\n\t * @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.\n\t * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\n\t */\n\tcreateNodeIterator(root: Node, whatToShow?: number, filter?: NodeFilter, entityReferenceExpansion?: boolean): NodeIterator;\n\tcreateNSResolver(nodeResolver: Node): XPathNSResolver;\n\tcreateProcessingInstruction(target: string, data: string): ProcessingInstruction;\n\t/**\n\t *  Returns an empty range object that has both of its boundary points positioned at the beginning of the document.\n\t */\n\tcreateRange(): Range;\n\t/**\n\t * Creates a text string from the specified value.\n\t * @param data String that specifies the nodeValue property of the text node.\n\t */\n\tcreateTextNode(data: string): Text;\n\tcreateTouch(view: Window, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number): Touch;\n\tcreateTouchList(...touches: Touch[]): TouchList;\n\t/**\n\t * Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.\n\t * @param root The root element or node to start traversing on.\n\t * @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.\n\t * @param filter A custom NodeFilter function to use.\n\t * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\n\t */\n\tcreateTreeWalker(root: Node, whatToShow?: number, filter?: NodeFilter, entityReferenceExpansion?: boolean): TreeWalker;\n\t/**\n\t * Returns the element for the specified x coordinate and the specified y coordinate.\n\t * @param x The x-offset\n\t * @param y The y-offset\n\t */\n\telementFromPoint(x: number, y: number): Element;\n\tevaluate(expression: string, contextNode: Node, resolver: XPathNSResolver | null, type: number, result: XPathResult | null): XPathResult;\n\t/**\n\t * Executes a command on the current document, current selection, or the given range.\n\t * @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.\n\t * @param showUI Display the user interface, defaults to false.\n\t * @param value Value to assign.\n\t */\n\texecCommand(commandId: string, showUI?: boolean, value?: any): boolean;\n\t/**\n\t * Displays help information for the given command identifier.\n\t * @param commandId Displays help information for the given command identifier.\n\t */\n\texecCommandShowHelp(commandId: string): boolean;\n\texitFullscreen(): void;\n\texitPointerLock(): void;\n\t/**\n\t * Causes the element to receive the focus and executes the code specified by the onfocus event.\n\t */\n\tfocus(): void;\n\t/**\n\t * Returns a reference to the first object with the specified value of the ID or NAME attribute.\n\t * @param elementId String that specifies the ID value. Case-insensitive.\n\t */\n\tgetElementById(elementId: string): HTMLElement | null;\n\tgetElementsByClassName(classNames: string): HTMLCollectionOf<Element>;\n\t/**\n\t * Gets a collection of objects based on the value of the NAME or ID attribute.\n\t * @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.\n\t */\n\tgetElementsByName(elementName: string): NodeListOf<HTMLElement>;\n\t/**\n\t * Retrieves a collection of objects based on the specified element name.\n\t * @param name Specifies the name of an element.\n\t */\n\tgetElementsByTagName<K extends keyof ElementListTagNameMap>(tagname: K): ElementListTagNameMap[K];\n\tgetElementsByTagName(tagname: string): NodeListOf<Element>;\n\tgetElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;\n\tgetElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<HTMLElement>;\n\tgetElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>;\n\t/**\n\t * Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.\n\t */\n\tgetSelection(): Selection;\n\t/**\n\t * Gets a value indicating whether the object currently has focus.\n\t */\n\thasFocus(): boolean;\n\timportNode<T extends Node>(importedNode: T, deep: boolean): T;\n\t/**\n\t * Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.\n\t * @param url Specifies a MIME type for the document.\n\t * @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.\n\t * @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, "fullscreen=yes, toolbar=yes"). The following values are supported.\n\t * @param replace Specifies whether the existing entry for the document is replaced in the history list.\n\t */\n\topen(url?: string, name?: string, features?: string, replace?: boolean): Document;\n\t/**\n\t * Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.\n\t * @param commandId Specifies a command identifier.\n\t */\n\tqueryCommandEnabled(commandId: string): boolean;\n\t/**\n\t * Returns a Boolean value that indicates whether the specified command is in the indeterminate state.\n\t * @param commandId String that specifies a command identifier.\n\t */\n\tqueryCommandIndeterm(commandId: string): boolean;\n\t/**\n\t * Returns a Boolean value that indicates the current state of the command.\n\t * @param commandId String that specifies a command identifier.\n\t */\n\tqueryCommandState(commandId: string): boolean;\n\t/**\n\t * Returns a Boolean value that indicates whether the current command is supported on the current range.\n\t * @param commandId Specifies a command identifier.\n\t */\n\tqueryCommandSupported(commandId: string): boolean;\n\t/**\n\t * Retrieves the string associated with a command.\n\t * @param commandId String that contains the identifier of a command. This can be any command identifier given in the list of Command Identifiers.\n\t */\n\tqueryCommandText(commandId: string): string;\n\t/**\n\t * Returns the current value of the document, range, or current selection for the given command.\n\t * @param commandId String that specifies a command identifier.\n\t */\n\tqueryCommandValue(commandId: string): string;\n\treleaseEvents(): void;\n\t/**\n\t * Allows updating the print settings for the page.\n\t */\n\tupdateSettings(): void;\n\t/**\n\t * Writes one or more HTML expressions to a document in the specified window.\n\t * @param content Specifies the text and HTML tags to write.\n\t */\n\twrite(...content: string[]): void;\n\t/**\n\t * Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.\n\t * @param content The text and HTML tags to write.\n\t */\n\twriteln(...content: string[]): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var Document: {\n\tprototype: Document;\n\tnew(): Document;\n};\n\ninterface DocumentFragment extends Node, NodeSelector, ParentNode {\n\tgetElementById(elementId: string): HTMLElement | null;\n}\n\ndeclare var DocumentFragment: {\n\tprototype: DocumentFragment;\n\tnew(): DocumentFragment;\n};\n\ninterface DocumentType extends Node, ChildNode {\n\treadonly entities: NamedNodeMap;\n\treadonly internalSubset: string | null;\n\treadonly name: string;\n\treadonly notations: NamedNodeMap;\n\treadonly publicId: string;\n\treadonly systemId: string;\n}\n\ndeclare var DocumentType: {\n\tprototype: DocumentType;\n\tnew(): DocumentType;\n};\n\ninterface DOMError {\n\treadonly name: string;\n\ttoString(): string;\n}\n\ndeclare var DOMError: {\n\tprototype: DOMError;\n\tnew(): DOMError;\n};\n\ninterface DOMException {\n\treadonly code: number;\n\treadonly message: string;\n\treadonly name: string;\n\ttoString(): string;\n\treadonly ABORT_ERR: number;\n\treadonly DATA_CLONE_ERR: number;\n\treadonly DOMSTRING_SIZE_ERR: number;\n\treadonly HIERARCHY_REQUEST_ERR: number;\n\treadonly INDEX_SIZE_ERR: number;\n\treadonly INUSE_ATTRIBUTE_ERR: number;\n\treadonly INVALID_ACCESS_ERR: number;\n\treadonly INVALID_CHARACTER_ERR: number;\n\treadonly INVALID_MODIFICATION_ERR: number;\n\treadonly INVALID_NODE_TYPE_ERR: number;\n\treadonly INVALID_STATE_ERR: number;\n\treadonly NAMESPACE_ERR: number;\n\treadonly NETWORK_ERR: number;\n\treadonly NO_DATA_ALLOWED_ERR: number;\n\treadonly NO_MODIFICATION_ALLOWED_ERR: number;\n\treadonly NOT_FOUND_ERR: number;\n\treadonly NOT_SUPPORTED_ERR: number;\n\treadonly PARSE_ERR: number;\n\treadonly QUOTA_EXCEEDED_ERR: number;\n\treadonly SECURITY_ERR: number;\n\treadonly SERIALIZE_ERR: number;\n\treadonly SYNTAX_ERR: number;\n\treadonly TIMEOUT_ERR: number;\n\treadonly TYPE_MISMATCH_ERR: number;\n\treadonly URL_MISMATCH_ERR: number;\n\treadonly VALIDATION_ERR: number;\n\treadonly WRONG_DOCUMENT_ERR: number;\n}\n\ndeclare var DOMException: {\n\tprototype: DOMException;\n\tnew(): DOMException;\n\treadonly ABORT_ERR: number;\n\treadonly DATA_CLONE_ERR: number;\n\treadonly DOMSTRING_SIZE_ERR: number;\n\treadonly HIERARCHY_REQUEST_ERR: number;\n\treadonly INDEX_SIZE_ERR: number;\n\treadonly INUSE_ATTRIBUTE_ERR: number;\n\treadonly INVALID_ACCESS_ERR: number;\n\treadonly INVALID_CHARACTER_ERR: number;\n\treadonly INVALID_MODIFICATION_ERR: number;\n\treadonly INVALID_NODE_TYPE_ERR: number;\n\treadonly INVALID_STATE_ERR: number;\n\treadonly NAMESPACE_ERR: number;\n\treadonly NETWORK_ERR: number;\n\treadonly NO_DATA_ALLOWED_ERR: number;\n\treadonly NO_MODIFICATION_ALLOWED_ERR: number;\n\treadonly NOT_FOUND_ERR: number;\n\treadonly NOT_SUPPORTED_ERR: number;\n\treadonly PARSE_ERR: number;\n\treadonly QUOTA_EXCEEDED_ERR: number;\n\treadonly SECURITY_ERR: number;\n\treadonly SERIALIZE_ERR: number;\n\treadonly SYNTAX_ERR: number;\n\treadonly TIMEOUT_ERR: number;\n\treadonly TYPE_MISMATCH_ERR: number;\n\treadonly URL_MISMATCH_ERR: number;\n\treadonly VALIDATION_ERR: number;\n\treadonly WRONG_DOCUMENT_ERR: number;\n};\n\ninterface DOMImplementation {\n\tcreateDocument(namespaceURI: string | null, qualifiedName: string | null, doctype: DocumentType | null): Document;\n\tcreateDocumentType(qualifiedName: string, publicId: string, systemId: string): DocumentType;\n\tcreateHTMLDocument(title: string): Document;\n\thasFeature(feature: string | null, version: string | null): boolean;\n}\n\ndeclare var DOMImplementation: {\n\tprototype: DOMImplementation;\n\tnew(): DOMImplementation;\n};\n\ninterface DOMParser {\n\tparseFromString(source: string, mimeType: string): Document;\n}\n\ndeclare var DOMParser: {\n\tprototype: DOMParser;\n\tnew(): DOMParser;\n};\n\ninterface DOMSettableTokenList extends DOMTokenList {\n\tvalue: string;\n}\n\ndeclare var DOMSettableTokenList: {\n\tprototype: DOMSettableTokenList;\n\tnew(): DOMSettableTokenList;\n};\n\ninterface DOMStringList {\n\treadonly length: number;\n\tcontains(str: string): boolean;\n\titem(index: number): string | null;\n\t[index: number]: string;\n}\n\ndeclare var DOMStringList: {\n\tprototype: DOMStringList;\n\tnew(): DOMStringList;\n};\n\ninterface DOMStringMap {\n\t[name: string]: string | undefined;\n}\n\ndeclare var DOMStringMap: {\n\tprototype: DOMStringMap;\n\tnew(): DOMStringMap;\n};\n\ninterface DOMTokenList {\n\treadonly length: number;\n\tadd(...token: string[]): void;\n\tcontains(token: string): boolean;\n\titem(index: number): string;\n\tremove(...token: string[]): void;\n\ttoggle(token: string, force?: boolean): boolean;\n\ttoString(): string;\n\t[index: number]: string;\n}\n\ndeclare var DOMTokenList: {\n\tprototype: DOMTokenList;\n\tnew(): DOMTokenList;\n};\n\ninterface DragEvent extends MouseEvent {\n\treadonly dataTransfer: DataTransfer;\n\tinitDragEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, dataTransferArg: DataTransfer): void;\n}\n\ndeclare var DragEvent: {\n\tprototype: DragEvent;\n\tnew(type: "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop", dragEventInit?: { dataTransfer?: DataTransfer }): DragEvent;\n};\n\ninterface ElementEventMap extends GlobalEventHandlersEventMap {\n\t"ariarequest": Event;\n\t"command": Event;\n\t"gotpointercapture": PointerEvent;\n\t"lostpointercapture": PointerEvent;\n\t"touchcancel": TouchEvent;\n\t"touchend": TouchEvent;\n\t"touchmove": TouchEvent;\n\t"touchstart": TouchEvent;\n\t"webkitfullscreenchange": Event;\n\t"webkitfullscreenerror": Event;\n}\n\ninterface Element extends Node, GlobalEventHandlers, ElementTraversal, NodeSelector, ChildNode, ParentNode {\n\treadonly classList: DOMTokenList;\n\tclassName: string;\n\treadonly clientHeight: number;\n\treadonly clientLeft: number;\n\treadonly clientTop: number;\n\treadonly clientWidth: number;\n\tid: string;\n\tinnerHTML: string;\n\t\n\tonariarequest: (this: Element, ev: Event) => any;\n\toncommand: (this: Element, ev: Event) => any;\n\tongotpointercapture: (this: Element, ev: PointerEvent) => any;\n\tonlostpointercapture: (this: Element, ev: PointerEvent) => any;\n\tontouchcancel: (ev: TouchEvent) => any;\n\tontouchend: (ev: TouchEvent) => any;\n\tontouchmove: (ev: TouchEvent) => any;\n\tontouchstart: (ev: TouchEvent) => any;\n\tonwebkitfullscreenchange: (this: Element, ev: Event) => any;\n\tonwebkitfullscreenerror: (this: Element, ev: Event) => any;\n\touterHTML: string;\n\treadonly prefix: string | null;\n\treadonly scrollHeight: number;\n\tscrollLeft: number;\n\tscrollTop: number;\n\treadonly scrollWidth: number;\n\treadonly tagName: string;\n\treadonly assignedSlot: HTMLSlotElement | null;\n\tslot: string;\n\treadonly shadowRoot: ShadowRoot | null;\n\tgetAttribute(name: string): string | null;\n\tgetAttributeNode(name: string): Attr;\n\tgetAttributeNodeNS(namespaceURI: string, localName: string): Attr;\n\tgetAttributeNS(namespaceURI: string, localName: string): string;\n\tgetBoundingClientRect(): ClientRect;\n\tgetClientRects(): ClientRectList;\n\tgetElementsByTagName<K extends keyof ElementListTagNameMap>(name: K): ElementListTagNameMap[K];\n\tgetElementsByTagName(name: string): NodeListOf<Element>;\n\tgetElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;\n\tgetElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<HTMLElement>;\n\tgetElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>;\n\thasAttribute(name: string): boolean;\n\thasAttributeNS(namespaceURI: string, localName: string): boolean;\n\treleasePointerCapture(pointerId: number): void;\n\tremoveAttribute(qualifiedName: string): void;\n\tremoveAttributeNode(oldAttr: Attr): Attr;\n\tremoveAttributeNS(namespaceURI: string, localName: string): void;\n\trequestFullscreen(): void;\n\trequestPointerLock(): void;\n\tsetAttribute(name: string, value: string): void;\n\tsetAttributeNode(newAttr: Attr): Attr;\n\tsetAttributeNodeNS(newAttr: Attr): Attr;\n\tsetAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;\n\tsetPointerCapture(pointerId: number): void;\n\tgetElementsByClassName(classNames: string): NodeListOf<Element>;\n\tmatches(selector: string): boolean;\n\tclosest(selector: string): Element | null;\n\tscrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;\n\tscroll(options?: ScrollToOptions): void;\n\tscroll(x: number, y: number): void;\n\tscrollTo(options?: ScrollToOptions): void;\n\tscrollTo(x: number, y: number): void;\n\tscrollBy(options?: ScrollToOptions): void;\n\tscrollBy(x: number, y: number): void;\n\tinsertAdjacentElement(position: InsertPosition, insertedElement: Element): Element | null;\n\tinsertAdjacentHTML(where: InsertPosition, html: string): void;\n\tinsertAdjacentText(where: InsertPosition, text: string): void;\n\tattachShadow(shadowRootInitDict: ShadowRootInit): ShadowRoot;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var Element: {\n\tprototype: Element;\n\tnew(): Element;\n};\n\ninterface ErrorEvent extends Event {\n\treadonly colno: number;\n\treadonly error: any;\n\treadonly filename: string;\n\treadonly lineno: number;\n\treadonly message: string;\n\tinitErrorEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, messageArg: string, filenameArg: string, linenoArg: number): void;\n}\n\ndeclare var ErrorEvent: {\n\tprototype: ErrorEvent;\n\tnew(type: string, errorEventInitDict?: ErrorEventInit): ErrorEvent;\n};\n\ninterface Event {\n\treadonly bubbles: boolean;\n\treadonly cancelable: boolean;\n\tcancelBubble: boolean;\n\treadonly currentTarget: EventTarget;\n\treadonly defaultPrevented: boolean;\n\treadonly eventPhase: number;\n\treadonly isTrusted: boolean;\n\treturnValue: boolean;\n\treadonly srcElement: Element | null;\n\treadonly target: EventTarget;\n\treadonly timeStamp: number;\n\treadonly type: string;\n\treadonly scoped: boolean;\n\tinitEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void;\n\tpreventDefault(): void;\n\tstopImmediatePropagation(): void;\n\tstopPropagation(): void;\n\tdeepPath(): EventTarget[];\n\treadonly AT_TARGET: number;\n\treadonly BUBBLING_PHASE: number;\n\treadonly CAPTURING_PHASE: number;\n}\n\ndeclare var Event: {\n\tprototype: Event;\n\tnew(typeArg: string, eventInitDict?: EventInit): Event;\n\treadonly AT_TARGET: number;\n\treadonly BUBBLING_PHASE: number;\n\treadonly CAPTURING_PHASE: number;\n};\n\ninterface EventTarget {\n\taddEventListener(type: string, listener?: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n\tdispatchEvent(evt: Event): boolean;\n\tremoveEventListener(type: string, listener?: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\ndeclare var EventTarget: {\n\tprototype: EventTarget;\n\tnew(): EventTarget;\n};\n\ninterface File extends Blob {\n\treadonly lastModifiedDate: any;\n\treadonly name: string;\n\t\n}\n\ndeclare var File: {\n\tprototype: File;\n\tnew (parts: (ArrayBuffer | ArrayBufferView | Blob | string)[], filename: string, properties?: FilePropertyBag): File;\n};\n\ninterface FileList {\n\treadonly length: number;\n\titem(index: number): File;\n\t[index: number]: File;\n}\n\ndeclare var FileList: {\n\tprototype: FileList;\n\tnew(): FileList;\n};\n\ninterface FileReader extends EventTarget {\n\treadonly error: DOMError;\n\treadAsArrayBuffer(blob: Blob): void;\n\treadAsBinaryString(blob: Blob): void;\n\treadAsDataURL(blob: Blob): void;\n\treadAsText(blob: Blob, encoding?: string): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var FileReader: {\n\tprototype: FileReader;\n\tnew(): FileReader;\n};\n\ninterface FocusEvent extends UIEvent {\n\treadonly relatedTarget: EventTarget;\n\tinitFocusEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, relatedTargetArg: EventTarget): void;\n}\n\ndeclare var FocusEvent: {\n\tprototype: FocusEvent;\n\tnew(typeArg: string, eventInitDict?: FocusEventInit): FocusEvent;\n};\n\ninterface FocusNavigationEvent extends Event {\n\treadonly navigationReason: NavigationReason;\n\treadonly originHeight: number;\n\treadonly originLeft: number;\n\treadonly originTop: number;\n\treadonly originWidth: number;\n\trequestFocus(): void;\n}\n\ndeclare var FocusNavigationEvent: {\n\tprototype: FocusNavigationEvent;\n\tnew(type: string, eventInitDict?: FocusNavigationEventInit): FocusNavigationEvent;\n};\n\ninterface FormData {\n\tappend(name: string, value: string | Blob, fileName?: string): void;\n\tdelete(name: string): void;\n\tget(name: string): FormDataEntryValue | null;\n\tgetAll(name: string): FormDataEntryValue[];\n\thas(name: string): boolean;\n\tset(name: string, value: string | Blob, fileName?: string): void;\n}\n\ndeclare var FormData: {\n\tprototype: FormData;\n\tnew (form?: HTMLFormElement): FormData;\n};\n\ninterface Gamepad {\n\treadonly axes: number[];\n\treadonly buttons: GamepadButton[];\n\treadonly connected: boolean;\n\treadonly id: string;\n\treadonly index: number;\n\treadonly mapping: string;\n\treadonly timestamp: number;\n}\n\ndeclare var Gamepad: {\n\tprototype: Gamepad;\n\tnew(): Gamepad;\n};\n\ninterface GamepadButton {\n\treadonly pressed: boolean;\n\treadonly value: number;\n}\n\ndeclare var GamepadButton: {\n\tprototype: GamepadButton;\n\tnew(): GamepadButton;\n};\n\ninterface GamepadEvent extends Event {\n\treadonly gamepad: Gamepad;\n}\n\ndeclare var GamepadEvent: {\n\tprototype: GamepadEvent;\n\tnew(typeArg: string, eventInitDict?: GamepadEventInit): GamepadEvent;\n};\n\ninterface Geolocation {\n\tclearWatch(watchId: number): void;\n\tgetCurrentPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): void;\n\twatchPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): number;\n}\n\ndeclare var Geolocation: {\n\tprototype: Geolocation;\n\tnew(): Geolocation;\n};\n\ninterface HashChangeEvent extends Event {\n\treadonly newURL: string | null;\n\treadonly oldURL: string | null;\n}\n\ndeclare var HashChangeEvent: {\n\tprototype: HashChangeEvent;\n\tnew(typeArg: string, eventInitDict?: HashChangeEventInit): HashChangeEvent;\n};\n\ninterface Headers {\n\tappend(name: string, value: string): void;\n\tdelete(name: string): void;\n\tforEach(callback: ForEachCallback): void;\n\tget(name: string): string | null;\n\thas(name: string): boolean;\n\tset(name: string, value: string): void;\n}\n\ndeclare var Headers: {\n\tprototype: Headers;\n\tnew(init?: any): Headers;\n};\n\ninterface History {\n\treadonly length: number;\n\treadonly state: any;\n\tscrollRestoration: ScrollRestoration;\n\tback(): void;\n\tforward(): void;\n\tgo(delta?: number): void;\n\tpushState(data: any, title: string, url?: string | null): void;\n\treplaceState(data: any, title: string, url?: string | null): void;\n}\n\ndeclare var History: {\n\tprototype: History;\n\tnew(): History;\n};\n\ninterface HTMLAllCollection {\n\treadonly length: number;\n\titem(nameOrIndex?: string): HTMLCollection | Element | null;\n\tnamedItem(name: string): HTMLCollection | Element | null;\n\t[index: number]: Element;\n}\n\ndeclare var HTMLAllCollection: {\n\tprototype: HTMLAllCollection;\n\tnew(): HTMLAllCollection;\n};\n\ninterface HTMLAnchorElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves the character set used to encode the object.\n\t */\n\tcharset: string;\n\t/**\n\t * Sets or retrieves the coordinates of the object.\n\t */\n\tcoords: string;\n\tdownload: string;\n\t/**\n\t * Contains the anchor portion of the URL including the hash sign (#).\n\t */\n\thash: string;\n\t/**\n\t * Contains the hostname and port values of the URL.\n\t */\n\thost: string;\n\t/**\n\t * Contains the hostname of a URL.\n\t */\n\thostname: string;\n\t/**\n\t * Sets or retrieves a destination URL or an anchor point.\n\t */\n\thref: string;\n\t/**\n\t * Sets or retrieves the language code of the object.\n\t */\n\threflang: string;\n\tMethods: string;\n\treadonly mimeType: string;\n\t/**\n\t * Sets or retrieves the shape of the object.\n\t */\n\tname: string;\n\treadonly nameProp: string;\n\t/**\n\t * Contains the pathname of the URL.\n\t */\n\tpathname: string;\n\t/**\n\t * Sets or retrieves the port number associated with a URL.\n\t */\n\tport: string;\n\t/**\n\t * Contains the protocol of the URL.\n\t */\n\tprotocol: string;\n\treadonly protocolLong: string;\n\t/**\n\t * Sets or retrieves the relationship between the object and the destination of the link.\n\t */\n\trel: string;\n\t/**\n\t * Sets or retrieves the relationship between the object and the destination of the link.\n\t */\n\trev: string;\n\t/**\n\t * Sets or retrieves the substring of the href property that follows the question mark.\n\t */\n\tsearch: string;\n\t/**\n\t * Sets or retrieves the shape of the object.\n\t */\n\tshape: string;\n\t/**\n\t * Sets or retrieves the window or frame at which to target content.\n\t */\n\ttarget: string;\n\t/**\n\t * Retrieves or sets the text of the object as a string.\n\t */\n\ttext: string;\n\ttype: string;\n\turn: string;\n\t/**\n\t * Returns a string representation of an object.\n\t */\n\ttoString(): string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLAnchorElement: {\n\tprototype: HTMLAnchorElement;\n\tnew(): HTMLAnchorElement;\n};\n\ninterface HTMLAppletElement extends HTMLElement {\n\talign: string;\n\t/**\n\t * Sets or retrieves a text alternative to the graphic.\n\t */\n\talt: string;\n\t/**\n\t * Gets or sets the optional alternative HTML script to execute if the object fails to load.\n\t */\n\taltHtml: string;\n\t/**\n\t * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\n\t */\n\tarchive: string;\n\t/**\n\t * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.\n\t */\n\treadonly BaseHref: string;\n\tborder: string;\n\tcode: string;\n\t/**\n\t * Sets or retrieves the URL of the component.\n\t */\n\tcodeBase: string;\n\t/**\n\t * Sets or retrieves the Internet media type for the code associated with the object.\n\t */\n\tcodeType: string;\n\t/**\n\t * Address of a pointer to the document this page or frame contains. If there is no document, then null will be returned.\n\t */\n\treadonly contentDocument: Document;\n\t/**\n\t * Sets or retrieves the URL that references the data of the object.\n\t */\n\tdata: string;\n\t/**\n\t * Sets or retrieves a character string that can be used to implement your own declare functionality for the object.\n\t */\n\tdeclare: boolean;\n\treadonly form: HTMLFormElement;\n\t/**\n\t * Sets or retrieves the height of the object.\n\t */\n\theight: string;\n\thspace: number;\n\t/**\n\t * Sets or retrieves the shape of the object.\n\t */\n\tname: string;\n\tobject: string | null;\n\t/**\n\t * Sets or retrieves a message to be displayed while an object is loading.\n\t */\n\tstandby: string;\n\t/**\n\t * Returns the content type of the object.\n\t */\n\ttype: string;\n\t/**\n\t * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n\t */\n\tuseMap: string;\n\tvspace: number;\n\twidth: number;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLAppletElement: {\n\tprototype: HTMLAppletElement;\n\tnew(): HTMLAppletElement;\n};\n\ninterface HTMLAreaElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves a text alternative to the graphic.\n\t */\n\talt: string;\n\t/**\n\t * Sets or retrieves the coordinates of the object.\n\t */\n\tcoords: string;\n\tdownload: string;\n\t/**\n\t * Sets or retrieves the subsection of the href property that follows the number sign (#).\n\t */\n\thash: string;\n\t/**\n\t * Sets or retrieves the hostname and port number of the location or URL.\n\t */\n\thost: string;\n\t/**\n\t * Sets or retrieves the host name part of the location or URL.\n\t */\n\thostname: string;\n\t/**\n\t * Sets or retrieves a destination URL or an anchor point.\n\t */\n\thref: string;\n\t/**\n\t * Sets or gets whether clicks in this region cause action.\n\t */\n\tnoHref: boolean;\n\t/**\n\t * Sets or retrieves the file name or path specified by the object.\n\t */\n\tpathname: string;\n\t/**\n\t * Sets or retrieves the port number associated with a URL.\n\t */\n\tport: string;\n\t/**\n\t * Sets or retrieves the protocol portion of a URL.\n\t */\n\tprotocol: string;\n\trel: string;\n\t/**\n\t * Sets or retrieves the substring of the href property that follows the question mark.\n\t */\n\tsearch: string;\n\t/**\n\t * Sets or retrieves the shape of the object.\n\t */\n\tshape: string;\n\t/**\n\t * Sets or retrieves the window or frame at which to target content.\n\t */\n\ttarget: string;\n\t/**\n\t * Returns a string representation of an object.\n\t */\n\ttoString(): string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLAreaElement: {\n\tprototype: HTMLAreaElement;\n\tnew(): HTMLAreaElement;\n};\n\ninterface HTMLAreasCollection extends HTMLCollectionBase {\n}\n\ndeclare var HTMLAreasCollection: {\n\tprototype: HTMLAreasCollection;\n\tnew(): HTMLAreasCollection;\n};\n\ninterface HTMLBaseElement extends HTMLElement {\n\t/**\n\t * Gets or sets the baseline URL on which relative links are based.\n\t */\n\thref: string;\n\t/**\n\t * Sets or retrieves the window or frame at which to target content.\n\t */\n\ttarget: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLBaseElement: {\n\tprototype: HTMLBaseElement;\n\tnew(): HTMLBaseElement;\n};\n\ninterface HTMLBaseFontElement extends HTMLElement, DOML2DeprecatedColorProperty {\n\t/**\n\t * Sets or retrieves the current typeface family.\n\t */\n\tface: string;\n\t/**\n\t * Sets or retrieves the font size of the object.\n\t */\n\tsize: number;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLBaseFontElement: {\n\tprototype: HTMLBaseFontElement;\n\tnew(): HTMLBaseFontElement;\n};\n\ninterface HTMLBodyElementEventMap extends HTMLElementEventMap {\n\t"afterprint": Event;\n\t"beforeprint": Event;\n\t"beforeunload": BeforeUnloadEvent;\n\t"blur": FocusEvent;\n\t"error": ErrorEvent;\n\t"focus": FocusEvent;\n\t"hashchange": HashChangeEvent;\n\t"load": Event;\n\t"message": MessageEvent;\n\t"offline": Event;\n\t"online": Event;\n\t"orientationchange": Event;\n\t"pagehide": PageTransitionEvent;\n\t"pageshow": PageTransitionEvent;\n\t"popstate": PopStateEvent;\n\t"resize": UIEvent;\n\t"scroll": UIEvent;\n\t"storage": StorageEvent;\n\t"unload": Event;\n}\n\ninterface HTMLBodyElement extends HTMLElement {\n\taLink: any;\n\tbackground: string;\n\tbgColor: any;\n\tbgProperties: string;\n\tlink: any;\n\tnoWrap: boolean;\n\tonafterprint: (this: HTMLBodyElement, ev: Event) => any;\n\tonbeforeprint: (this: HTMLBodyElement, ev: Event) => any;\n\tonbeforeunload: (this: HTMLBodyElement, ev: BeforeUnloadEvent) => any;\n\tonblur: (this: HTMLBodyElement, ev: FocusEvent) => any;\n\tonerror: (this: HTMLBodyElement, ev: ErrorEvent) => any;\n\tonfocus: (this: HTMLBodyElement, ev: FocusEvent) => any;\n\tonhashchange: (this: HTMLBodyElement, ev: HashChangeEvent) => any;\n\tonload: (this: HTMLBodyElement, ev: Event) => any;\n\tonmessage: (this: HTMLBodyElement, ev: MessageEvent) => any;\n\tonoffline: (this: HTMLBodyElement, ev: Event) => any;\n\tononline: (this: HTMLBodyElement, ev: Event) => any;\n\tonorientationchange: (this: HTMLBodyElement, ev: Event) => any;\n\tonpagehide: (this: HTMLBodyElement, ev: PageTransitionEvent) => any;\n\tonpageshow: (this: HTMLBodyElement, ev: PageTransitionEvent) => any;\n\tonpopstate: (this: HTMLBodyElement, ev: PopStateEvent) => any;\n\tonresize: (this: HTMLBodyElement, ev: UIEvent) => any;\n\tonscroll: (this: HTMLBodyElement, ev: UIEvent) => any;\n\tonstorage: (this: HTMLBodyElement, ev: StorageEvent) => any;\n\tonunload: (this: HTMLBodyElement, ev: Event) => any;\n\ttext: any;\n\tvLink: any;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLBodyElement: {\n\tprototype: HTMLBodyElement;\n\tnew(): HTMLBodyElement;\n};\n\ninterface HTMLBRElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.\n\t */\n\tclear: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLBRElement: {\n\tprototype: HTMLBRElement;\n\tnew(): HTMLBRElement;\n};\n\ninterface HTMLButtonElement extends HTMLElement {\n\t/**\n\t * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\n\t */\n\tautofocus: boolean;\n\tdisabled: boolean;\n\t/**\n\t * Retrieves a reference to the form that the object is embedded in.\n\t */\n\treadonly form: HTMLFormElement;\n\t/**\n\t * Overrides the action attribute (where the data on a form is sent) on the parent form element.\n\t */\n\tformAction: string;\n\t/**\n\t * Used to override the encoding (formEnctype attribute) specified on the form element.\n\t */\n\tformEnctype: string;\n\t/**\n\t * Overrides the submit method attribute previously specified on a form element.\n\t */\n\tformMethod: string;\n\t/**\n\t * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.\n\t */\n\tformNoValidate: string;\n\t/**\n\t * Overrides the target attribute on a form element.\n\t */\n\tformTarget: string;\n\t/**\n\t * Sets or retrieves the name of the object.\n\t */\n\tname: string;\n\tstatus: any;\n\t/**\n\t * Gets the classification and default behavior of the button.\n\t */\n\ttype: string;\n\t/**\n\t * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.\n\t */\n\treadonly validationMessage: string;\n\t/**\n\t * Returns a  ValidityState object that represents the validity states of an element.\n\t */\n\treadonly validity: ValidityState;\n\t/**\n\t * Sets or retrieves the default or selected value of the control.\n\t */\n\tvalue: string;\n\t/**\n\t * Returns whether an element will successfully validate based on forms validation rules and constraints.\n\t */\n\treadonly willValidate: boolean;\n\t/**\n\t * Returns whether a form will validate when it is submitted, without having to submit it.\n\t */\n\tcheckValidity(): boolean;\n\t/**\n\t * Sets a custom error message that is displayed when a form is submitted.\n\t * @param error Sets a custom error message that is displayed when a form is submitted.\n\t */\n\tsetCustomValidity(error: string): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLButtonElement: {\n\tprototype: HTMLButtonElement;\n\tnew(): HTMLButtonElement;\n};\n\ninterface HTMLCanvasElement extends HTMLElement {\n\t/**\n\t * Gets or sets the height of a canvas element on a document.\n\t */\n\theight: number;\n\t/**\n\t * Gets or sets the width of a canvas element on a document.\n\t */\n\twidth: number;\n\t/**\n\t * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.\n\t * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext("2d"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext("experimental-webgl");\n\t */\n\tgetContext(contextId: "2d", contextAttributes?: Canvas2DContextAttributes): CanvasRenderingContext2D | null;\n\tgetContext(contextId: string, contextAttributes?: {}): CanvasRenderingContext2D  | null;\n\t\n\t/**\n\t * Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.\n\t * @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.\n\t */\n\ttoDataURL(type?: string, ...args: any[]): string;\n\ttoBlob(callback: (result: Blob | null) => void, type?: string, ...arguments: any[]): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLCanvasElement: {\n\tprototype: HTMLCanvasElement;\n\tnew(): HTMLCanvasElement;\n};\n\ninterface HTMLCollectionBase {\n\t/**\n\t * Sets or retrieves the number of objects in a collection.\n\t */\n\treadonly length: number;\n\t/**\n\t * Retrieves an object from various collections.\n\t */\n\titem(index: number): Element;\n\t[index: number]: Element;\n}\n\ninterface HTMLCollection extends HTMLCollectionBase {\n\t/**\n\t * Retrieves a select object or an object from an options collection.\n\t */\n\tnamedItem(name: string): Element | null;\n}\n\ndeclare var HTMLCollection: {\n\tprototype: HTMLCollection;\n\tnew(): HTMLCollection;\n};\n\ninterface HTMLDataElement extends HTMLElement {\n\tvalue: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLDataElement: {\n\tprototype: HTMLDataElement;\n\tnew(): HTMLDataElement;\n};\n\ninterface HTMLDataListElement extends HTMLElement {\n\toptions: HTMLCollectionOf<HTMLOptionElement>;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLDataListElement: {\n\tprototype: HTMLDataListElement;\n\tnew(): HTMLDataListElement;\n};\n\ninterface HTMLDirectoryElement extends HTMLElement {\n\tcompact: boolean;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLDirectoryElement: {\n\tprototype: HTMLDirectoryElement;\n\tnew(): HTMLDirectoryElement;\n};\n\ninterface HTMLDivElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves how the object is aligned with adjacent text.\n\t */\n\talign: string;\n\t/**\n\t * Sets or retrieves whether the browser automatically performs wordwrap.\n\t */\n\tnoWrap: boolean;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLDivElement: {\n\tprototype: HTMLDivElement;\n\tnew(): HTMLDivElement;\n};\n\ninterface HTMLDListElement extends HTMLElement {\n\tcompact: boolean;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLDListElement: {\n\tprototype: HTMLDListElement;\n\tnew(): HTMLDListElement;\n};\n\ninterface HTMLDocument extends Document {\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLDocument: {\n\tprototype: HTMLDocument;\n\tnew(): HTMLDocument;\n};\n\ninterface HTMLElementEventMap extends ElementEventMap {\n\t"abort": UIEvent;\n\t"activate": UIEvent;\n\t"beforeactivate": UIEvent;\n\t"beforecopy": ClipboardEvent;\n\t"beforecut": ClipboardEvent;\n\t"beforedeactivate": UIEvent;\n\t"beforepaste": ClipboardEvent;\n\t"blur": FocusEvent;\n\t"canplay": Event;\n\t"canplaythrough": Event;\n\t"change": Event;\n\t"click": MouseEvent;\n\t"contextmenu": PointerEvent;\n\t"copy": ClipboardEvent;\n\t"cuechange": Event;\n\t"cut": ClipboardEvent;\n\t"dblclick": MouseEvent;\n\t"deactivate": UIEvent;\n\t"drag": DragEvent;\n\t"dragend": DragEvent;\n\t"dragenter": DragEvent;\n\t"dragleave": DragEvent;\n\t"dragover": DragEvent;\n\t"dragstart": DragEvent;\n\t"drop": DragEvent;\n\t"durationchange": Event;\n\t"emptied": Event;\n\t"error": ErrorEvent;\n\t"focus": FocusEvent;\n\t"input": Event;\n\t"invalid": Event;\n\t"keydown": KeyboardEvent;\n\t"keypress": KeyboardEvent;\n\t"keyup": KeyboardEvent;\n\t"load": Event;\n\t"loadeddata": Event;\n\t"loadedmetadata": Event;\n\t"loadstart": Event;\n\t"mousedown": MouseEvent;\n\t"mouseenter": MouseEvent;\n\t"mouseleave": MouseEvent;\n\t"mousemove": MouseEvent;\n\t"mouseout": MouseEvent;\n\t"mouseover": MouseEvent;\n\t"mouseup": MouseEvent;\n\t"mousewheel": WheelEvent;\n\t"paste": ClipboardEvent;\n\t"pause": Event;\n\t"play": Event;\n\t"playing": Event;\n\t"progress": ProgressEvent;\n\t"ratechange": Event;\n\t"reset": Event;\n\t"scroll": UIEvent;\n\t"seeked": Event;\n\t"seeking": Event;\n\t"select": UIEvent;\n\t"selectstart": Event;\n\t"stalled": Event;\n\t"submit": Event;\n\t"suspend": Event;\n\t"timeupdate": Event;\n\t"volumechange": Event;\n\t"waiting": Event;\n}\n\ninterface HTMLElement extends Element {\n\taccessKey: string;\n\treadonly children: HTMLCollection;\n\tcontentEditable: string;\n\treadonly dataset: DOMStringMap;\n\tdir: string;\n\tdraggable: boolean;\n\thidden: boolean;\n\thideFocus: boolean;\n\tinnerText: string;\n\treadonly isContentEditable: boolean;\n\tlang: string;\n\treadonly offsetHeight: number;\n\treadonly offsetLeft: number;\n\treadonly offsetParent: Element;\n\treadonly offsetTop: number;\n\treadonly offsetWidth: number;\n\tonabort: (this: HTMLElement, ev: UIEvent) => any;\n\tonactivate: (this: HTMLElement, ev: UIEvent) => any;\n\tonbeforeactivate: (this: HTMLElement, ev: UIEvent) => any;\n\tonbeforecopy: (this: HTMLElement, ev: ClipboardEvent) => any;\n\tonbeforecut: (this: HTMLElement, ev: ClipboardEvent) => any;\n\tonbeforedeactivate: (this: HTMLElement, ev: UIEvent) => any;\n\tonbeforepaste: (this: HTMLElement, ev: ClipboardEvent) => any;\n\tonblur: (this: HTMLElement, ev: FocusEvent) => any;\n\toncanplay: (this: HTMLElement, ev: Event) => any;\n\toncanplaythrough: (this: HTMLElement, ev: Event) => any;\n\tonchange: (this: HTMLElement, ev: Event) => any;\n\tonclick: (this: HTMLElement, ev: MouseEvent) => any;\n\toncontextmenu: (this: HTMLElement, ev: PointerEvent) => any;\n\toncopy: (this: HTMLElement, ev: ClipboardEvent) => any;\n\toncuechange: (this: HTMLElement, ev: Event) => any;\n\toncut: (this: HTMLElement, ev: ClipboardEvent) => any;\n\tondblclick: (this: HTMLElement, ev: MouseEvent) => any;\n\tondeactivate: (this: HTMLElement, ev: UIEvent) => any;\n\tondrag: (this: HTMLElement, ev: DragEvent) => any;\n\tondragend: (this: HTMLElement, ev: DragEvent) => any;\n\tondragenter: (this: HTMLElement, ev: DragEvent) => any;\n\tondragleave: (this: HTMLElement, ev: DragEvent) => any;\n\tondragover: (this: HTMLElement, ev: DragEvent) => any;\n\tondragstart: (this: HTMLElement, ev: DragEvent) => any;\n\tondrop: (this: HTMLElement, ev: DragEvent) => any;\n\tondurationchange: (this: HTMLElement, ev: Event) => any;\n\tonemptied: (this: HTMLElement, ev: Event) => any;\n\tonerror: (this: HTMLElement, ev: ErrorEvent) => any;\n\tonfocus: (this: HTMLElement, ev: FocusEvent) => any;\n\toninput: (this: HTMLElement, ev: Event) => any;\n\toninvalid: (this: HTMLElement, ev: Event) => any;\n\tonkeydown: (this: HTMLElement, ev: KeyboardEvent) => any;\n\tonkeypress: (this: HTMLElement, ev: KeyboardEvent) => any;\n\tonkeyup: (this: HTMLElement, ev: KeyboardEvent) => any;\n\tonload: (this: HTMLElement, ev: Event) => any;\n\tonloadeddata: (this: HTMLElement, ev: Event) => any;\n\tonloadedmetadata: (this: HTMLElement, ev: Event) => any;\n\tonloadstart: (this: HTMLElement, ev: Event) => any;\n\tonmousedown: (this: HTMLElement, ev: MouseEvent) => any;\n\tonmouseenter: (this: HTMLElement, ev: MouseEvent) => any;\n\tonmouseleave: (this: HTMLElement, ev: MouseEvent) => any;\n\tonmousemove: (this: HTMLElement, ev: MouseEvent) => any;\n\tonmouseout: (this: HTMLElement, ev: MouseEvent) => any;\n\tonmouseover: (this: HTMLElement, ev: MouseEvent) => any;\n\tonmouseup: (this: HTMLElement, ev: MouseEvent) => any;\n\tonmousewheel: (this: HTMLElement, ev: WheelEvent) => any;\n\tonpaste: (this: HTMLElement, ev: ClipboardEvent) => any;\n\tonpause: (this: HTMLElement, ev: Event) => any;\n\tonplay: (this: HTMLElement, ev: Event) => any;\n\tonplaying: (this: HTMLElement, ev: Event) => any;\n\tonprogress: (this: HTMLElement, ev: ProgressEvent) => any;\n\tonratechange: (this: HTMLElement, ev: Event) => any;\n\tonreset: (this: HTMLElement, ev: Event) => any;\n\tonscroll: (this: HTMLElement, ev: UIEvent) => any;\n\tonseeked: (this: HTMLElement, ev: Event) => any;\n\tonseeking: (this: HTMLElement, ev: Event) => any;\n\tonselect: (this: HTMLElement, ev: UIEvent) => any;\n\tonselectstart: (this: HTMLElement, ev: Event) => any;\n\tonstalled: (this: HTMLElement, ev: Event) => any;\n\tonsubmit: (this: HTMLElement, ev: Event) => any;\n\tonsuspend: (this: HTMLElement, ev: Event) => any;\n\tontimeupdate: (this: HTMLElement, ev: Event) => any;\n\tonvolumechange: (this: HTMLElement, ev: Event) => any;\n\tonwaiting: (this: HTMLElement, ev: Event) => any;\n\touterText: string;\n\tspellcheck: boolean;\n\treadonly style: CSSStyleDeclaration;\n\ttabIndex: number;\n\ttitle: string;\n\tblur(): void;\n\tclick(): void;\n\tdragDrop(): boolean;\n\tfocus(): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLElement: {\n\tprototype: HTMLElement;\n\tnew(): HTMLElement;\n};\n\ninterface HTMLEmbedElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves the height of the object.\n\t */\n\theight: string;\n\thidden: any;\n\t\n\t\n\t\n\t/**\n\t * Gets the source associated with the media element for use by the PlayToManager.\n\t */\n\t\n\t/**\n\t * Sets or retrieves the name of the object.\n\t */\n\tname: string;\n\t/**\n\t * Retrieves the palette used for the embedded document.\n\t */\n\treadonly palette: string;\n\t/**\n\t * Retrieves the URL of the plug-in used to view an embedded document.\n\t */\n\treadonly pluginspage: string;\n\treadonly readyState: string;\n\t/**\n\t * Sets or retrieves a URL to be loaded by the object.\n\t */\n\tsrc: string;\n\t/**\n\t * Sets or retrieves the height and width units of the embed object.\n\t */\n\tunits: string;\n\t/**\n\t * Sets or retrieves the width of the object.\n\t */\n\twidth: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLEmbedElement: {\n\tprototype: HTMLEmbedElement;\n\tnew(): HTMLEmbedElement;\n};\n\ninterface HTMLFieldSetElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves how the object is aligned with adjacent text.\n\t */\n\talign: string;\n\tdisabled: boolean;\n\t/**\n\t * Retrieves a reference to the form that the object is embedded in.\n\t */\n\treadonly form: HTMLFormElement;\n\tname: string;\n\t/**\n\t * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.\n\t */\n\treadonly validationMessage: string;\n\t/**\n\t * Returns a  ValidityState object that represents the validity states of an element.\n\t */\n\treadonly validity: ValidityState;\n\t/**\n\t * Returns whether an element will successfully validate based on forms validation rules and constraints.\n\t */\n\treadonly willValidate: boolean;\n\t/**\n\t * Returns whether a form will validate when it is submitted, without having to submit it.\n\t */\n\tcheckValidity(): boolean;\n\t/**\n\t * Sets a custom error message that is displayed when a form is submitted.\n\t * @param error Sets a custom error message that is displayed when a form is submitted.\n\t */\n\tsetCustomValidity(error: string): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLFieldSetElement: {\n\tprototype: HTMLFieldSetElement;\n\tnew(): HTMLFieldSetElement;\n};\n\ninterface HTMLFontElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty {\n\t/**\n\t * Sets or retrieves the current typeface family.\n\t */\n\tface: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLFontElement: {\n\tprototype: HTMLFontElement;\n\tnew(): HTMLFontElement;\n};\n\ninterface HTMLFormControlsCollection extends HTMLCollectionBase {\n\tnamedItem(name: string): HTMLCollection | Element | null;\n}\n\ndeclare var HTMLFormControlsCollection: {\n\tprototype: HTMLFormControlsCollection;\n\tnew(): HTMLFormControlsCollection;\n};\n\ninterface HTMLFormElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.\n\t */\n\tacceptCharset: string;\n\t/**\n\t * Sets or retrieves the URL to which the form content is sent for processing.\n\t */\n\taction: string;\n\t/**\n\t * Specifies whether autocomplete is applied to an editable text field.\n\t */\n\tautocomplete: string;\n\t/**\n\t * Retrieves a collection, in source order, of all controls in a given form.\n\t */\n\treadonly elements: HTMLFormControlsCollection;\n\t/**\n\t * Sets or retrieves the MIME encoding for the form.\n\t */\n\tencoding: string;\n\t/**\n\t * Sets or retrieves the encoding type for the form.\n\t */\n\tenctype: string;\n\t/**\n\t * Sets or retrieves the number of objects in a collection.\n\t */\n\treadonly length: number;\n\t/**\n\t * Sets or retrieves how to send the form data to the server.\n\t */\n\tmethod: string;\n\t/**\n\t * Sets or retrieves the name of the object.\n\t */\n\tname: string;\n\t/**\n\t * Designates a form that is not validated when submitted.\n\t */\n\tnoValidate: boolean;\n\t/**\n\t * Sets or retrieves the window or frame at which to target content.\n\t */\n\ttarget: string;\n\t/**\n\t * Returns whether a form will validate when it is submitted, without having to submit it.\n\t */\n\tcheckValidity(): boolean;\n\t/**\n\t * Retrieves a form object or an object from an elements collection.\n\t * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is a Number, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\n\t * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\n\t */\n\titem(name?: any, index?: any): any;\n\t/**\n\t * Retrieves a form object or an object from an elements collection.\n\t */\n\tnamedItem(name: string): any;\n\t/**\n\t * Fires when the user resets a form.\n\t */\n\treset(): void;\n\t/**\n\t * Fires when a FORM is about to be submitted.\n\t */\n\tsubmit(): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n\t[name: string]: any;\n}\n\ndeclare var HTMLFormElement: {\n\tprototype: HTMLFormElement;\n\tnew(): HTMLFormElement;\n};\n\ninterface HTMLFrameElementEventMap extends HTMLElementEventMap {\n\t"load": Event;\n}\n\ninterface HTMLFrameElement extends HTMLElement {\n\t/**\n\t * Specifies the properties of a border drawn around an object.\n\t */\n\tborder: string;\n\t/**\n\t * Sets or retrieves the border color of the object.\n\t */\n\tborderColor: any;\n\t/**\n\t * Retrieves the document object of the page or frame.\n\t */\n\treadonly contentDocument: Document;\n\t/**\n\t * Retrieves the object of the specified.\n\t */\n\treadonly contentWindow: Window;\n\t/**\n\t * Sets or retrieves whether to display a border for the frame.\n\t */\n\tframeBorder: string;\n\t/**\n\t * Sets or retrieves the amount of additional space between the frames.\n\t */\n\tframeSpacing: any;\n\t/**\n\t * Sets or retrieves the height of the object.\n\t */\n\theight: string | number;\n\t/**\n\t * Sets or retrieves a URI to a long description of the object.\n\t */\n\tlongDesc: string;\n\t/**\n\t * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\n\t */\n\tmarginHeight: string;\n\t/**\n\t * Sets or retrieves the left and right margin widths before displaying the text in a frame.\n\t */\n\tmarginWidth: string;\n\t/**\n\t * Sets or retrieves the frame name.\n\t */\n\tname: string;\n\t/**\n\t * Sets or retrieves whether the user can resize the frame.\n\t */\n\tnoResize: boolean;\n\t/**\n\t * Raised when the object has been completely received from the server.\n\t */\n\tonload: (this: HTMLFrameElement, ev: Event) => any;\n\t/**\n\t * Sets or retrieves whether the frame can be scrolled.\n\t */\n\tscrolling: string;\n\t/**\n\t * Sets or retrieves a URL to be loaded by the object.\n\t */\n\tsrc: string;\n\t/**\n\t * Sets or retrieves the width of the object.\n\t */\n\twidth: string | number;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLFrameElement: {\n\tprototype: HTMLFrameElement;\n\tnew(): HTMLFrameElement;\n};\n\ninterface HTMLFrameSetElementEventMap extends HTMLElementEventMap {\n\t"afterprint": Event;\n\t"beforeprint": Event;\n\t"beforeunload": BeforeUnloadEvent;\n\t"blur": FocusEvent;\n\t"error": ErrorEvent;\n\t"focus": FocusEvent;\n\t"hashchange": HashChangeEvent;\n\t"load": Event;\n\t"message": MessageEvent;\n\t"offline": Event;\n\t"online": Event;\n\t"orientationchange": Event;\n\t"pagehide": PageTransitionEvent;\n\t"pageshow": PageTransitionEvent;\n\t"popstate": PopStateEvent;\n\t"resize": UIEvent;\n\t"scroll": UIEvent;\n\t"storage": StorageEvent;\n\t"unload": Event;\n}\n\ninterface HTMLFrameSetElement extends HTMLElement {\n\tborder: string;\n\t/**\n\t * Sets or retrieves the border color of the object.\n\t */\n\tborderColor: any;\n\t/**\n\t * Sets or retrieves the frame widths of the object.\n\t */\n\tcols: string;\n\t/**\n\t * Sets or retrieves whether to display a border for the frame.\n\t */\n\tframeBorder: string;\n\t/**\n\t * Sets or retrieves the amount of additional space between the frames.\n\t */\n\tframeSpacing: any;\n\tname: string;\n\tonafterprint: (this: HTMLFrameSetElement, ev: Event) => any;\n\tonbeforeprint: (this: HTMLFrameSetElement, ev: Event) => any;\n\tonbeforeunload: (this: HTMLFrameSetElement, ev: BeforeUnloadEvent) => any;\n\t/**\n\t * Fires when the object loses the input focus.\n\t */\n\tonblur: (this: HTMLFrameSetElement, ev: FocusEvent) => any;\n\tonerror: (this: HTMLFrameSetElement, ev: ErrorEvent) => any;\n\t/**\n\t * Fires when the object receives focus.\n\t */\n\tonfocus: (this: HTMLFrameSetElement, ev: FocusEvent) => any;\n\tonhashchange: (this: HTMLFrameSetElement, ev: HashChangeEvent) => any;\n\tonload: (this: HTMLFrameSetElement, ev: Event) => any;\n\tonmessage: (this: HTMLFrameSetElement, ev: MessageEvent) => any;\n\tonoffline: (this: HTMLFrameSetElement, ev: Event) => any;\n\tononline: (this: HTMLFrameSetElement, ev: Event) => any;\n\tonorientationchange: (this: HTMLFrameSetElement, ev: Event) => any;\n\tonpagehide: (this: HTMLFrameSetElement, ev: PageTransitionEvent) => any;\n\tonpageshow: (this: HTMLFrameSetElement, ev: PageTransitionEvent) => any;\n\tonpopstate: (this: HTMLFrameSetElement, ev: PopStateEvent) => any;\n\tonresize: (this: HTMLFrameSetElement, ev: UIEvent) => any;\n\tonscroll: (this: HTMLFrameSetElement, ev: UIEvent) => any;\n\tonstorage: (this: HTMLFrameSetElement, ev: StorageEvent) => any;\n\tonunload: (this: HTMLFrameSetElement, ev: Event) => any;\n\t/**\n\t * Sets or retrieves the frame heights of the object.\n\t */\n\trows: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLFrameSetElement: {\n\tprototype: HTMLFrameSetElement;\n\tnew(): HTMLFrameSetElement;\n};\n\ninterface HTMLHeadElement extends HTMLElement {\n\tprofile: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLHeadElement: {\n\tprototype: HTMLHeadElement;\n\tnew(): HTMLHeadElement;\n};\n\ninterface HTMLHeadingElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves a value that indicates the table alignment.\n\t */\n\talign: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLHeadingElement: {\n\tprototype: HTMLHeadingElement;\n\tnew(): HTMLHeadingElement;\n};\n\ninterface HTMLHRElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty {\n\t/**\n\t * Sets or retrieves how the object is aligned with adjacent text.\n\t */\n\talign: string;\n\t/**\n\t * Sets or retrieves whether the horizontal rule is drawn with 3-D shading.\n\t */\n\tnoShade: boolean;\n\t/**\n\t * Sets or retrieves the width of the object.\n\t */\n\twidth: number;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLHRElement: {\n\tprototype: HTMLHRElement;\n\tnew(): HTMLHRElement;\n};\n\ninterface HTMLHtmlElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves the DTD version that governs the current document.\n\t */\n\tversion: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLHtmlElement: {\n\tprototype: HTMLHtmlElement;\n\tnew(): HTMLHtmlElement;\n};\n\ninterface HTMLIFrameElementEventMap extends HTMLElementEventMap {\n\t"load": Event;\n}\n\ninterface HTMLIFrameElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves how the object is aligned with adjacent text.\n\t */\n\talign: string;\n\tallowFullscreen: boolean;\n\tallowPaymentRequest: boolean;\n\t/**\n\t * Specifies the properties of a border drawn around an object.\n\t */\n\tborder: string;\n\t/**\n\t * Retrieves the document object of the page or frame.\n\t */\n\treadonly contentDocument: Document;\n\t/**\n\t * Retrieves the object of the specified.\n\t */\n\treadonly contentWindow: Window;\n\t/**\n\t * Sets or retrieves whether to display a border for the frame.\n\t */\n\tframeBorder: string;\n\t/**\n\t * Sets or retrieves the amount of additional space between the frames.\n\t */\n\tframeSpacing: any;\n\t/**\n\t * Sets or retrieves the height of the object.\n\t */\n\theight: string;\n\t/**\n\t * Sets or retrieves the horizontal margin for the object.\n\t */\n\thspace: number;\n\t/**\n\t * Sets or retrieves a URI to a long description of the object.\n\t */\n\tlongDesc: string;\n\t/**\n\t * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\n\t */\n\tmarginHeight: string;\n\t/**\n\t * Sets or retrieves the left and right margin widths before displaying the text in a frame.\n\t */\n\tmarginWidth: string;\n\t/**\n\t * Sets or retrieves the frame name.\n\t */\n\tname: string;\n\t/**\n\t * Sets or retrieves whether the user can resize the frame.\n\t */\n\tnoResize: boolean;\n\t/**\n\t * Raised when the object has been completely received from the server.\n\t */\n\tonload: (this: HTMLIFrameElement, ev: Event) => any;\n\treadonly sandbox: DOMSettableTokenList;\n\t/**\n\t * Sets or retrieves whether the frame can be scrolled.\n\t */\n\tscrolling: string;\n\t/**\n\t * Sets or retrieves a URL to be loaded by the object.\n\t */\n\tsrc: string;\n\t/**\n\t * Sets or retrieves the vertical margin for the object.\n\t */\n\tvspace: number;\n\t/**\n\t * Sets or retrieves the width of the object.\n\t */\n\twidth: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLIFrameElement: {\n\tprototype: HTMLIFrameElement;\n\tnew(): HTMLIFrameElement;\n};\n\ninterface HTMLImageElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves how the object is aligned with adjacent text.\n\t */\n\talign: string;\n\t/**\n\t * Sets or retrieves a text alternative to the graphic.\n\t */\n\talt: string;\n\t/**\n\t * Specifies the properties of a border drawn around an object.\n\t */\n\tborder: string;\n\t/**\n\t * Retrieves whether the object is fully loaded.\n\t */\n\treadonly complete: boolean;\n\tcrossOrigin: string | null;\n\treadonly currentSrc: string;\n\t/**\n\t * Sets or retrieves the height of the object.\n\t */\n\theight: number;\n\t/**\n\t * Sets or retrieves the width of the border to draw around the object.\n\t */\n\thspace: number;\n\t/**\n\t * Sets or retrieves whether the image is a server-side image map.\n\t */\n\tisMap: boolean;\n\t/**\n\t * Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.\n\t */\n\tlongDesc: string;\n\tlowsrc: string;\n\t\n\t\n\t/**\n\t * Gets the source associated with the media element for use by the PlayToManager.\n\t */\n\t\n\t/**\n\t * Sets or retrieves the name of the object.\n\t */\n\tname: string;\n\t/**\n\t * The original height of the image resource before sizing.\n\t */\n\treadonly naturalHeight: number;\n\t/**\n\t * The original width of the image resource before sizing.\n\t */\n\treadonly naturalWidth: number;\n\tsizes: string;\n\t/**\n\t * The address or URL of the a media resource that is to be considered.\n\t */\n\tsrc: string;\n\tsrcset: string;\n\t/**\n\t * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n\t */\n\tuseMap: string;\n\t/**\n\t * Sets or retrieves the vertical margin for the object.\n\t */\n\tvspace: number;\n\t/**\n\t * Sets or retrieves the width of the object.\n\t */\n\twidth: number;\n\treadonly x: number;\n\treadonly y: number;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLImageElement: {\n\tprototype: HTMLImageElement;\n\tnew(): HTMLImageElement;\n};\n\ninterface HTMLInputElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves a comma-separated list of content types.\n\t */\n\taccept: string;\n\t/**\n\t * Sets or retrieves how the object is aligned with adjacent text.\n\t */\n\talign: string;\n\t/**\n\t * Sets or retrieves a text alternative to the graphic.\n\t */\n\talt: string;\n\t/**\n\t * Specifies whether autocomplete is applied to an editable text field.\n\t */\n\tautocomplete: string;\n\t/**\n\t * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\n\t */\n\tautofocus: boolean;\n\t/**\n\t * Sets or retrieves the width of the border to draw around the object.\n\t */\n\tborder: string;\n\t/**\n\t * Sets or retrieves the state of the check box or radio button.\n\t */\n\tchecked: boolean;\n\t/**\n\t * Retrieves whether the object is fully loaded.\n\t */\n\treadonly complete: boolean;\n\t/**\n\t * Sets or retrieves the state of the check box or radio button.\n\t */\n\tdefaultChecked: boolean;\n\t/**\n\t * Sets or retrieves the initial contents of the object.\n\t */\n\tdefaultValue: string;\n\tdisabled: boolean;\n\t/**\n\t * Returns a FileList object on a file type input object.\n\t */\n\treadonly files: FileList | null;\n\t/**\n\t * Retrieves a reference to the form that the object is embedded in.\n\t */\n\treadonly form: HTMLFormElement;\n\t/**\n\t * Overrides the action attribute (where the data on a form is sent) on the parent form element.\n\t */\n\tformAction: string;\n\t/**\n\t * Used to override the encoding (formEnctype attribute) specified on the form element.\n\t */\n\tformEnctype: string;\n\t/**\n\t * Overrides the submit method attribute previously specified on a form element.\n\t */\n\tformMethod: string;\n\t/**\n\t * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.\n\t */\n\tformNoValidate: string;\n\t/**\n\t * Overrides the target attribute on a form element.\n\t */\n\tformTarget: string;\n\t/**\n\t * Sets or retrieves the height of the object.\n\t */\n\theight: string;\n\t/**\n\t * Sets or retrieves the width of the border to draw around the object.\n\t */\n\thspace: number;\n\tindeterminate: boolean;\n\t/**\n\t * Specifies the ID of a pre-defined datalist of options for an input element.\n\t */\n\treadonly list: HTMLElement;\n\t/**\n\t * Defines the maximum acceptable value for an input element with type="number".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.\n\t */\n\tmax: string;\n\t/**\n\t * Sets or retrieves the maximum number of characters that the user can enter in a text control.\n\t */\n\tmaxLength: number;\n\t/**\n\t * Defines the minimum acceptable value for an input element with type="number". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.\n\t */\n\tmin: string;\n\t/**\n\t * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\n\t */\n\tmultiple: boolean;\n\t/**\n\t * Sets or retrieves the name of the object.\n\t */\n\tname: string;\n\t/**\n\t * Gets or sets a string containing a regular expression that the user\'s input must match.\n\t */\n\tpattern: string;\n\t/**\n\t * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\n\t */\n\tplaceholder: string;\n\treadOnly: boolean;\n\t/**\n\t * When present, marks an element that can\'t be submitted without a value.\n\t */\n\trequired: boolean;\n\tselectionDirection: string;\n\t/**\n\t * Gets or sets the end position or offset of a text selection.\n\t */\n\tselectionEnd: number;\n\t/**\n\t * Gets or sets the starting position or offset of a text selection.\n\t */\n\tselectionStart: number;\n\tsize: number;\n\t/**\n\t * The address or URL of the a media resource that is to be considered.\n\t */\n\tsrc: string;\n\tstatus: boolean;\n\t/**\n\t * Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.\n\t */\n\tstep: string;\n\t/**\n\t * Returns the content type of the object.\n\t */\n\ttype: string;\n\t/**\n\t * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n\t */\n\tuseMap: string;\n\t/**\n\t * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.\n\t */\n\treadonly validationMessage: string;\n\t/**\n\t * Returns a  ValidityState object that represents the validity states of an element.\n\t */\n\treadonly validity: ValidityState;\n\t/**\n\t * Returns the value of the data at the cursor\'s current position.\n\t */\n\tvalue: string;\n\tvalueAsDate: Date;\n\t/**\n\t * Returns the input field value as a number.\n\t */\n\tvalueAsNumber: number;\n\t/**\n\t * Sets or retrieves the vertical margin for the object.\n\t */\n\tvspace: number;\n\twebkitdirectory: boolean;\n\t/**\n\t * Sets or retrieves the width of the object.\n\t */\n\twidth: string;\n\t/**\n\t * Returns whether an element will successfully validate based on forms validation rules and constraints.\n\t */\n\treadonly willValidate: boolean;\n\tminLength: number;\n\t/**\n\t * Returns whether a form will validate when it is submitted, without having to submit it.\n\t */\n\tcheckValidity(): boolean;\n\t/**\n\t * Makes the selection equal to the current object.\n\t */\n\tselect(): void;\n\t/**\n\t * Sets a custom error message that is displayed when a form is submitted.\n\t * @param error Sets a custom error message that is displayed when a form is submitted.\n\t */\n\tsetCustomValidity(error: string): void;\n\t/**\n\t * Sets the start and end positions of a selection in a text field.\n\t * @param start The offset into the text field for the start of the selection.\n\t * @param end The offset into the text field for the end of the selection.\n\t */\n\tsetSelectionRange(start?: number, end?: number, direction?: string): void;\n\t/**\n\t * Decrements a range input control\'s value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control\'s step value multiplied by the parameter\'s value.\n\t * @param n Value to decrement the value by.\n\t */\n\tstepDown(n?: number): void;\n\t/**\n\t * Increments a range input control\'s value by the value given by the Step attribute. If the optional parameter is used, will increment the input control\'s value by that value.\n\t * @param n Value to increment the value by.\n\t */\n\tstepUp(n?: number): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLInputElement: {\n\tprototype: HTMLInputElement;\n\tnew(): HTMLInputElement;\n};\n\ninterface HTMLLabelElement extends HTMLElement {\n\t/**\n\t * Retrieves a reference to the form that the object is embedded in.\n\t */\n\treadonly form: HTMLFormElement;\n\t/**\n\t * Sets or retrieves the object to which the given label object is assigned.\n\t */\n\thtmlFor: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLLabelElement: {\n\tprototype: HTMLLabelElement;\n\tnew(): HTMLLabelElement;\n};\n\ninterface HTMLLegendElement extends HTMLElement {\n\t/**\n\t * Retrieves a reference to the form that the object is embedded in.\n\t */\n\talign: string;\n\t/**\n\t * Retrieves a reference to the form that the object is embedded in.\n\t */\n\treadonly form: HTMLFormElement;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLLegendElement: {\n\tprototype: HTMLLegendElement;\n\tnew(): HTMLLegendElement;\n};\n\ninterface HTMLLIElement extends HTMLElement {\n\ttype: string;\n\t/**\n\t * Sets or retrieves the value of a list item.\n\t */\n\tvalue: number;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLLIElement: {\n\tprototype: HTMLLIElement;\n\tnew(): HTMLLIElement;\n};\n\ninterface HTMLLinkElement extends HTMLElement, LinkStyle {\n\t/**\n\t * Sets or retrieves the character set used to encode the object.\n\t */\n\tcharset: string;\n\tdisabled: boolean;\n\t/**\n\t * Sets or retrieves a destination URL or an anchor point.\n\t */\n\thref: string;\n\t/**\n\t * Sets or retrieves the language code of the object.\n\t */\n\threflang: string;\n\t/**\n\t * Sets or retrieves the media type.\n\t */\n\tmedia: string;\n\t/**\n\t * Sets or retrieves the relationship between the object and the destination of the link.\n\t */\n\trel: string;\n\t/**\n\t * Sets or retrieves the relationship between the object and the destination of the link.\n\t */\n\trev: string;\n\t/**\n\t * Sets or retrieves the window or frame at which to target content.\n\t */\n\ttarget: string;\n\t/**\n\t * Sets or retrieves the MIME type of the object.\n\t */\n\ttype: string;\n\timport?: Document;\n\tintegrity: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLLinkElement: {\n\tprototype: HTMLLinkElement;\n\tnew(): HTMLLinkElement;\n};\n\ninterface HTMLMapElement extends HTMLElement {\n\t/**\n\t * Retrieves a collection of the area objects defined for the given map object.\n\t */\n\treadonly areas: HTMLAreasCollection;\n\t/**\n\t * Sets or retrieves the name of the object.\n\t */\n\tname: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLMapElement: {\n\tprototype: HTMLMapElement;\n\tnew(): HTMLMapElement;\n};\n\ninterface HTMLMarqueeElementEventMap extends HTMLElementEventMap {\n\t"bounce": Event;\n\t"finish": Event;\n\t"start": Event;\n}\n\ninterface HTMLMarqueeElement extends HTMLElement {\n\tbehavior: string;\n\tbgColor: any;\n\tdirection: string;\n\theight: string;\n\thspace: number;\n\tloop: number;\n\tonbounce: (this: HTMLMarqueeElement, ev: Event) => any;\n\tonfinish: (this: HTMLMarqueeElement, ev: Event) => any;\n\tonstart: (this: HTMLMarqueeElement, ev: Event) => any;\n\tscrollAmount: number;\n\tscrollDelay: number;\n\ttrueSpeed: boolean;\n\tvspace: number;\n\twidth: string;\n\tstart(): void;\n\tstop(): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLMarqueeElement: {\n\tprototype: HTMLMarqueeElement;\n\tnew(): HTMLMarqueeElement;\n};\n\ninterface HTMLMenuElement extends HTMLElement {\n\tcompact: boolean;\n\ttype: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLMenuElement: {\n\tprototype: HTMLMenuElement;\n\tnew(): HTMLMenuElement;\n};\n\ninterface HTMLMetaElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves the character set used to encode the object.\n\t */\n\tcharset: string;\n\t/**\n\t * Gets or sets meta-information to associate with httpEquiv or name.\n\t */\n\tcontent: string;\n\t/**\n\t * Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.\n\t */\n\thttpEquiv: string;\n\t/**\n\t * Sets or retrieves the value specified in the content attribute of the meta object.\n\t */\n\tname: string;\n\t/**\n\t * Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.\n\t */\n\tscheme: string;\n\t/**\n\t * Sets or retrieves the URL property that will be loaded after the specified time has elapsed.\n\t */\n\turl: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLMetaElement: {\n\tprototype: HTMLMetaElement;\n\tnew(): HTMLMetaElement;\n};\n\ninterface HTMLMeterElement extends HTMLElement {\n\thigh: number;\n\tlow: number;\n\tmax: number;\n\tmin: number;\n\toptimum: number;\n\tvalue: number;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLMeterElement: {\n\tprototype: HTMLMeterElement;\n\tnew(): HTMLMeterElement;\n};\n\ninterface HTMLModElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves reference information about the object.\n\t */\n\tcite: string;\n\t/**\n\t * Sets or retrieves the date and time of a modification to the object.\n\t */\n\tdateTime: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLModElement: {\n\tprototype: HTMLModElement;\n\tnew(): HTMLModElement;\n};\n\ninterface HTMLObjectElement extends HTMLElement {\n\talign: string;\n\t/**\n\t * Sets or retrieves a text alternative to the graphic.\n\t */\n\talt: string;\n\t/**\n\t * Gets or sets the optional alternative HTML script to execute if the object fails to load.\n\t */\n\taltHtml: string;\n\t/**\n\t * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\n\t */\n\tarchive: string;\n\t/**\n\t * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.\n\t */\n\treadonly BaseHref: string;\n\tborder: string;\n\t/**\n\t * Sets or retrieves the URL of the file containing the compiled Java class.\n\t */\n\tcode: string;\n\t/**\n\t * Sets or retrieves the URL of the component.\n\t */\n\tcodeBase: string;\n\t/**\n\t * Sets or retrieves the Internet media type for the code associated with the object.\n\t */\n\tcodeType: string;\n\t/**\n\t * Retrieves the document object of the page or frame.\n\t */\n\treadonly contentDocument: Document;\n\t/**\n\t * Sets or retrieves the URL that references the data of the object.\n\t */\n\tdata: string;\n\tdeclare: boolean;\n\t/**\n\t * Retrieves a reference to the form that the object is embedded in.\n\t */\n\treadonly form: HTMLFormElement;\n\t/**\n\t * Sets or retrieves the height of the object.\n\t */\n\theight: string;\n\thspace: number;\n\t\n\t\n\t\n\t/**\n\t * Gets the source associated with the media element for use by the PlayToManager.\n\t */\n\t\n\t/**\n\t * Sets or retrieves the name of the object.\n\t */\n\tname: string;\n\treadonly readyState: number;\n\t/**\n\t * Sets or retrieves a message to be displayed while an object is loading.\n\t */\n\tstandby: string;\n\t/**\n\t * Sets or retrieves the MIME type of the object.\n\t */\n\ttype: string;\n\t/**\n\t * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n\t */\n\tuseMap: string;\n\t/**\n\t * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.\n\t */\n\treadonly validationMessage: string;\n\t/**\n\t * Returns a  ValidityState object that represents the validity states of an element.\n\t */\n\treadonly validity: ValidityState;\n\tvspace: number;\n\t/**\n\t * Sets or retrieves the width of the object.\n\t */\n\twidth: string;\n\t/**\n\t * Returns whether an element will successfully validate based on forms validation rules and constraints.\n\t */\n\treadonly willValidate: boolean;\n\t/**\n\t * Returns whether a form will validate when it is submitted, without having to submit it.\n\t */\n\tcheckValidity(): boolean;\n\t/**\n\t * Sets a custom error message that is displayed when a form is submitted.\n\t * @param error Sets a custom error message that is displayed when a form is submitted.\n\t */\n\tsetCustomValidity(error: string): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLObjectElement: {\n\tprototype: HTMLObjectElement;\n\tnew(): HTMLObjectElement;\n};\n\ninterface HTMLOListElement extends HTMLElement {\n\tcompact: boolean;\n\t/**\n\t * The starting number.\n\t */\n\tstart: number;\n\ttype: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLOListElement: {\n\tprototype: HTMLOListElement;\n\tnew(): HTMLOListElement;\n};\n\ninterface HTMLOptGroupElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves the status of an option.\n\t */\n\tdefaultSelected: boolean;\n\tdisabled: boolean;\n\t/**\n\t * Retrieves a reference to the form that the object is embedded in.\n\t */\n\treadonly form: HTMLFormElement;\n\t/**\n\t * Sets or retrieves the ordinal position of an option in a list box.\n\t */\n\treadonly index: number;\n\t/**\n\t * Sets or retrieves a value that you can use to implement your own label functionality for the object.\n\t */\n\tlabel: string;\n\t/**\n\t * Sets or retrieves whether the option in the list box is the default item.\n\t */\n\tselected: boolean;\n\t/**\n\t * Sets or retrieves the text string specified by the option tag.\n\t */\n\treadonly text: string;\n\t/**\n\t * Sets or retrieves the value which is returned to the server when the form control is submitted.\n\t */\n\tvalue: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLOptGroupElement: {\n\tprototype: HTMLOptGroupElement;\n\tnew(): HTMLOptGroupElement;\n};\n\ninterface HTMLOptionElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves the status of an option.\n\t */\n\tdefaultSelected: boolean;\n\tdisabled: boolean;\n\t/**\n\t * Retrieves a reference to the form that the object is embedded in.\n\t */\n\treadonly form: HTMLFormElement;\n\t/**\n\t * Sets or retrieves the ordinal position of an option in a list box.\n\t */\n\treadonly index: number;\n\t/**\n\t * Sets or retrieves a value that you can use to implement your own label functionality for the object.\n\t */\n\tlabel: string;\n\t/**\n\t * Sets or retrieves whether the option in the list box is the default item.\n\t */\n\tselected: boolean;\n\t/**\n\t * Sets or retrieves the text string specified by the option tag.\n\t */\n\ttext: string;\n\t/**\n\t * Sets or retrieves the value which is returned to the server when the form control is submitted.\n\t */\n\tvalue: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLOptionElement: {\n\tprototype: HTMLOptionElement;\n\tnew(): HTMLOptionElement;\n};\n\ninterface HTMLOptionsCollection extends HTMLCollectionOf<HTMLOptionElement> {\n\tlength: number;\n\tselectedIndex: number;\n\tadd(element: HTMLOptionElement | HTMLOptGroupElement, before?: HTMLElement | number): void;\n\tremove(index: number): void;\n}\n\ndeclare var HTMLOptionsCollection: {\n\tprototype: HTMLOptionsCollection;\n\tnew(): HTMLOptionsCollection;\n};\n\ninterface HTMLOutputElement extends HTMLElement {\n\tdefaultValue: string;\n\treadonly form: HTMLFormElement;\n\treadonly htmlFor: DOMSettableTokenList;\n\tname: string;\n\treadonly type: string;\n\treadonly validationMessage: string;\n\treadonly validity: ValidityState;\n\tvalue: string;\n\treadonly willValidate: boolean;\n\tcheckValidity(): boolean;\n\treportValidity(): boolean;\n\tsetCustomValidity(error: string): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLOutputElement: {\n\tprototype: HTMLOutputElement;\n\tnew(): HTMLOutputElement;\n};\n\ninterface HTMLParagraphElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves how the object is aligned with adjacent text.\n\t */\n\talign: string;\n\tclear: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLParagraphElement: {\n\tprototype: HTMLParagraphElement;\n\tnew(): HTMLParagraphElement;\n};\n\ninterface HTMLParamElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves the name of an input parameter for an element.\n\t */\n\tname: string;\n\t/**\n\t * Sets or retrieves the content type of the resource designated by the value attribute.\n\t */\n\ttype: string;\n\t/**\n\t * Sets or retrieves the value of an input parameter for an element.\n\t */\n\tvalue: string;\n\t/**\n\t * Sets or retrieves the data type of the value attribute.\n\t */\n\tvalueType: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLParamElement: {\n\tprototype: HTMLParamElement;\n\tnew(): HTMLParamElement;\n};\n\ninterface HTMLPictureElement extends HTMLElement {\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLPictureElement: {\n\tprototype: HTMLPictureElement;\n\tnew(): HTMLPictureElement;\n};\n\ninterface HTMLPreElement extends HTMLElement {\n\t/**\n\t * Sets or gets a value that you can use to implement your own width functionality for the object.\n\t */\n\twidth: number;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLPreElement: {\n\tprototype: HTMLPreElement;\n\tnew(): HTMLPreElement;\n};\n\ninterface HTMLProgressElement extends HTMLElement {\n\t/**\n\t * Retrieves a reference to the form that the object is embedded in.\n\t */\n\treadonly form: HTMLFormElement;\n\t/**\n\t * Defines the maximum, or "done" value for a progress element.\n\t */\n\tmax: number;\n\t/**\n\t * Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).\n\t */\n\treadonly position: number;\n\t/**\n\t * Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.\n\t */\n\tvalue: number;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLProgressElement: {\n\tprototype: HTMLProgressElement;\n\tnew(): HTMLProgressElement;\n};\n\ninterface HTMLQuoteElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves reference information about the object.\n\t */\n\tcite: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLQuoteElement: {\n\tprototype: HTMLQuoteElement;\n\tnew(): HTMLQuoteElement;\n};\n\ninterface HTMLScriptElement extends HTMLElement {\n\tasync: boolean;\n\t/**\n\t * Sets or retrieves the character set used to encode the object.\n\t */\n\tcharset: string;\n\tcrossOrigin: string | null;\n\t/**\n\t * Sets or retrieves the status of the script.\n\t */\n\tdefer: boolean;\n\t/**\n\t * Sets or retrieves the event for which the script is written.\n\t */\n\tevent: string;\n\t/**\n\t * Sets or retrieves the object that is bound to the event script.\n\t */\n\thtmlFor: string;\n\t/**\n\t * Retrieves the URL to an external file that contains the source code or data.\n\t */\n\tsrc: string;\n\t/**\n\t * Retrieves or sets the text of the object as a string.\n\t */\n\ttext: string;\n\t/**\n\t * Sets or retrieves the MIME type for the associated scripting engine.\n\t */\n\ttype: string;\n\tintegrity: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLScriptElement: {\n\tprototype: HTMLScriptElement;\n\tnew(): HTMLScriptElement;\n};\n\ninterface HTMLSelectElement extends HTMLElement {\n\t/**\n\t * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\n\t */\n\tautofocus: boolean;\n\tdisabled: boolean;\n\t/**\n\t * Retrieves a reference to the form that the object is embedded in.\n\t */\n\treadonly form: HTMLFormElement;\n\t/**\n\t * Sets or retrieves the number of objects in a collection.\n\t */\n\tlength: number;\n\t/**\n\t * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\n\t */\n\tmultiple: boolean;\n\t/**\n\t * Sets or retrieves the name of the object.\n\t */\n\tname: string;\n\treadonly options: HTMLOptionsCollection;\n\t/**\n\t * When present, marks an element that can\'t be submitted without a value.\n\t */\n\trequired: boolean;\n\t/**\n\t * Sets or retrieves the index of the selected option in a select object.\n\t */\n\tselectedIndex: number;\n\tselectedOptions: HTMLCollectionOf<HTMLOptionElement>;\n\t/**\n\t * Sets or retrieves the number of rows in the list box.\n\t */\n\tsize: number;\n\t/**\n\t * Retrieves the type of select control based on the value of the MULTIPLE attribute.\n\t */\n\treadonly type: string;\n\t/**\n\t * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.\n\t */\n\treadonly validationMessage: string;\n\t/**\n\t * Returns a  ValidityState object that represents the validity states of an element.\n\t */\n\treadonly validity: ValidityState;\n\t/**\n\t * Sets or retrieves the value which is returned to the server when the form control is submitted.\n\t */\n\tvalue: string;\n\t/**\n\t * Returns whether an element will successfully validate based on forms validation rules and constraints.\n\t */\n\treadonly willValidate: boolean;\n\t/**\n\t * Adds an element to the areas, controlRange, or options collection.\n\t * @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.\n\t * @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection.\n\t */\n\tadd(element: HTMLElement, before?: HTMLElement | number): void;\n\t/**\n\t * Returns whether a form will validate when it is submitted, without having to submit it.\n\t */\n\tcheckValidity(): boolean;\n\t/**\n\t * Retrieves a select object or an object from an options collection.\n\t * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\n\t * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\n\t */\n\titem(name?: any, index?: any): any;\n\t/**\n\t * Retrieves a select object or an object from an options collection.\n\t * @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.\n\t */\n\tnamedItem(name: string): any;\n\t/**\n\t * Removes an element from the collection.\n\t * @param index Number that specifies the zero-based index of the element to remove from the collection.\n\t */\n\tremove(index?: number): void;\n\t/**\n\t * Sets a custom error message that is displayed when a form is submitted.\n\t * @param error Sets a custom error message that is displayed when a form is submitted.\n\t */\n\tsetCustomValidity(error: string): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n\t[name: string]: any;\n}\n\ndeclare var HTMLSelectElement: {\n\tprototype: HTMLSelectElement;\n\tnew(): HTMLSelectElement;\n};\n\ninterface HTMLSourceElement extends HTMLElement {\n\t/**\n\t * Gets or sets the intended media type of the media source.\n\t */\n\tmedia: string;\n\tsizes: string;\n\t/**\n\t * The address or URL of the a media resource that is to be considered.\n\t */\n\tsrc: string;\n\tsrcset: string;\n\t/**\n\t * Gets or sets the MIME type of a media resource.\n\t */\n\ttype: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLSourceElement: {\n\tprototype: HTMLSourceElement;\n\tnew(): HTMLSourceElement;\n};\n\ninterface HTMLSpanElement extends HTMLElement {\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLSpanElement: {\n\tprototype: HTMLSpanElement;\n\tnew(): HTMLSpanElement;\n};\n\ninterface HTMLStyleElement extends HTMLElement, LinkStyle {\n\tdisabled: boolean;\n\t/**\n\t * Sets or retrieves the media type.\n\t */\n\tmedia: string;\n\t/**\n\t * Retrieves the CSS language in which the style sheet is written.\n\t */\n\ttype: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLStyleElement: {\n\tprototype: HTMLStyleElement;\n\tnew(): HTMLStyleElement;\n};\n\ninterface HTMLTableCaptionElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves the alignment of the caption or legend.\n\t */\n\talign: string;\n\t/**\n\t * Sets or retrieves whether the caption appears at the top or bottom of the table.\n\t */\n\tvAlign: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTableCaptionElement: {\n\tprototype: HTMLTableCaptionElement;\n\tnew(): HTMLTableCaptionElement;\n};\n\ninterface HTMLTableCellElement extends HTMLElement, HTMLTableAlignment {\n\t/**\n\t * Sets or retrieves abbreviated text for the object.\n\t */\n\tabbr: string;\n\t/**\n\t * Sets or retrieves how the object is aligned with adjacent text.\n\t */\n\talign: string;\n\t/**\n\t * Sets or retrieves a comma-delimited list of conceptual categories associated with the object.\n\t */\n\taxis: string;\n\tbgColor: any;\n\t/**\n\t * Retrieves the position of the object in the cells collection of a row.\n\t */\n\treadonly cellIndex: number;\n\t/**\n\t * Sets or retrieves the number columns in the table that the object should span.\n\t */\n\tcolSpan: number;\n\t/**\n\t * Sets or retrieves a list of header cells that provide information for the object.\n\t */\n\theaders: string;\n\t/**\n\t * Sets or retrieves the height of the object.\n\t */\n\theight: any;\n\t/**\n\t * Sets or retrieves whether the browser automatically performs wordwrap.\n\t */\n\tnoWrap: boolean;\n\t/**\n\t * Sets or retrieves how many rows in a table the cell should span.\n\t */\n\trowSpan: number;\n\t/**\n\t * Sets or retrieves the group of cells in a table to which the object\'s information applies.\n\t */\n\tscope: string;\n\t/**\n\t * Sets or retrieves the width of the object.\n\t */\n\twidth: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTableCellElement: {\n\tprototype: HTMLTableCellElement;\n\tnew(): HTMLTableCellElement;\n};\n\ninterface HTMLTableColElement extends HTMLElement, HTMLTableAlignment {\n\t/**\n\t * Sets or retrieves the alignment of the object relative to the display or table.\n\t */\n\talign: string;\n\t/**\n\t * Sets or retrieves the number of columns in the group.\n\t */\n\tspan: number;\n\t/**\n\t * Sets or retrieves the width of the object.\n\t */\n\twidth: any;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTableColElement: {\n\tprototype: HTMLTableColElement;\n\tnew(): HTMLTableColElement;\n};\n\ninterface HTMLTableDataCellElement extends HTMLTableCellElement {\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTableDataCellElement: {\n\tprototype: HTMLTableDataCellElement;\n\tnew(): HTMLTableDataCellElement;\n};\n\ninterface HTMLTableElement extends HTMLElement {\n\t/**\n\t * Sets or retrieves a value that indicates the table alignment.\n\t */\n\talign: string;\n\tbgColor: any;\n\t/**\n\t * Sets or retrieves the width of the border to draw around the object.\n\t */\n\tborder: string;\n\t/**\n\t * Sets or retrieves the border color of the object.\n\t */\n\tborderColor: any;\n\t/**\n\t * Retrieves the caption object of a table.\n\t */\n\tcaption: HTMLTableCaptionElement;\n\t/**\n\t * Sets or retrieves the amount of space between the border of the cell and the content of the cell.\n\t */\n\tcellPadding: string;\n\t/**\n\t * Sets or retrieves the amount of space between cells in a table.\n\t */\n\tcellSpacing: string;\n\t/**\n\t * Sets or retrieves the number of columns in the table.\n\t */\n\tcols: number;\n\t/**\n\t * Sets or retrieves the way the border frame around the table is displayed.\n\t */\n\tframe: string;\n\t/**\n\t * Sets or retrieves the height of the object.\n\t */\n\theight: any;\n\t/**\n\t * Sets or retrieves the number of horizontal rows contained in the object.\n\t */\n\trows: HTMLCollectionOf<HTMLTableRowElement>;\n\t/**\n\t * Sets or retrieves which dividing lines (inner borders) are displayed.\n\t */\n\trules: string;\n\t/**\n\t * Sets or retrieves a description and/or structure of the object.\n\t */\n\tsummary: string;\n\t/**\n\t * Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.\n\t */\n\ttBodies: HTMLCollectionOf<HTMLTableSectionElement>;\n\t/**\n\t * Retrieves the tFoot object of the table.\n\t */\n\ttFoot: HTMLTableSectionElement;\n\t/**\n\t * Retrieves the tHead object of the table.\n\t */\n\ttHead: HTMLTableSectionElement;\n\t/**\n\t * Sets or retrieves the width of the object.\n\t */\n\twidth: string;\n\t/**\n\t * Creates an empty caption element in the table.\n\t */\n\tcreateCaption(): HTMLTableCaptionElement;\n\t/**\n\t * Creates an empty tBody element in the table.\n\t */\n\tcreateTBody(): HTMLTableSectionElement;\n\t/**\n\t * Creates an empty tFoot element in the table.\n\t */\n\tcreateTFoot(): HTMLTableSectionElement;\n\t/**\n\t * Returns the tHead element object if successful, or null otherwise.\n\t */\n\tcreateTHead(): HTMLTableSectionElement;\n\t/**\n\t * Deletes the caption element and its contents from the table.\n\t */\n\tdeleteCaption(): void;\n\t/**\n\t * Removes the specified row (tr) from the element and from the rows collection.\n\t * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\n\t */\n\tdeleteRow(index?: number): void;\n\t/**\n\t * Deletes the tFoot element and its contents from the table.\n\t */\n\tdeleteTFoot(): void;\n\t/**\n\t * Deletes the tHead element and its contents from the table.\n\t */\n\tdeleteTHead(): void;\n\t/**\n\t * Creates a new row (tr) in the table, and adds the row to the rows collection.\n\t * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\n\t */\n\tinsertRow(index?: number): HTMLTableRowElement;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTableElement: {\n\tprototype: HTMLTableElement;\n\tnew(): HTMLTableElement;\n};\n\ninterface HTMLTableHeaderCellElement extends HTMLTableCellElement {\n\t/**\n\t * Sets or retrieves the group of cells in a table to which the object\'s information applies.\n\t */\n\tscope: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTableHeaderCellElement: {\n\tprototype: HTMLTableHeaderCellElement;\n\tnew(): HTMLTableHeaderCellElement;\n};\n\ninterface HTMLTableRowElement extends HTMLElement, HTMLTableAlignment {\n\t/**\n\t * Sets or retrieves how the object is aligned with adjacent text.\n\t */\n\talign: string;\n\tbgColor: any;\n\t/**\n\t * Retrieves a collection of all cells in the table row.\n\t */\n\tcells: HTMLCollectionOf<HTMLTableDataCellElement | HTMLTableHeaderCellElement>;\n\t/**\n\t * Sets or retrieves the height of the object.\n\t */\n\theight: any;\n\t/**\n\t * Retrieves the position of the object in the rows collection for the table.\n\t */\n\treadonly rowIndex: number;\n\t/**\n\t * Retrieves the position of the object in the collection.\n\t */\n\treadonly sectionRowIndex: number;\n\t/**\n\t * Removes the specified cell from the table row, as well as from the cells collection.\n\t * @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.\n\t */\n\tdeleteCell(index?: number): void;\n\t/**\n\t * Creates a new cell in the table row, and adds the cell to the cells collection.\n\t * @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.\n\t */\n\tinsertCell(index?: number): HTMLTableDataCellElement;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTableRowElement: {\n\tprototype: HTMLTableRowElement;\n\tnew(): HTMLTableRowElement;\n};\n\ninterface HTMLTableSectionElement extends HTMLElement, HTMLTableAlignment {\n\t/**\n\t * Sets or retrieves a value that indicates the table alignment.\n\t */\n\talign: string;\n\t/**\n\t * Sets or retrieves the number of horizontal rows contained in the object.\n\t */\n\trows: HTMLCollectionOf<HTMLTableRowElement>;\n\t/**\n\t * Removes the specified row (tr) from the element and from the rows collection.\n\t * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\n\t */\n\tdeleteRow(index?: number): void;\n\t/**\n\t * Creates a new row (tr) in the table, and adds the row to the rows collection.\n\t * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\n\t */\n\tinsertRow(index?: number): HTMLTableRowElement;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTableSectionElement: {\n\tprototype: HTMLTableSectionElement;\n\tnew(): HTMLTableSectionElement;\n};\n\ninterface HTMLTemplateElement extends HTMLElement {\n\treadonly content: DocumentFragment;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTemplateElement: {\n\tprototype: HTMLTemplateElement;\n\tnew(): HTMLTemplateElement;\n};\n\ninterface HTMLTextAreaElement extends HTMLElement {\n\t/**\n\t * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\n\t */\n\tautofocus: boolean;\n\t/**\n\t * Sets or retrieves the width of the object.\n\t */\n\tcols: number;\n\t/**\n\t * Sets or retrieves the initial contents of the object.\n\t */\n\tdefaultValue: string;\n\tdisabled: boolean;\n\t/**\n\t * Retrieves a reference to the form that the object is embedded in.\n\t */\n\treadonly form: HTMLFormElement;\n\t/**\n\t * Sets or retrieves the maximum number of characters that the user can enter in a text control.\n\t */\n\tmaxLength: number;\n\t/**\n\t * Sets or retrieves the name of the object.\n\t */\n\tname: string;\n\t/**\n\t * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\n\t */\n\tplaceholder: string;\n\t/**\n\t * Sets or retrieves the value indicated whether the content of the object is read-only.\n\t */\n\treadOnly: boolean;\n\t/**\n\t * When present, marks an element that can\'t be submitted without a value.\n\t */\n\trequired: boolean;\n\t/**\n\t * Sets or retrieves the number of horizontal rows contained in the object.\n\t */\n\trows: number;\n\t/**\n\t * Gets or sets the end position or offset of a text selection.\n\t */\n\tselectionEnd: number;\n\t/**\n\t * Gets or sets the starting position or offset of a text selection.\n\t */\n\tselectionStart: number;\n\t/**\n\t * Sets or retrieves the value indicating whether the control is selected.\n\t */\n\tstatus: any;\n\t/**\n\t * Retrieves the type of control.\n\t */\n\treadonly type: string;\n\t/**\n\t * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.\n\t */\n\treadonly validationMessage: string;\n\t/**\n\t * Returns a  ValidityState object that represents the validity states of an element.\n\t */\n\treadonly validity: ValidityState;\n\t/**\n\t * Retrieves or sets the text in the entry field of the textArea element.\n\t */\n\tvalue: string;\n\t/**\n\t * Returns whether an element will successfully validate based on forms validation rules and constraints.\n\t */\n\treadonly willValidate: boolean;\n\t/**\n\t * Sets or retrieves how to handle wordwrapping in the object.\n\t */\n\twrap: string;\n\tminLength: number;\n\t/**\n\t * Returns whether a form will validate when it is submitted, without having to submit it.\n\t */\n\tcheckValidity(): boolean;\n\t/**\n\t * Highlights the input area of a form element.\n\t */\n\tselect(): void;\n\t/**\n\t * Sets a custom error message that is displayed when a form is submitted.\n\t * @param error Sets a custom error message that is displayed when a form is submitted.\n\t */\n\tsetCustomValidity(error: string): void;\n\t/**\n\t * Sets the start and end positions of a selection in a text field.\n\t * @param start The offset into the text field for the start of the selection.\n\t * @param end The offset into the text field for the end of the selection.\n\t */\n\tsetSelectionRange(start: number, end: number): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTextAreaElement: {\n\tprototype: HTMLTextAreaElement;\n\tnew(): HTMLTextAreaElement;\n};\n\ninterface HTMLTimeElement extends HTMLElement {\n\tdateTime: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTimeElement: {\n\tprototype: HTMLTimeElement;\n\tnew(): HTMLTimeElement;\n};\n\ninterface HTMLTitleElement extends HTMLElement {\n\t/**\n\t * Retrieves or sets the text of the object as a string.\n\t */\n\ttext: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTitleElement: {\n\tprototype: HTMLTitleElement;\n\tnew(): HTMLTitleElement;\n};\n\ninterface HTMLUListElement extends HTMLElement {\n\tcompact: boolean;\n\ttype: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLUListElement: {\n\tprototype: HTMLUListElement;\n\tnew(): HTMLUListElement;\n};\n\ninterface HTMLUnknownElement extends HTMLElement {\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLUnknownElement: {\n\tprototype: HTMLUnknownElement;\n\tnew(): HTMLUnknownElement;\n};\n\ninterface IDBCursor {\n\treadonly direction: IDBCursorDirection;\n\tkey: IDBKeyRange | IDBValidKey;\n\treadonly primaryKey: any;\n\tsource: IDBObjectStore | IDBIndex;\n\tadvance(count: number): void;\n\tcontinue(key?: IDBKeyRange | IDBValidKey): void;\n\tdelete(): IDBRequest;\n\tupdate(value: any): IDBRequest;\n\treadonly NEXT: string;\n\treadonly NEXT_NO_DUPLICATE: string;\n\treadonly PREV: string;\n\treadonly PREV_NO_DUPLICATE: string;\n}\n\ndeclare var IDBCursor: {\n\tprototype: IDBCursor;\n\tnew(): IDBCursor;\n\treadonly NEXT: string;\n\treadonly NEXT_NO_DUPLICATE: string;\n\treadonly PREV: string;\n\treadonly PREV_NO_DUPLICATE: string;\n};\n\ninterface IDBCursorWithValue extends IDBCursor {\n\treadonly value: any;\n}\n\ndeclare var IDBCursorWithValue: {\n\tprototype: IDBCursorWithValue;\n\tnew(): IDBCursorWithValue;\n};\n\ninterface IDBDatabaseEventMap {\n\t"abort": Event;\n\t"error": Event;\n}\n\ninterface IDBDatabase extends EventTarget {\n\treadonly name: string;\n\treadonly objectStoreNames: DOMStringList;\n\tonabort: (this: IDBDatabase, ev: Event) => any;\n\tonerror: (this: IDBDatabase, ev: Event) => any;\n\tversion: number;\n\tonversionchange: (ev: IDBVersionChangeEvent) => any;\n\tclose(): void;\n\tcreateObjectStore(name: string, optionalParameters?: IDBObjectStoreParameters): IDBObjectStore;\n\tdeleteObjectStore(name: string): void;\n\ttransaction(storeNames: string | string[], mode?: IDBTransactionMode): IDBTransaction;\n\taddEventListener(type: "versionchange", listener: (ev: IDBVersionChangeEvent) => any, useCapture?: boolean): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var IDBDatabase: {\n\tprototype: IDBDatabase;\n\tnew(): IDBDatabase;\n};\n\ninterface IDBFactory {\n\tcmp(first: any, second: any): number;\n\tdeleteDatabase(name: string): IDBOpenDBRequest;\n\topen(name: string, version?: number): IDBOpenDBRequest;\n}\n\ndeclare var IDBFactory: {\n\tprototype: IDBFactory;\n\tnew(): IDBFactory;\n};\n\ninterface IDBIndex {\n\tkeyPath: string | string[];\n\treadonly name: string;\n\treadonly objectStore: IDBObjectStore;\n\treadonly unique: boolean;\n\tmultiEntry: boolean;\n\tcount(key?: IDBKeyRange | IDBValidKey): IDBRequest;\n\tget(key: IDBKeyRange | IDBValidKey): IDBRequest;\n\tgetKey(key: IDBKeyRange | IDBValidKey): IDBRequest;\n\topenCursor(range?: IDBKeyRange | IDBValidKey, direction?: IDBCursorDirection): IDBRequest;\n\topenKeyCursor(range?: IDBKeyRange | IDBValidKey, direction?: IDBCursorDirection): IDBRequest;\n}\n\ndeclare var IDBIndex: {\n\tprototype: IDBIndex;\n\tnew(): IDBIndex;\n};\n\ninterface IDBKeyRange {\n\treadonly lower: any;\n\treadonly lowerOpen: boolean;\n\treadonly upper: any;\n\treadonly upperOpen: boolean;\n}\n\ndeclare var IDBKeyRange: {\n\tprototype: IDBKeyRange;\n\tnew(): IDBKeyRange;\n\tbound(lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean): IDBKeyRange;\n\tlowerBound(lower: any, open?: boolean): IDBKeyRange;\n\tonly(value: any): IDBKeyRange;\n\tupperBound(upper: any, open?: boolean): IDBKeyRange;\n};\n\ninterface IDBObjectStore {\n\treadonly indexNames: DOMStringList;\n\tkeyPath: string | string[];\n\treadonly name: string;\n\treadonly transaction: IDBTransaction;\n\tautoIncrement: boolean;\n\tadd(value: any, key?: IDBKeyRange | IDBValidKey): IDBRequest;\n\tclear(): IDBRequest;\n\tcount(key?: IDBKeyRange | IDBValidKey): IDBRequest;\n\tcreateIndex(name: string, keyPath: string | string[], optionalParameters?: IDBIndexParameters): IDBIndex;\n\tdelete(key: IDBKeyRange | IDBValidKey): IDBRequest;\n\tdeleteIndex(indexName: string): void;\n\tget(key: any): IDBRequest;\n\tindex(name: string): IDBIndex;\n\topenCursor(range?: IDBKeyRange | IDBValidKey, direction?: IDBCursorDirection): IDBRequest;\n\tput(value: any, key?: IDBKeyRange | IDBValidKey): IDBRequest;\n}\n\ndeclare var IDBObjectStore: {\n\tprototype: IDBObjectStore;\n\tnew(): IDBObjectStore;\n};\n\ninterface IDBOpenDBRequestEventMap extends IDBRequestEventMap {\n\t"blocked": Event;\n\t"upgradeneeded": IDBVersionChangeEvent;\n}\n\ninterface IDBOpenDBRequest extends IDBRequest {\n\tonblocked: (this: IDBOpenDBRequest, ev: Event) => any;\n\tonupgradeneeded: (this: IDBOpenDBRequest, ev: IDBVersionChangeEvent) => any;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var IDBOpenDBRequest: {\n\tprototype: IDBOpenDBRequest;\n\tnew(): IDBOpenDBRequest;\n};\n\ninterface IDBRequestEventMap {\n\t"error": Event;\n\t"success": Event;\n}\n\ninterface IDBRequest extends EventTarget {\n\treadonly error: DOMException;\n\tonerror: (this: IDBRequest, ev: Event) => any;\n\tonsuccess: (this: IDBRequest, ev: Event) => any;\n\treadonly readyState: IDBRequestReadyState;\n\treadonly result: any;\n\tsource: IDBObjectStore | IDBIndex | IDBCursor;\n\treadonly transaction: IDBTransaction;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var IDBRequest: {\n\tprototype: IDBRequest;\n\tnew(): IDBRequest;\n};\n\ninterface IDBTransactionEventMap {\n\t"abort": Event;\n\t"complete": Event;\n\t"error": Event;\n}\n\ninterface IDBTransaction extends EventTarget {\n\treadonly db: IDBDatabase;\n\treadonly error: DOMException;\n\treadonly mode: IDBTransactionMode;\n\tonabort: (this: IDBTransaction, ev: Event) => any;\n\toncomplete: (this: IDBTransaction, ev: Event) => any;\n\tonerror: (this: IDBTransaction, ev: Event) => any;\n\tabort(): void;\n\tobjectStore(name: string): IDBObjectStore;\n\treadonly READ_ONLY: string;\n\treadonly READ_WRITE: string;\n\treadonly VERSION_CHANGE: string;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var IDBTransaction: {\n\tprototype: IDBTransaction;\n\tnew(): IDBTransaction;\n\treadonly READ_ONLY: string;\n\treadonly READ_WRITE: string;\n\treadonly VERSION_CHANGE: string;\n};\n\ninterface IDBVersionChangeEvent extends Event {\n\treadonly newVersion: number | null;\n\treadonly oldVersion: number;\n}\n\ndeclare var IDBVersionChangeEvent: {\n\tprototype: IDBVersionChangeEvent;\n\tnew(): IDBVersionChangeEvent;\n};\n\ninterface ImageData {\n\tdata: Uint8ClampedArray;\n\treadonly height: number;\n\treadonly width: number;\n}\n\ndeclare var ImageData: {\n\tprototype: ImageData;\n\tnew(width: number, height: number): ImageData;\n\tnew(array: Uint8ClampedArray, width: number, height: number): ImageData;\n};\n\ninterface IntersectionObserver {\n\treadonly root: Element | null;\n\treadonly rootMargin: string;\n\treadonly thresholds: number[];\n\tdisconnect(): void;\n\tobserve(target: Element): void;\n\ttakeRecords(): IntersectionObserverEntry[];\n\tunobserve(target: Element): void;\n}\n\ndeclare var IntersectionObserver: {\n\tprototype: IntersectionObserver;\n\tnew(callback: IntersectionObserverCallback, options?: IntersectionObserverInit): IntersectionObserver;\n};\n\ninterface IntersectionObserverEntry {\n\treadonly boundingClientRect: ClientRect;\n\treadonly intersectionRatio: number;\n\treadonly intersectionRect: ClientRect;\n\treadonly rootBounds: ClientRect;\n\treadonly target: Element;\n\treadonly time: number;\n}\n\ndeclare var IntersectionObserverEntry: {\n\tprototype: IntersectionObserverEntry;\n\tnew(intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry;\n};\n\ninterface KeyboardEvent extends UIEvent {\n\treadonly altKey: boolean;\n\treadonly char: string | null;\n\treadonly charCode: number;\n\treadonly ctrlKey: boolean;\n\treadonly key: string;\n\treadonly keyCode: number;\n\treadonly locale: string;\n\treadonly location: number;\n\treadonly metaKey: boolean;\n\treadonly repeat: boolean;\n\treadonly shiftKey: boolean;\n\treadonly which: number;\n\treadonly code: string;\n\tgetModifierState(keyArg: string): boolean;\n\tinitKeyboardEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, keyArg: string, locationArg: number, modifiersListArg: string, repeat: boolean, locale: string): void;\n\treadonly DOM_KEY_LOCATION_JOYSTICK: number;\n\treadonly DOM_KEY_LOCATION_LEFT: number;\n\treadonly DOM_KEY_LOCATION_MOBILE: number;\n\treadonly DOM_KEY_LOCATION_NUMPAD: number;\n\treadonly DOM_KEY_LOCATION_RIGHT: number;\n\treadonly DOM_KEY_LOCATION_STANDARD: number;\n}\n\ndeclare var KeyboardEvent: {\n\tprototype: KeyboardEvent;\n\tnew(typeArg: string, eventInitDict?: KeyboardEventInit): KeyboardEvent;\n\treadonly DOM_KEY_LOCATION_JOYSTICK: number;\n\treadonly DOM_KEY_LOCATION_LEFT: number;\n\treadonly DOM_KEY_LOCATION_MOBILE: number;\n\treadonly DOM_KEY_LOCATION_NUMPAD: number;\n\treadonly DOM_KEY_LOCATION_RIGHT: number;\n\treadonly DOM_KEY_LOCATION_STANDARD: number;\n};\n\ninterface ListeningStateChangedEvent extends Event {\n\treadonly label: string;\n\treadonly state: ListeningState;\n}\n\ndeclare var ListeningStateChangedEvent: {\n\tprototype: ListeningStateChangedEvent;\n\tnew(): ListeningStateChangedEvent;\n};\n\ninterface Location {\n\thash: string;\n\thost: string;\n\thostname: string;\n\thref: string;\n\treadonly origin: string;\n\tpathname: string;\n\tport: string;\n\tprotocol: string;\n\tsearch: string;\n\tassign(url: string): void;\n\treload(forcedReload?: boolean): void;\n\treplace(url: string): void;\n\ttoString(): string;\n}\n\ndeclare var Location: {\n\tprototype: Location;\n\tnew(): Location;\n};\n\ninterface LongRunningScriptDetectedEvent extends Event {\n\treadonly executionTime: number;\n\tstopPageScriptExecution: boolean;\n}\n\ndeclare var LongRunningScriptDetectedEvent: {\n\tprototype: LongRunningScriptDetectedEvent;\n\tnew(): LongRunningScriptDetectedEvent;\n};\n\ninterface MediaList {\n\treadonly length: number;\n\tmediaText: string;\n\tappendMedium(newMedium: string): void;\n\tdeleteMedium(oldMedium: string): void;\n\titem(index: number): string;\n\ttoString(): string;\n\t[index: number]: string;\n}\n\ndeclare var MediaList: {\n\tprototype: MediaList;\n\tnew(): MediaList;\n};\n\ninterface MediaQueryList {\n\treadonly matches: boolean;\n\treadonly media: string;\n\taddListener(listener: MediaQueryListListener): void;\n\tremoveListener(listener: MediaQueryListListener): void;\n}\n\ndeclare var MediaQueryList: {\n\tprototype: MediaQueryList;\n\tnew(): MediaQueryList;\n};\n\ninterface MessageEvent extends Event {\n\treadonly data: any;\n\treadonly origin: string;\n\treadonly ports: any;\n\treadonly source: Window;\n\tinitMessageEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, dataArg: any, originArg: string, lastEventIdArg: string, sourceArg: Window): void;\n}\n\ndeclare var MessageEvent: {\n\tprototype: MessageEvent;\n\tnew(type: string, eventInitDict?: MessageEventInit): MessageEvent;\n};\n\ninterface MessagePortEventMap {\n\t"message": MessageEvent;\n}\n\ninterface MessagePort extends EventTarget {\n\tonmessage: (this: MessagePort, ev: MessageEvent) => any;\n\tclose(): void;\n\tpostMessage(message?: any, transfer?: any[]): void;\n\tstart(): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var MessagePort: {\n\tprototype: MessagePort;\n\tnew(): MessagePort;\n};\n\ninterface MimeType {\n\treadonly description: string;\n\treadonly enabledPlugin: Plugin;\n\treadonly suffixes: string;\n\treadonly type: string;\n}\n\ndeclare var MimeType: {\n\tprototype: MimeType;\n\tnew(): MimeType;\n};\n\ninterface MimeTypeArray {\n\treadonly length: number;\n\titem(index: number): Plugin;\n\tnamedItem(type: string): Plugin;\n\t[index: number]: Plugin;\n}\n\ndeclare var MimeTypeArray: {\n\tprototype: MimeTypeArray;\n\tnew(): MimeTypeArray;\n};\n\ninterface MouseEvent extends UIEvent {\n\treadonly altKey: boolean;\n\treadonly button: number;\n\treadonly buttons: number;\n\treadonly clientX: number;\n\treadonly clientY: number;\n\treadonly ctrlKey: boolean;\n\treadonly fromElement: Element;\n\treadonly layerX: number;\n\treadonly layerY: number;\n\treadonly metaKey: boolean;\n\treadonly movementX: number;\n\treadonly movementY: number;\n\treadonly offsetX: number;\n\treadonly offsetY: number;\n\treadonly pageX: number;\n\treadonly pageY: number;\n\treadonly relatedTarget: EventTarget;\n\treadonly screenX: number;\n\treadonly screenY: number;\n\treadonly shiftKey: boolean;\n\treadonly toElement: Element;\n\treadonly which: number;\n\treadonly x: number;\n\treadonly y: number;\n\tgetModifierState(keyArg: string): boolean;\n\tinitMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget | null): void;\n}\n\ndeclare var MouseEvent: {\n\tprototype: MouseEvent;\n\tnew(typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\n};\n\ninterface MutationEvent extends Event {\n\treadonly attrChange: number;\n\treadonly attrName: string;\n\treadonly newValue: string;\n\treadonly prevValue: string;\n\treadonly relatedNode: Node;\n\tinitMutationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, relatedNodeArg: Node, prevValueArg: string, newValueArg: string, attrNameArg: string, attrChangeArg: number): void;\n\treadonly ADDITION: number;\n\treadonly MODIFICATION: number;\n\treadonly REMOVAL: number;\n}\n\ndeclare var MutationEvent: {\n\tprototype: MutationEvent;\n\tnew(): MutationEvent;\n\treadonly ADDITION: number;\n\treadonly MODIFICATION: number;\n\treadonly REMOVAL: number;\n};\n\ninterface MutationObserver {\n\tdisconnect(): void;\n\tobserve(target: Node, options: MutationObserverInit): void;\n\ttakeRecords(): MutationRecord[];\n}\n\ndeclare var MutationObserver: {\n\tprototype: MutationObserver;\n\tnew(callback: MutationCallback): MutationObserver;\n};\n\ninterface MutationRecord {\n\treadonly addedNodes: NodeList;\n\treadonly attributeName: string | null;\n\treadonly attributeNamespace: string | null;\n\treadonly nextSibling: Node | null;\n\treadonly oldValue: string | null;\n\treadonly previousSibling: Node | null;\n\treadonly removedNodes: NodeList;\n\treadonly target: Node;\n\treadonly type: string;\n}\n\ndeclare var MutationRecord: {\n\tprototype: MutationRecord;\n\tnew(): MutationRecord;\n};\n\ninterface NamedNodeMap {\n\treadonly length: number;\n\tgetNamedItem(name: string): Attr;\n\tgetNamedItemNS(namespaceURI: string | null, localName: string | null): Attr;\n\titem(index: number): Attr;\n\tremoveNamedItem(name: string): Attr;\n\tremoveNamedItemNS(namespaceURI: string | null, localName: string | null): Attr;\n\tsetNamedItem(arg: Attr): Attr;\n\tsetNamedItemNS(arg: Attr): Attr;\n\t[index: number]: Attr;\n}\n\ndeclare var NamedNodeMap: {\n\tprototype: NamedNodeMap;\n\tnew(): NamedNodeMap;\n};\n\ninterface NavigationCompletedEvent extends NavigationEvent {\n\treadonly isSuccess: boolean;\n\treadonly webErrorStatus: number;\n}\n\ndeclare var NavigationCompletedEvent: {\n\tprototype: NavigationCompletedEvent;\n\tnew(): NavigationCompletedEvent;\n};\n\ninterface NavigationEvent extends Event {\n\treadonly uri: string;\n}\n\ndeclare var NavigationEvent: {\n\tprototype: NavigationEvent;\n\tnew(): NavigationEvent;\n};\n\ninterface NavigationEventWithReferrer extends NavigationEvent {\n\treadonly referer: string;\n}\n\ndeclare var NavigationEventWithReferrer: {\n\tprototype: NavigationEventWithReferrer;\n\tnew(): NavigationEventWithReferrer;\n};\n\ninterface Navigator extends Object, NavigatorID, NavigatorOnLine, NavigatorContentUtils, NavigatorStorageUtils, NavigatorGeolocation, NavigatorBeacon, NavigatorConcurrentHardware {\n\treadonly cookieEnabled: boolean;\n\tgamepadInputEmulation: GamepadInputEmulationType;\n\treadonly language: string;\n\treadonly maxTouchPoints: number;\n\treadonly mimeTypes: MimeTypeArray;\n\t\n\t\n\t\n\treadonly plugins: PluginArray;\n\treadonly pointerEnabled: boolean;\n\treadonly serviceWorker: ServiceWorkerContainer;\n\treadonly webdriver: boolean;\n\treadonly hardwareConcurrency: number;\n\treadonly languages: string[];\n\tgetGamepads(): Gamepad[];\n\tjavaEnabled(): boolean;\n\tvibrate(pattern: number | number[]): boolean;\n}\n\ndeclare var Navigator: {\n\tprototype: Navigator;\n\tnew(): Navigator;\n};\n\ninterface Node extends EventTarget {\n\treadonly attributes: NamedNodeMap;\n\treadonly baseURI: string | null;\n\treadonly childNodes: NodeList;\n\treadonly firstChild: Node | null;\n\treadonly lastChild: Node | null;\n\treadonly localName: string | null;\n\treadonly namespaceURI: string | null;\n\treadonly nextSibling: Node | null;\n\treadonly nodeName: string;\n\treadonly nodeType: number;\n\tnodeValue: string | null;\n\treadonly ownerDocument: Document;\n\treadonly parentElement: HTMLElement | null;\n\treadonly parentNode: Node | null;\n\treadonly previousSibling: Node | null;\n\ttextContent: string | null;\n\tappendChild<T extends Node>(newChild: T): T;\n\tcloneNode(deep?: boolean): Node;\n\tcompareDocumentPosition(other: Node): number;\n\tcontains(child: Node): boolean;\n\thasAttributes(): boolean;\n\thasChildNodes(): boolean;\n\tinsertBefore<T extends Node>(newChild: T, refChild: Node | null): T;\n\tisDefaultNamespace(namespaceURI: string | null): boolean;\n\tisEqualNode(arg: Node): boolean;\n\tisSameNode(other: Node): boolean;\n\tlookupNamespaceURI(prefix: string | null): string | null;\n\tlookupPrefix(namespaceURI: string | null): string | null;\n\tnormalize(): void;\n\tremoveChild<T extends Node>(oldChild: T): T;\n\treplaceChild<T extends Node>(newChild: Node, oldChild: T): T;\n\treadonly ATTRIBUTE_NODE: number;\n\treadonly CDATA_SECTION_NODE: number;\n\treadonly COMMENT_NODE: number;\n\treadonly DOCUMENT_FRAGMENT_NODE: number;\n\treadonly DOCUMENT_NODE: number;\n\treadonly DOCUMENT_POSITION_CONTAINED_BY: number;\n\treadonly DOCUMENT_POSITION_CONTAINS: number;\n\treadonly DOCUMENT_POSITION_DISCONNECTED: number;\n\treadonly DOCUMENT_POSITION_FOLLOWING: number;\n\treadonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\n\treadonly DOCUMENT_POSITION_PRECEDING: number;\n\treadonly DOCUMENT_TYPE_NODE: number;\n\treadonly ELEMENT_NODE: number;\n\treadonly ENTITY_NODE: number;\n\treadonly ENTITY_REFERENCE_NODE: number;\n\treadonly NOTATION_NODE: number;\n\treadonly PROCESSING_INSTRUCTION_NODE: number;\n\treadonly TEXT_NODE: number;\n}\n\ndeclare var Node: {\n\tprototype: Node;\n\tnew(): Node;\n\treadonly ATTRIBUTE_NODE: number;\n\treadonly CDATA_SECTION_NODE: number;\n\treadonly COMMENT_NODE: number;\n\treadonly DOCUMENT_FRAGMENT_NODE: number;\n\treadonly DOCUMENT_NODE: number;\n\treadonly DOCUMENT_POSITION_CONTAINED_BY: number;\n\treadonly DOCUMENT_POSITION_CONTAINS: number;\n\treadonly DOCUMENT_POSITION_DISCONNECTED: number;\n\treadonly DOCUMENT_POSITION_FOLLOWING: number;\n\treadonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\n\treadonly DOCUMENT_POSITION_PRECEDING: number;\n\treadonly DOCUMENT_TYPE_NODE: number;\n\treadonly ELEMENT_NODE: number;\n\treadonly ENTITY_NODE: number;\n\treadonly ENTITY_REFERENCE_NODE: number;\n\treadonly NOTATION_NODE: number;\n\treadonly PROCESSING_INSTRUCTION_NODE: number;\n\treadonly TEXT_NODE: number;\n};\n\ninterface NodeFilter {\n\tacceptNode(n: Node): number;\n}\n\ndeclare var NodeFilter: {\n\treadonly FILTER_ACCEPT: number;\n\treadonly FILTER_REJECT: number;\n\treadonly FILTER_SKIP: number;\n\treadonly SHOW_ALL: number;\n\treadonly SHOW_ATTRIBUTE: number;\n\treadonly SHOW_CDATA_SECTION: number;\n\treadonly SHOW_COMMENT: number;\n\treadonly SHOW_DOCUMENT: number;\n\treadonly SHOW_DOCUMENT_FRAGMENT: number;\n\treadonly SHOW_DOCUMENT_TYPE: number;\n\treadonly SHOW_ELEMENT: number;\n\treadonly SHOW_ENTITY: number;\n\treadonly SHOW_ENTITY_REFERENCE: number;\n\treadonly SHOW_NOTATION: number;\n\treadonly SHOW_PROCESSING_INSTRUCTION: number;\n\treadonly SHOW_TEXT: number;\n};\n\ninterface NodeIterator {\n\treadonly expandEntityReferences: boolean;\n\treadonly filter: NodeFilter;\n\treadonly root: Node;\n\treadonly whatToShow: number;\n\tdetach(): void;\n\tnextNode(): Node;\n\tpreviousNode(): Node;\n}\n\ndeclare var NodeIterator: {\n\tprototype: NodeIterator;\n\tnew(): NodeIterator;\n};\n\ninterface NodeList {\n\treadonly length: number;\n\titem(index: number): Node;\n\t[index: number]: Node;\n}\n\ndeclare var NodeList: {\n\tprototype: NodeList;\n\tnew(): NodeList;\n};\n\ninterface NotificationEventMap {\n\t"click": Event;\n\t"close": Event;\n\t"error": Event;\n\t"show": Event;\n}\n\ninterface Notification extends EventTarget {\n\treadonly body: string;\n\treadonly dir: NotificationDirection;\n\treadonly icon: string;\n\treadonly lang: string;\n\tonclick: (this: Notification, ev: Event) => any;\n\tonclose: (this: Notification, ev: Event) => any;\n\tonerror: (this: Notification, ev: Event) => any;\n\tonshow: (this: Notification, ev: Event) => any;\n\treadonly permission: NotificationPermission;\n\treadonly tag: string;\n\treadonly title: string;\n\tclose(): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var Notification: {\n\tprototype: Notification;\n\tnew(title: string, options?: NotificationOptions): Notification;\n\trequestPermission(callback?: NotificationPermissionCallback): Promise<NotificationPermission>;\n};\n\ninterface OES_element_index_uint {\n}\n\ndeclare var OES_element_index_uint: {\n\tprototype: OES_element_index_uint;\n\tnew(): OES_element_index_uint;\n};\n\ninterface OES_standard_derivatives {\n\treadonly FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number;\n}\n\ndeclare var OES_standard_derivatives: {\n\tprototype: OES_standard_derivatives;\n\tnew(): OES_standard_derivatives;\n\treadonly FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number;\n};\n\ninterface OES_texture_float {\n}\n\ndeclare var OES_texture_float: {\n\tprototype: OES_texture_float;\n\tnew(): OES_texture_float;\n};\n\ninterface OES_texture_float_linear {\n}\n\ndeclare var OES_texture_float_linear: {\n\tprototype: OES_texture_float_linear;\n\tnew(): OES_texture_float_linear;\n};\n\ninterface OES_texture_half_float {\n\treadonly HALF_FLOAT_OES: number;\n}\n\ndeclare var OES_texture_half_float: {\n\tprototype: OES_texture_half_float;\n\tnew(): OES_texture_half_float;\n\treadonly HALF_FLOAT_OES: number;\n};\n\ninterface OES_texture_half_float_linear {\n}\n\ndeclare var OES_texture_half_float_linear: {\n\tprototype: OES_texture_half_float_linear;\n\tnew(): OES_texture_half_float_linear;\n};\n\ninterface OverflowEvent extends UIEvent {\n\treadonly horizontalOverflow: boolean;\n\treadonly orient: number;\n\treadonly verticalOverflow: boolean;\n\treadonly BOTH: number;\n\treadonly HORIZONTAL: number;\n\treadonly VERTICAL: number;\n}\n\ndeclare var OverflowEvent: {\n\tprototype: OverflowEvent;\n\tnew(): OverflowEvent;\n\treadonly BOTH: number;\n\treadonly HORIZONTAL: number;\n\treadonly VERTICAL: number;\n};\n\ninterface PageTransitionEvent extends Event {\n\treadonly persisted: boolean;\n}\n\ndeclare var PageTransitionEvent: {\n\tprototype: PageTransitionEvent;\n\tnew(): PageTransitionEvent;\n};\n\ninterface Path2D extends Object, CanvasPathMethods {\n}\n\ndeclare var Path2D: {\n\tprototype: Path2D;\n\tnew(path?: Path2D): Path2D;\n};\n\ninterface PaymentAddress {\n\treadonly addressLine: string[];\n\treadonly city: string;\n\treadonly country: string;\n\treadonly dependentLocality: string;\n\treadonly languageCode: string;\n\treadonly organization: string;\n\treadonly phone: string;\n\treadonly postalCode: string;\n\treadonly recipient: string;\n\treadonly region: string;\n\treadonly sortingCode: string;\n\ttoJSON(): any;\n}\n\ndeclare var PaymentAddress: {\n\tprototype: PaymentAddress;\n\tnew(): PaymentAddress;\n};\n\ninterface PaymentRequestEventMap {\n\t"shippingaddresschange": Event;\n\t"shippingoptionchange": Event;\n}\n\ninterface PaymentRequest extends EventTarget {\n\tonshippingaddresschange: (this: PaymentRequest, ev: Event) => any;\n\tonshippingoptionchange: (this: PaymentRequest, ev: Event) => any;\n\treadonly shippingAddress: PaymentAddress | null;\n\treadonly shippingOption: string | null;\n\treadonly shippingType: PaymentShippingType | null;\n\tabort(): Promise<void>;\n\tshow(): Promise<PaymentResponse>;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var PaymentRequest: {\n\tprototype: PaymentRequest;\n\tnew(methodData: PaymentMethodData[], details: PaymentDetails, options?: PaymentOptions): PaymentRequest;\n};\n\ninterface PaymentRequestUpdateEvent extends Event {\n\tupdateWith(d: Promise<PaymentDetails>): void;\n}\n\ndeclare var PaymentRequestUpdateEvent: {\n\tprototype: PaymentRequestUpdateEvent;\n\tnew(type: string, eventInitDict?: PaymentRequestUpdateEventInit): PaymentRequestUpdateEvent;\n};\n\ninterface PaymentResponse {\n\treadonly details: any;\n\treadonly methodName: string;\n\treadonly payerEmail: string | null;\n\treadonly payerName: string | null;\n\treadonly payerPhone: string | null;\n\treadonly shippingAddress: PaymentAddress | null;\n\treadonly shippingOption: string | null;\n\tcomplete(result?: PaymentComplete): Promise<void>;\n\ttoJSON(): any;\n}\n\ndeclare var PaymentResponse: {\n\tprototype: PaymentResponse;\n\tnew(): PaymentResponse;\n};\n\ninterface Performance {\n\treadonly navigation: PerformanceNavigation;\n\treadonly timing: PerformanceTiming;\n\tclearMarks(markName?: string): void;\n\tclearMeasures(measureName?: string): void;\n\tclearResourceTimings(): void;\n\tgetEntries(): any;\n\tgetEntriesByName(name: string, entryType?: string): any;\n\tgetEntriesByType(entryType: string): any;\n\tgetMarks(markName?: string): any;\n\tgetMeasures(measureName?: string): any;\n\tmark(markName: string): void;\n\tmeasure(measureName: string, startMarkName?: string, endMarkName?: string): void;\n\tnow(): number;\n\tsetResourceTimingBufferSize(maxSize: number): void;\n\ttoJSON(): any;\n}\n\ndeclare var Performance: {\n\tprototype: Performance;\n\tnew(): Performance;\n};\n\ninterface PerformanceEntry {\n\treadonly duration: number;\n\treadonly entryType: string;\n\treadonly name: string;\n\treadonly startTime: number;\n}\n\ndeclare var PerformanceEntry: {\n\tprototype: PerformanceEntry;\n\tnew(): PerformanceEntry;\n};\n\ninterface PerformanceMark extends PerformanceEntry {\n}\n\ndeclare var PerformanceMark: {\n\tprototype: PerformanceMark;\n\tnew(): PerformanceMark;\n};\n\ninterface PerformanceMeasure extends PerformanceEntry {\n}\n\ndeclare var PerformanceMeasure: {\n\tprototype: PerformanceMeasure;\n\tnew(): PerformanceMeasure;\n};\n\ninterface PerformanceNavigation {\n\treadonly redirectCount: number;\n\treadonly type: number;\n\ttoJSON(): any;\n\treadonly TYPE_BACK_FORWARD: number;\n\treadonly TYPE_NAVIGATE: number;\n\treadonly TYPE_RELOAD: number;\n\treadonly TYPE_RESERVED: number;\n}\n\ndeclare var PerformanceNavigation: {\n\tprototype: PerformanceNavigation;\n\tnew(): PerformanceNavigation;\n\treadonly TYPE_BACK_FORWARD: number;\n\treadonly TYPE_NAVIGATE: number;\n\treadonly TYPE_RELOAD: number;\n\treadonly TYPE_RESERVED: number;\n};\n\ninterface PerformanceNavigationTiming extends PerformanceEntry {\n\treadonly connectEnd: number;\n\treadonly connectStart: number;\n\treadonly domainLookupEnd: number;\n\treadonly domainLookupStart: number;\n\treadonly domComplete: number;\n\treadonly domContentLoadedEventEnd: number;\n\treadonly domContentLoadedEventStart: number;\n\treadonly domInteractive: number;\n\treadonly domLoading: number;\n\treadonly fetchStart: number;\n\treadonly loadEventEnd: number;\n\treadonly loadEventStart: number;\n\treadonly navigationStart: number;\n\treadonly redirectCount: number;\n\treadonly redirectEnd: number;\n\treadonly redirectStart: number;\n\treadonly requestStart: number;\n\treadonly responseEnd: number;\n\treadonly responseStart: number;\n\treadonly type: NavigationType;\n\treadonly unloadEventEnd: number;\n\treadonly unloadEventStart: number;\n}\n\ndeclare var PerformanceNavigationTiming: {\n\tprototype: PerformanceNavigationTiming;\n\tnew(): PerformanceNavigationTiming;\n};\n\ninterface PerformanceResourceTiming extends PerformanceEntry {\n\treadonly connectEnd: number;\n\treadonly connectStart: number;\n\treadonly domainLookupEnd: number;\n\treadonly domainLookupStart: number;\n\treadonly fetchStart: number;\n\treadonly initiatorType: string;\n\treadonly redirectEnd: number;\n\treadonly redirectStart: number;\n\treadonly requestStart: number;\n\treadonly responseEnd: number;\n\treadonly responseStart: number;\n}\n\ndeclare var PerformanceResourceTiming: {\n\tprototype: PerformanceResourceTiming;\n\tnew(): PerformanceResourceTiming;\n};\n\ninterface PerformanceTiming {\n\treadonly connectEnd: number;\n\treadonly connectStart: number;\n\treadonly domainLookupEnd: number;\n\treadonly domainLookupStart: number;\n\treadonly domComplete: number;\n\treadonly domContentLoadedEventEnd: number;\n\treadonly domContentLoadedEventStart: number;\n\treadonly domInteractive: number;\n\treadonly domLoading: number;\n\treadonly fetchStart: number;\n\treadonly loadEventEnd: number;\n\treadonly loadEventStart: number;\n\t\n\treadonly navigationStart: number;\n\treadonly redirectEnd: number;\n\treadonly redirectStart: number;\n\treadonly requestStart: number;\n\treadonly responseEnd: number;\n\treadonly responseStart: number;\n\treadonly unloadEventEnd: number;\n\treadonly unloadEventStart: number;\n\treadonly secureConnectionStart: number;\n\ttoJSON(): any;\n}\n\ndeclare var PerformanceTiming: {\n\tprototype: PerformanceTiming;\n\tnew(): PerformanceTiming;\n};\n\ninterface PeriodicWave {\n}\n\ndeclare var PeriodicWave: {\n\tprototype: PeriodicWave;\n\tnew(): PeriodicWave;\n};\n\ninterface PermissionRequest extends DeferredPermissionRequest {\n\tdefer(): void;\n}\n\ndeclare var PermissionRequest: {\n\tprototype: PermissionRequest;\n\tnew(): PermissionRequest;\n};\n\ninterface PermissionRequestedEvent extends Event {\n\treadonly permissionRequest: PermissionRequest;\n}\n\ndeclare var PermissionRequestedEvent: {\n\tprototype: PermissionRequestedEvent;\n\tnew(): PermissionRequestedEvent;\n};\n\ninterface Plugin {\n\treadonly description: string;\n\treadonly filename: string;\n\treadonly length: number;\n\treadonly name: string;\n\treadonly version: string;\n\titem(index: number): MimeType;\n\tnamedItem(type: string): MimeType;\n\t[index: number]: MimeType;\n}\n\ndeclare var Plugin: {\n\tprototype: Plugin;\n\tnew(): Plugin;\n};\n\ninterface PluginArray {\n\treadonly length: number;\n\titem(index: number): Plugin;\n\tnamedItem(name: string): Plugin;\n\trefresh(reload?: boolean): void;\n\t[index: number]: Plugin;\n}\n\ndeclare var PluginArray: {\n\tprototype: PluginArray;\n\tnew(): PluginArray;\n};\n\ninterface PointerEvent extends MouseEvent {\n\treadonly currentPoint: any;\n\treadonly height: number;\n\treadonly hwTimestamp: number;\n\treadonly intermediatePoints: any;\n\treadonly isPrimary: boolean;\n\treadonly pointerId: number;\n\treadonly pointerType: any;\n\treadonly pressure: number;\n\treadonly rotation: number;\n\treadonly tiltX: number;\n\treadonly tiltY: number;\n\treadonly width: number;\n\tgetCurrentPoint(element: Element): void;\n\tgetIntermediatePoints(element: Element): void;\n\tinitPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;\n}\n\ndeclare var PointerEvent: {\n\tprototype: PointerEvent;\n\tnew(typeArg: string, eventInitDict?: PointerEventInit): PointerEvent;\n};\n\ninterface PopStateEvent extends Event {\n\treadonly state: any;\n\tinitPopStateEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, stateArg: any): void;\n}\n\ndeclare var PopStateEvent: {\n\tprototype: PopStateEvent;\n\tnew(typeArg: string, eventInitDict?: PopStateEventInit): PopStateEvent;\n};\n\ninterface Position {\n\treadonly coords: Coordinates;\n\treadonly timestamp: number;\n}\n\ndeclare var Position: {\n\tprototype: Position;\n\tnew(): Position;\n};\n\ninterface PositionError {\n\treadonly code: number;\n\treadonly message: string;\n\ttoString(): string;\n\treadonly PERMISSION_DENIED: number;\n\treadonly POSITION_UNAVAILABLE: number;\n\treadonly TIMEOUT: number;\n}\n\ndeclare var PositionError: {\n\tprototype: PositionError;\n\tnew(): PositionError;\n\treadonly PERMISSION_DENIED: number;\n\treadonly POSITION_UNAVAILABLE: number;\n\treadonly TIMEOUT: number;\n};\n\ninterface ProcessingInstruction extends CharacterData {\n\treadonly target: string;\n}\n\ndeclare var ProcessingInstruction: {\n\tprototype: ProcessingInstruction;\n\tnew(): ProcessingInstruction;\n};\n\ninterface ProgressEvent extends Event {\n\treadonly lengthComputable: boolean;\n\treadonly loaded: number;\n\treadonly total: number;\n\tinitProgressEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, lengthComputableArg: boolean, loadedArg: number, totalArg: number): void;\n}\n\ndeclare var ProgressEvent: {\n\tprototype: ProgressEvent;\n\tnew(type: string, eventInitDict?: ProgressEventInit): ProgressEvent;\n};\n\ninterface PushManager {\n\tgetSubscription(): Promise<PushSubscription>;\n\tpermissionState(options?: PushSubscriptionOptionsInit): Promise<PushPermissionState>;\n\tsubscribe(options?: PushSubscriptionOptionsInit): Promise<PushSubscription>;\n}\n\ndeclare var PushManager: {\n\tprototype: PushManager;\n\tnew(): PushManager;\n};\n\ninterface PushSubscription {\n\treadonly endpoint: USVString;\n\treadonly options: PushSubscriptionOptions;\n\tgetKey(name: PushEncryptionKeyName): ArrayBuffer | null;\n\ttoJSON(): any;\n\tunsubscribe(): Promise<boolean>;\n}\n\ndeclare var PushSubscription: {\n\tprototype: PushSubscription;\n\tnew(): PushSubscription;\n};\n\ninterface PushSubscriptionOptions {\n\treadonly applicationServerKey: ArrayBuffer | null;\n\treadonly userVisibleOnly: boolean;\n}\n\ndeclare var PushSubscriptionOptions: {\n\tprototype: PushSubscriptionOptions;\n\tnew(): PushSubscriptionOptions;\n};\n\ninterface Range {\n\treadonly collapsed: boolean;\n\treadonly commonAncestorContainer: Node;\n\treadonly endContainer: Node;\n\treadonly endOffset: number;\n\treadonly startContainer: Node;\n\treadonly startOffset: number;\n\tcloneContents(): DocumentFragment;\n\tcloneRange(): Range;\n\tcollapse(toStart: boolean): void;\n\tcompareBoundaryPoints(how: number, sourceRange: Range): number;\n\tcreateContextualFragment(fragment: string): DocumentFragment;\n\tdeleteContents(): void;\n\tdetach(): void;\n\texpand(Unit: ExpandGranularity): boolean;\n\textractContents(): DocumentFragment;\n\tgetBoundingClientRect(): ClientRect;\n\tgetClientRects(): ClientRectList;\n\tinsertNode(newNode: Node): void;\n\tselectNode(refNode: Node): void;\n\tselectNodeContents(refNode: Node): void;\n\tsetEnd(refNode: Node, offset: number): void;\n\tsetEndAfter(refNode: Node): void;\n\tsetEndBefore(refNode: Node): void;\n\tsetStart(refNode: Node, offset: number): void;\n\tsetStartAfter(refNode: Node): void;\n\tsetStartBefore(refNode: Node): void;\n\tsurroundContents(newParent: Node): void;\n\ttoString(): string;\n\treadonly END_TO_END: number;\n\treadonly END_TO_START: number;\n\treadonly START_TO_END: number;\n\treadonly START_TO_START: number;\n}\n\ndeclare var Range: {\n\tprototype: Range;\n\tnew(): Range;\n\treadonly END_TO_END: number;\n\treadonly END_TO_START: number;\n\treadonly START_TO_END: number;\n\treadonly START_TO_START: number;\n};\n\ninterface ReadableStream {\n\treadonly locked: boolean;\n\tcancel(): Promise<void>;\n\tgetReader(): ReadableStreamReader;\n}\n\ndeclare var ReadableStream: {\n\tprototype: ReadableStream;\n\tnew(): ReadableStream;\n};\n\ninterface ReadableStreamReader {\n\tcancel(): Promise<void>;\n\tread(): Promise<any>;\n\treleaseLock(): void;\n}\n\ndeclare var ReadableStreamReader: {\n\tprototype: ReadableStreamReader;\n\tnew(): ReadableStreamReader;\n};\n\ninterface Request extends Object, Body {\n\treadonly cache: RequestCache;\n\treadonly credentials: RequestCredentials;\n\treadonly destination: RequestDestination;\n\treadonly headers: Headers;\n\treadonly integrity: string;\n\treadonly keepalive: boolean;\n\treadonly method: string;\n\treadonly mode: RequestMode;\n\treadonly redirect: RequestRedirect;\n\treadonly referrer: string;\n\treadonly referrerPolicy: ReferrerPolicy;\n\treadonly type: RequestType;\n\treadonly url: string;\n\tclone(): Request;\n}\n\ndeclare var Request: {\n\tprototype: Request;\n\tnew(input: Request | string, init?: RequestInit): Request;\n};\n\ninterface Response extends Object, Body {\n\treadonly body: ReadableStream | null;\n\treadonly headers: Headers;\n\treadonly ok: boolean;\n\treadonly status: number;\n\treadonly statusText: string;\n\treadonly type: ResponseType;\n\treadonly url: string;\n\tclone(): Response;\n}\n\ndeclare var Response: {\n\tprototype: Response;\n\tnew(body?: any, init?: ResponseInit): Response;\n\terror: () => Response;\n\tredirect: (url: string, status?: number) => Response;\n};\n\ninterface ScreenEventMap {\n}\n\ninterface Screen extends EventTarget {\n\treadonly availHeight: number;\n\treadonly availWidth: number;\n\tbufferDepth: number;\n\treadonly colorDepth: number;\n\treadonly deviceXDPI: number;\n\treadonly deviceYDPI: number;\n\treadonly fontSmoothingEnabled: boolean;\n\treadonly height: number;\n\treadonly logicalXDPI: number;\n\treadonly logicalYDPI: number;\n\treadonly pixelDepth: number;\n\treadonly systemXDPI: number;\n\treadonly systemYDPI: number;\n\treadonly width: number;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var Screen: {\n\tprototype: Screen;\n\tnew(): Screen;\n};\n\ninterface ScriptNotifyEvent extends Event {\n\treadonly callingUri: string;\n\treadonly value: string;\n}\n\ndeclare var ScriptNotifyEvent: {\n\tprototype: ScriptNotifyEvent;\n\tnew(): ScriptNotifyEvent;\n};\n\ninterface Selection {\n\treadonly anchorNode: Node;\n\treadonly anchorOffset: number;\n\treadonly baseNode: Node;\n\treadonly baseOffset: number;\n\treadonly extentNode: Node;\n\treadonly extentOffset: number;\n\treadonly focusNode: Node;\n\treadonly focusOffset: number;\n\treadonly isCollapsed: boolean;\n\treadonly rangeCount: number;\n\treadonly type: string;\n\taddRange(range: Range): void;\n\tcollapse(parentNode: Node, offset: number): void;\n\tcollapseToEnd(): void;\n\tcollapseToStart(): void;\n\tcontainsNode(node: Node, partlyContained: boolean): boolean;\n\tdeleteFromDocument(): void;\n\tempty(): void;\n\textend(newNode: Node, offset: number): void;\n\tgetRangeAt(index: number): Range;\n\tremoveAllRanges(): void;\n\tremoveRange(range: Range): void;\n\tselectAllChildren(parentNode: Node): void;\n\tsetBaseAndExtent(baseNode: Node, baseOffset: number, extentNode: Node, extentOffset: number): void;\n\tsetPosition(parentNode: Node, offset: number): void;\n\ttoString(): string;\n}\n\ndeclare var Selection: {\n\tprototype: Selection;\n\tnew(): Selection;\n};\n\ninterface ServiceWorkerEventMap extends AbstractWorkerEventMap {\n\t"statechange": Event;\n}\n\ninterface ServiceWorker extends EventTarget, AbstractWorker {\n\tonstatechange: (this: ServiceWorker, ev: Event) => any;\n\treadonly scriptURL: USVString;\n\treadonly state: ServiceWorkerState;\n\tpostMessage(message: any, transfer?: any[]): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var ServiceWorker: {\n\tprototype: ServiceWorker;\n\tnew(): ServiceWorker;\n};\n\ninterface ServiceWorkerContainerEventMap {\n\t"controllerchange": Event;\n\t"message": ServiceWorkerMessageEvent;\n}\n\ninterface ServiceWorkerContainer extends EventTarget {\n\treadonly controller: ServiceWorker | null;\n\toncontrollerchange: (this: ServiceWorkerContainer, ev: Event) => any;\n\tonmessage: (this: ServiceWorkerContainer, ev: ServiceWorkerMessageEvent) => any;\n\treadonly ready: Promise<ServiceWorkerRegistration>;\n\tgetRegistration(clientURL?: USVString): Promise<any>;\n\tgetRegistrations(): any;\n\tregister(scriptURL: USVString, options?: RegistrationOptions): Promise<ServiceWorkerRegistration>;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var ServiceWorkerContainer: {\n\tprototype: ServiceWorkerContainer;\n\tnew(): ServiceWorkerContainer;\n};\n\ninterface ServiceWorkerMessageEvent extends Event {\n\treadonly data: any;\n\treadonly lastEventId: string;\n\treadonly origin: string;\n\treadonly ports: MessagePort[] | null;\n\treadonly source: ServiceWorker | MessagePort | null;\n}\n\ndeclare var ServiceWorkerMessageEvent: {\n\tprototype: ServiceWorkerMessageEvent;\n\tnew(type: string, eventInitDict?: ServiceWorkerMessageEventInit): ServiceWorkerMessageEvent;\n};\n\ninterface ServiceWorkerRegistrationEventMap {\n\t"updatefound": Event;\n}\n\ninterface ServiceWorkerRegistration extends EventTarget {\n\treadonly active: ServiceWorker | null;\n\treadonly installing: ServiceWorker | null;\n\tonupdatefound: (this: ServiceWorkerRegistration, ev: Event) => any;\n\treadonly pushManager: PushManager;\n\treadonly scope: USVString;\n\treadonly sync: SyncManager;\n\treadonly waiting: ServiceWorker | null;\n\tgetNotifications(filter?: GetNotificationOptions): any;\n\tshowNotification(title: string, options?: NotificationOptions): Promise<void>;\n\tunregister(): Promise<boolean>;\n\tupdate(): Promise<void>;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var ServiceWorkerRegistration: {\n\tprototype: ServiceWorkerRegistration;\n\tnew(): ServiceWorkerRegistration;\n};\n\ninterface Storage {\n\treadonly length: number;\n\tclear(): void;\n\tgetItem(key: string): string | null;\n\tkey(index: number): string | null;\n\tremoveItem(key: string): void;\n\tsetItem(key: string, data: string): void;\n\t[key: string]: any;\n\t[index: number]: string;\n}\n\ndeclare var Storage: {\n\tprototype: Storage;\n\tnew(): Storage;\n};\n\ninterface StorageEvent extends Event {\n\treadonly url: string;\n\tkey?: string;\n\toldValue?: string;\n\tnewValue?: string;\n\tstorageArea?: Storage;\n}\n\ndeclare var StorageEvent: {\n\tprototype: StorageEvent;\n\tnew (type: string, eventInitDict?: StorageEventInit): StorageEvent;\n};\n\ninterface StyleMedia {\n\treadonly type: string;\n\tmatchMedium(mediaquery: string): boolean;\n}\n\ndeclare var StyleMedia: {\n\tprototype: StyleMedia;\n\tnew(): StyleMedia;\n};\n\ninterface StyleSheet {\n\tdisabled: boolean;\n\treadonly href: string;\n\treadonly media: MediaList;\n\treadonly ownerNode: Node;\n\treadonly parentStyleSheet: StyleSheet;\n\treadonly title: string;\n\treadonly type: string;\n}\n\ndeclare var StyleSheet: {\n\tprototype: StyleSheet;\n\tnew(): StyleSheet;\n};\n\ninterface StyleSheetList {\n\treadonly length: number;\n\titem(index?: number): StyleSheet;\n\t[index: number]: StyleSheet;\n}\n\ndeclare var StyleSheetList: {\n\tprototype: StyleSheetList;\n\tnew(): StyleSheetList;\n};\n\ninterface StyleSheetPageList {\n\treadonly length: number;\n\titem(index: number): CSSPageRule;\n\t[index: number]: CSSPageRule;\n}\n\ndeclare var StyleSheetPageList: {\n\tprototype: StyleSheetPageList;\n\tnew(): StyleSheetPageList;\n};\n\ninterface SyncManager {\n\tgetTags(): any;\n\tregister(tag: string): Promise<void>;\n}\n\ndeclare var SyncManager: {\n\tprototype: SyncManager;\n\tnew(): SyncManager;\n};\n\ninterface Text extends CharacterData {\n\treadonly wholeText: string;\n\treadonly assignedSlot: HTMLSlotElement | null;\n\tsplitText(offset: number): Text;\n}\n\ndeclare var Text: {\n\tprototype: Text;\n\tnew(data?: string): Text;\n};\n\ninterface TextEvent extends UIEvent {\n\treadonly data: string;\n\treadonly inputMethod: number;\n\treadonly locale: string;\n\tinitTextEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, inputMethod: number, locale: string): void;\n\treadonly DOM_INPUT_METHOD_DROP: number;\n\treadonly DOM_INPUT_METHOD_HANDWRITING: number;\n\treadonly DOM_INPUT_METHOD_IME: number;\n\treadonly DOM_INPUT_METHOD_KEYBOARD: number;\n\treadonly DOM_INPUT_METHOD_MULTIMODAL: number;\n\treadonly DOM_INPUT_METHOD_OPTION: number;\n\treadonly DOM_INPUT_METHOD_PASTE: number;\n\treadonly DOM_INPUT_METHOD_SCRIPT: number;\n\treadonly DOM_INPUT_METHOD_UNKNOWN: number;\n\treadonly DOM_INPUT_METHOD_VOICE: number;\n}\n\ndeclare var TextEvent: {\n\tprototype: TextEvent;\n\tnew(): TextEvent;\n\treadonly DOM_INPUT_METHOD_DROP: number;\n\treadonly DOM_INPUT_METHOD_HANDWRITING: number;\n\treadonly DOM_INPUT_METHOD_IME: number;\n\treadonly DOM_INPUT_METHOD_KEYBOARD: number;\n\treadonly DOM_INPUT_METHOD_MULTIMODAL: number;\n\treadonly DOM_INPUT_METHOD_OPTION: number;\n\treadonly DOM_INPUT_METHOD_PASTE: number;\n\treadonly DOM_INPUT_METHOD_SCRIPT: number;\n\treadonly DOM_INPUT_METHOD_UNKNOWN: number;\n\treadonly DOM_INPUT_METHOD_VOICE: number;\n};\n\ninterface TextMetrics {\n\treadonly width: number;\n}\n\ndeclare var TextMetrics: {\n\tprototype: TextMetrics;\n\tnew(): TextMetrics;\n};\n\ninterface TimeRanges {\n\treadonly length: number;\n\tend(index: number): number;\n\tstart(index: number): number;\n}\n\ndeclare var TimeRanges: {\n\tprototype: TimeRanges;\n\tnew(): TimeRanges;\n};\n\ninterface Touch {\n\treadonly clientX: number;\n\treadonly clientY: number;\n\treadonly identifier: number;\n\treadonly pageX: number;\n\treadonly pageY: number;\n\treadonly screenX: number;\n\treadonly screenY: number;\n\treadonly target: EventTarget;\n}\n\ndeclare var Touch: {\n\tprototype: Touch;\n\tnew(): Touch;\n};\n\ninterface TouchEvent extends UIEvent {\n\treadonly altKey: boolean;\n\treadonly changedTouches: TouchList;\n\treadonly charCode: number;\n\treadonly ctrlKey: boolean;\n\treadonly keyCode: number;\n\treadonly metaKey: boolean;\n\treadonly shiftKey: boolean;\n\treadonly targetTouches: TouchList;\n\treadonly touches: TouchList;\n\treadonly which: number;\n}\n\ndeclare var TouchEvent: {\n\tprototype: TouchEvent;\n\tnew(type: string, touchEventInit?: TouchEventInit): TouchEvent;\n};\n\ninterface TouchList {\n\treadonly length: number;\n\titem(index: number): Touch | null;\n\t[index: number]: Touch;\n}\n\ndeclare var TouchList: {\n\tprototype: TouchList;\n\tnew(): TouchList;\n};\n\ninterface TransitionEvent extends Event {\n\treadonly elapsedTime: number;\n\treadonly propertyName: string;\n\tinitTransitionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, propertyNameArg: string, elapsedTimeArg: number): void;\n}\n\ndeclare var TransitionEvent: {\n\tprototype: TransitionEvent;\n\tnew(typeArg: string, eventInitDict?: TransitionEventInit): TransitionEvent;\n};\n\ninterface TreeWalker {\n\tcurrentNode: Node;\n\treadonly expandEntityReferences: boolean;\n\treadonly filter: NodeFilter;\n\treadonly root: Node;\n\treadonly whatToShow: number;\n\tfirstChild(): Node;\n\tlastChild(): Node;\n\tnextNode(): Node;\n\tnextSibling(): Node;\n\tparentNode(): Node;\n\tpreviousNode(): Node;\n\tpreviousSibling(): Node;\n}\n\ndeclare var TreeWalker: {\n\tprototype: TreeWalker;\n\tnew(): TreeWalker;\n};\n\ninterface UIEvent extends Event {\n\treadonly detail: number;\n\treadonly view: Window;\n\tinitUIEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number): void;\n}\n\ndeclare var UIEvent: {\n\tprototype: UIEvent;\n\tnew(typeArg: string, eventInitDict?: UIEventInit): UIEvent;\n};\n\ninterface UnviewableContentIdentifiedEvent extends NavigationEventWithReferrer {\n\treadonly mediaType: string;\n}\n\ndeclare var UnviewableContentIdentifiedEvent: {\n\tprototype: UnviewableContentIdentifiedEvent;\n\tnew(): UnviewableContentIdentifiedEvent;\n};\n\ninterface URL {\n\thash: string;\n\thost: string;\n\thostname: string;\n\thref: string;\n\treadonly origin: string;\n\tpassword: string;\n\tpathname: string;\n\tport: string;\n\tprotocol: string;\n\tsearch: string;\n\tusername: string;\n\treadonly searchParams: URLSearchParams;\n\ttoString(): string;\n}\n\ndeclare var URL: {\n\tprototype: URL;\n\tnew(url: string, base?: string): URL;\n\tcreateObjectURL(object: any, options?: ObjectURLOptions): string;\n\trevokeObjectURL(url: string): void;\n};\n\ninterface ValidityState {\n\treadonly badInput: boolean;\n\treadonly customError: boolean;\n\treadonly patternMismatch: boolean;\n\treadonly rangeOverflow: boolean;\n\treadonly rangeUnderflow: boolean;\n\treadonly stepMismatch: boolean;\n\treadonly tooLong: boolean;\n\treadonly typeMismatch: boolean;\n\treadonly valid: boolean;\n\treadonly valueMissing: boolean;\n}\n\ndeclare var ValidityState: {\n\tprototype: ValidityState;\n\tnew(): ValidityState;\n};\n\ninterface WebSocketEventMap {\n\t"close": CloseEvent;\n\t"error": Event;\n\t"message": MessageEvent;\n\t"open": Event;\n}\n\ninterface WebSocket extends EventTarget {\n\tbinaryType: string;\n\treadonly bufferedAmount: number;\n\treadonly extensions: string;\n\tonclose: (this: WebSocket, ev: CloseEvent) => any;\n\tonerror: (this: WebSocket, ev: Event) => any;\n\tonmessage: (this: WebSocket, ev: MessageEvent) => any;\n\tonopen: (this: WebSocket, ev: Event) => any;\n\treadonly protocol: string;\n\treadonly readyState: number;\n\treadonly url: string;\n\tclose(code?: number, reason?: string): void;\n\tsend(data: any): void;\n\treadonly CLOSED: number;\n\treadonly CLOSING: number;\n\treadonly CONNECTING: number;\n\treadonly OPEN: number;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var WebSocket: {\n\tprototype: WebSocket;\n\tnew(url: string, protocols?: string | string[]): WebSocket;\n\treadonly CLOSED: number;\n\treadonly CLOSING: number;\n\treadonly CONNECTING: number;\n\treadonly OPEN: number;\n};\n\ninterface WheelEvent extends MouseEvent {\n\treadonly deltaMode: number;\n\treadonly deltaX: number;\n\treadonly deltaY: number;\n\treadonly deltaZ: number;\n\treadonly wheelDelta: number;\n\treadonly wheelDeltaX: number;\n\treadonly wheelDeltaY: number;\n\tgetCurrentPoint(element: Element): void;\n\tinitWheelEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, deltaXArg: number, deltaYArg: number, deltaZArg: number, deltaMode: number): void;\n\treadonly DOM_DELTA_LINE: number;\n\treadonly DOM_DELTA_PAGE: number;\n\treadonly DOM_DELTA_PIXEL: number;\n}\n\ndeclare var WheelEvent: {\n\tprototype: WheelEvent;\n\tnew(typeArg: string, eventInitDict?: WheelEventInit): WheelEvent;\n\treadonly DOM_DELTA_LINE: number;\n\treadonly DOM_DELTA_PAGE: number;\n\treadonly DOM_DELTA_PIXEL: number;\n};\n\ninterface WindowEventMap extends GlobalEventHandlersEventMap {\n\t"abort": UIEvent;\n\t"afterprint": Event;\n\t"beforeprint": Event;\n\t"beforeunload": BeforeUnloadEvent;\n\t"blur": FocusEvent;\n\t"canplay": Event;\n\t"canplaythrough": Event;\n\t"change": Event;\n\t"click": MouseEvent;\n\t"compassneedscalibration": Event;\n\t"contextmenu": PointerEvent;\n\t"dblclick": MouseEvent;\n\t"devicelight": DeviceLightEvent;\n\t"devicemotion": DeviceMotionEvent;\n\t"deviceorientation": DeviceOrientationEvent;\n\t"drag": DragEvent;\n\t"dragend": DragEvent;\n\t"dragenter": DragEvent;\n\t"dragleave": DragEvent;\n\t"dragover": DragEvent;\n\t"dragstart": DragEvent;\n\t"drop": DragEvent;\n\t"durationchange": Event;\n\t"emptied": Event;\n\t"error": ErrorEvent;\n\t"focus": FocusEvent;\n\t"hashchange": HashChangeEvent;\n\t"input": Event;\n\t"invalid": Event;\n\t"keydown": KeyboardEvent;\n\t"keypress": KeyboardEvent;\n\t"keyup": KeyboardEvent;\n\t"load": Event;\n\t"loadeddata": Event;\n\t"loadedmetadata": Event;\n\t"loadstart": Event;\n\t"message": MessageEvent;\n\t"mousedown": MouseEvent;\n\t"mouseenter": MouseEvent;\n\t"mouseleave": MouseEvent;\n\t"mousemove": MouseEvent;\n\t"mouseout": MouseEvent;\n\t"mouseover": MouseEvent;\n\t"mouseup": MouseEvent;\n\t"mousewheel": WheelEvent;\n\t"offline": Event;\n\t"online": Event;\n\t"orientationchange": Event;\n\t"pagehide": PageTransitionEvent;\n\t"pageshow": PageTransitionEvent;\n\t"pause": Event;\n\t"play": Event;\n\t"playing": Event;\n\t"popstate": PopStateEvent;\n\t"progress": ProgressEvent;\n\t"ratechange": Event;\n\t"readystatechange": ProgressEvent;\n\t"reset": Event;\n\t"resize": UIEvent;\n\t"scroll": UIEvent;\n\t"seeked": Event;\n\t"seeking": Event;\n\t"select": UIEvent;\n\t"stalled": Event;\n\t"storage": StorageEvent;\n\t"submit": Event;\n\t"suspend": Event;\n\t"timeupdate": Event;\n\t"touchcancel": TouchEvent;\n\t"touchend": TouchEvent;\n\t"touchmove": TouchEvent;\n\t"touchstart": TouchEvent;\n\t"unload": Event;\n\t"volumechange": Event;\n\t"waiting": Event;\n}\n\ninterface Window extends EventTarget, WindowTimers, WindowSessionStorage, WindowLocalStorage, WindowConsole, GlobalEventHandlers, IDBEnvironment, WindowBase64, GlobalFetch {\n\treadonly applicationCache: ApplicationCache;\n\treadonly caches: CacheStorage;\n\treadonly clientInformation: Navigator;\n\treadonly closed: boolean;\n\tdefaultStatus: string;\n\treadonly devicePixelRatio: number;\n\treadonly document: Document;\n\treadonly doNotTrack: string;\n\tevent: Event | undefined;\n\treadonly frameElement: Element;\n\treadonly frames: Window;\n\treadonly history: History;\n\treadonly innerHeight: number;\n\treadonly innerWidth: number;\n\treadonly isSecureContext: boolean;\n\treadonly length: number;\n\treadonly location: Location;\n\treadonly locationbar: BarProp;\n\treadonly menubar: BarProp;\n\t\n\tname: string;\n\treadonly navigator: Navigator;\n\toffscreenBuffering: string | boolean;\n\tonabort: (this: Window, ev: UIEvent) => any;\n\tonafterprint: (this: Window, ev: Event) => any;\n\tonbeforeprint: (this: Window, ev: Event) => any;\n\tonbeforeunload: (this: Window, ev: BeforeUnloadEvent) => any;\n\tonblur: (this: Window, ev: FocusEvent) => any;\n\toncanplay: (this: Window, ev: Event) => any;\n\toncanplaythrough: (this: Window, ev: Event) => any;\n\tonchange: (this: Window, ev: Event) => any;\n\tonclick: (this: Window, ev: MouseEvent) => any;\n\toncompassneedscalibration: (this: Window, ev: Event) => any;\n\toncontextmenu: (this: Window, ev: PointerEvent) => any;\n\tondblclick: (this: Window, ev: MouseEvent) => any;\n\tondevicelight: (this: Window, ev: DeviceLightEvent) => any;\n\tondevicemotion: (this: Window, ev: DeviceMotionEvent) => any;\n\tondeviceorientation: (this: Window, ev: DeviceOrientationEvent) => any;\n\tondrag: (this: Window, ev: DragEvent) => any;\n\tondragend: (this: Window, ev: DragEvent) => any;\n\tondragenter: (this: Window, ev: DragEvent) => any;\n\tondragleave: (this: Window, ev: DragEvent) => any;\n\tondragover: (this: Window, ev: DragEvent) => any;\n\tondragstart: (this: Window, ev: DragEvent) => any;\n\tondrop: (this: Window, ev: DragEvent) => any;\n\tondurationchange: (this: Window, ev: Event) => any;\n\tonemptied: (this: Window, ev: Event) => any;\n\tonerror: ErrorEventHandler;\n\tonfocus: (this: Window, ev: FocusEvent) => any;\n\tonhashchange: (this: Window, ev: HashChangeEvent) => any;\n\toninput: (this: Window, ev: Event) => any;\n\toninvalid: (this: Window, ev: Event) => any;\n\tonkeydown: (this: Window, ev: KeyboardEvent) => any;\n\tonkeypress: (this: Window, ev: KeyboardEvent) => any;\n\tonkeyup: (this: Window, ev: KeyboardEvent) => any;\n\tonload: (this: Window, ev: Event) => any;\n\tonloadeddata: (this: Window, ev: Event) => any;\n\tonloadedmetadata: (this: Window, ev: Event) => any;\n\tonloadstart: (this: Window, ev: Event) => any;\n\tonmessage: (this: Window, ev: MessageEvent) => any;\n\tonmousedown: (this: Window, ev: MouseEvent) => any;\n\tonmouseenter: (this: Window, ev: MouseEvent) => any;\n\tonmouseleave: (this: Window, ev: MouseEvent) => any;\n\tonmousemove: (this: Window, ev: MouseEvent) => any;\n\tonmouseout: (this: Window, ev: MouseEvent) => any;\n\tonmouseover: (this: Window, ev: MouseEvent) => any;\n\tonmouseup: (this: Window, ev: MouseEvent) => any;\n\tonmousewheel: (this: Window, ev: WheelEvent) => any;\n\tonoffline: (this: Window, ev: Event) => any;\n\tononline: (this: Window, ev: Event) => any;\n\tonorientationchange: (this: Window, ev: Event) => any;\n\tonpagehide: (this: Window, ev: PageTransitionEvent) => any;\n\tonpageshow: (this: Window, ev: PageTransitionEvent) => any;\n\tonpause: (this: Window, ev: Event) => any;\n\tonplay: (this: Window, ev: Event) => any;\n\tonplaying: (this: Window, ev: Event) => any;\n\tonpopstate: (this: Window, ev: PopStateEvent) => any;\n\tonprogress: (this: Window, ev: ProgressEvent) => any;\n\tonratechange: (this: Window, ev: Event) => any;\n\tonreadystatechange: (this: Window, ev: ProgressEvent) => any;\n\tonreset: (this: Window, ev: Event) => any;\n\tonresize: (this: Window, ev: UIEvent) => any;\n\tonscroll: (this: Window, ev: UIEvent) => any;\n\tonseeked: (this: Window, ev: Event) => any;\n\tonseeking: (this: Window, ev: Event) => any;\n\tonselect: (this: Window, ev: UIEvent) => any;\n\tonstalled: (this: Window, ev: Event) => any;\n\tonstorage: (this: Window, ev: StorageEvent) => any;\n\tonsubmit: (this: Window, ev: Event) => any;\n\tonsuspend: (this: Window, ev: Event) => any;\n\tontimeupdate: (this: Window, ev: Event) => any;\n\tontouchcancel: (ev: TouchEvent) => any;\n\tontouchend: (ev: TouchEvent) => any;\n\tontouchmove: (ev: TouchEvent) => any;\n\tontouchstart: (ev: TouchEvent) => any;\n\tonunload: (this: Window, ev: Event) => any;\n\tonvolumechange: (this: Window, ev: Event) => any;\n\tonwaiting: (this: Window, ev: Event) => any;\n\topener: any;\n\torientation: string | number;\n\treadonly outerHeight: number;\n\treadonly outerWidth: number;\n\treadonly pageXOffset: number;\n\treadonly pageYOffset: number;\n\treadonly parent: Window;\n\treadonly performance: Performance;\n\treadonly personalbar: BarProp;\n\treadonly screen: Screen;\n\treadonly screenLeft: number;\n\treadonly screenTop: number;\n\treadonly screenX: number;\n\treadonly screenY: number;\n\treadonly scrollbars: BarProp;\n\treadonly scrollX: number;\n\treadonly scrollY: number;\n\treadonly self: Window;\n\tstatus: string;\n\treadonly statusbar: BarProp;\n\treadonly styleMedia: StyleMedia;\n\treadonly toolbar: BarProp;\n\treadonly top: Window;\n\treadonly window: Window;\n\tURL: typeof URL;\n\tURLSearchParams: typeof URLSearchParams;\n\tBlob: typeof Blob;\n\tcustomElements: CustomElementRegistry;\n\talert(message?: any): void;\n\tblur(): void;\n\tcancelAnimationFrame(handle: number): void;\n\tcaptureEvents(): void;\n\tclose(): void;\n\tconfirm(message?: string): boolean;\n\tdepartFocus(navigationReason: NavigationReason, origin: FocusNavigationOrigin): void;\n\tfocus(): void;\n\tgetComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\n\tgetMatchedCSSRules(elt: Element, pseudoElt?: string): CSSRuleList;\n\tgetSelection(): Selection;\n\tmatchMedia(mediaQuery: string): MediaQueryList;\n\tmoveBy(x?: number, y?: number): void;\n\tmoveTo(x?: number, y?: number): void;\n\topen(url?: string, target?: string, features?: string, replace?: boolean): Window;\n\tpostMessage(message: any, targetOrigin: string, transfer?: any[]): void;\n\tprint(): void;\n\tprompt(message?: string, _default?: string): string | null;\n\treleaseEvents(): void;\n\trequestAnimationFrame(callback: FrameRequestCallback): number;\n\tresizeBy(x?: number, y?: number): void;\n\tresizeTo(x?: number, y?: number): void;\n\tscroll(x?: number, y?: number): void;\n\tscrollBy(x?: number, y?: number): void;\n\tscrollTo(x?: number, y?: number): void;\n\tstop(): void;\n\tcreateImageBitmap(image: HTMLImageElement   | HTMLCanvasElement | ImageBitmap | ImageData | Blob, options?: ImageBitmapOptions): Promise<ImageBitmap>;\n\tcreateImageBitmap(image: HTMLImageElement   | HTMLCanvasElement | ImageBitmap | ImageData | Blob, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>;\n\tscroll(options?: ScrollToOptions): void;\n\tscrollTo(options?: ScrollToOptions): void;\n\tscrollBy(options?: ScrollToOptions): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var Window: {\n\tprototype: Window;\n\tnew(): Window;\n};\n\ninterface WorkerEventMap extends AbstractWorkerEventMap {\n\t"message": MessageEvent;\n}\n\ninterface Worker extends EventTarget, AbstractWorker {\n\tonmessage: (this: Worker, ev: MessageEvent) => any;\n\tpostMessage(message: any, transfer?: any[]): void;\n\tterminate(): void;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var Worker: {\n\tprototype: Worker;\n\tnew(stringUrl: string): Worker;\n};\n\ninterface XMLDocument extends Document {\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var XMLDocument: {\n\tprototype: XMLDocument;\n\tnew(): XMLDocument;\n};\n\ninterface XMLHttpRequestEventMap extends XMLHttpRequestEventTargetEventMap {\n\t"readystatechange": Event;\n}\n\ninterface XMLHttpRequest extends EventTarget, XMLHttpRequestEventTarget {\n\tonreadystatechange: (this: XMLHttpRequest, ev: Event) => any;\n\treadonly readyState: number;\n\treadonly response: any;\n\treadonly responseText: string;\n\tresponseType: XMLHttpRequestResponseType;\n\treadonly responseURL: string;\n\treadonly responseXML: Document | null;\n\treadonly status: number;\n\treadonly statusText: string;\n\ttimeout: number;\n\treadonly upload: XMLHttpRequestUpload;\n\twithCredentials: boolean;\n\tabort(): void;\n\tgetAllResponseHeaders(): string;\n\tgetResponseHeader(header: string): string | null;\n\topen(method: string, url: string, async?: boolean, user?: string, password?: string): void;\n\toverrideMimeType(mime: string): void;\n\tsend(data?: Document): void;\n\tsend(data?: string): void;\n\tsend(data?: any): void;\n\tsetRequestHeader(header: string, value: string): void;\n\treadonly DONE: number;\n\treadonly HEADERS_RECEIVED: number;\n\treadonly LOADING: number;\n\treadonly OPENED: number;\n\treadonly UNSENT: number;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var XMLHttpRequest: {\n\tprototype: XMLHttpRequest;\n\tnew(): XMLHttpRequest;\n\treadonly DONE: number;\n\treadonly HEADERS_RECEIVED: number;\n\treadonly LOADING: number;\n\treadonly OPENED: number;\n\treadonly UNSENT: number;\n};\n\ninterface XMLHttpRequestUpload extends EventTarget, XMLHttpRequestEventTarget {\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var XMLHttpRequestUpload: {\n\tprototype: XMLHttpRequestUpload;\n\tnew(): XMLHttpRequestUpload;\n};\n\ninterface XMLSerializer {\n\tserializeToString(target: Node): string;\n}\n\ndeclare var XMLSerializer: {\n\tprototype: XMLSerializer;\n\tnew(): XMLSerializer;\n};\n\ninterface XPathEvaluator {\n\tcreateExpression(expression: string, resolver: XPathNSResolver): XPathExpression;\n\tcreateNSResolver(nodeResolver?: Node): XPathNSResolver;\n\tevaluate(expression: string, contextNode: Node, resolver: XPathNSResolver | null, type: number, result: XPathResult | null): XPathResult;\n}\n\ndeclare var XPathEvaluator: {\n\tprototype: XPathEvaluator;\n\tnew(): XPathEvaluator;\n};\n\ninterface XPathExpression {\n\tevaluate(contextNode: Node, type: number, result: XPathResult | null): XPathResult;\n}\n\ndeclare var XPathExpression: {\n\tprototype: XPathExpression;\n\tnew(): XPathExpression;\n};\n\ninterface XPathNSResolver {\n\tlookupNamespaceURI(prefix: string): string;\n}\n\ndeclare var XPathNSResolver: {\n\tprototype: XPathNSResolver;\n\tnew(): XPathNSResolver;\n};\n\ninterface XPathResult {\n\treadonly booleanValue: boolean;\n\treadonly invalidIteratorState: boolean;\n\treadonly numberValue: number;\n\treadonly resultType: number;\n\treadonly singleNodeValue: Node;\n\treadonly snapshotLength: number;\n\treadonly stringValue: string;\n\titerateNext(): Node;\n\tsnapshotItem(index: number): Node;\n\treadonly ANY_TYPE: number;\n\treadonly ANY_UNORDERED_NODE_TYPE: number;\n\treadonly BOOLEAN_TYPE: number;\n\treadonly FIRST_ORDERED_NODE_TYPE: number;\n\treadonly NUMBER_TYPE: number;\n\treadonly ORDERED_NODE_ITERATOR_TYPE: number;\n\treadonly ORDERED_NODE_SNAPSHOT_TYPE: number;\n\treadonly STRING_TYPE: number;\n\treadonly UNORDERED_NODE_ITERATOR_TYPE: number;\n\treadonly UNORDERED_NODE_SNAPSHOT_TYPE: number;\n}\n\ndeclare var XPathResult: {\n\tprototype: XPathResult;\n\tnew(): XPathResult;\n\treadonly ANY_TYPE: number;\n\treadonly ANY_UNORDERED_NODE_TYPE: number;\n\treadonly BOOLEAN_TYPE: number;\n\treadonly FIRST_ORDERED_NODE_TYPE: number;\n\treadonly NUMBER_TYPE: number;\n\treadonly ORDERED_NODE_ITERATOR_TYPE: number;\n\treadonly ORDERED_NODE_SNAPSHOT_TYPE: number;\n\treadonly STRING_TYPE: number;\n\treadonly UNORDERED_NODE_ITERATOR_TYPE: number;\n\treadonly UNORDERED_NODE_SNAPSHOT_TYPE: number;\n};\n\ninterface XSLTProcessor {\n\tclearParameters(): void;\n\tgetParameter(namespaceURI: string, localName: string): any;\n\timportStylesheet(style: Node): void;\n\tremoveParameter(namespaceURI: string, localName: string): void;\n\treset(): void;\n\tsetParameter(namespaceURI: string, localName: string, value: any): void;\n\ttransformToDocument(source: Node): Document;\n\ttransformToFragment(source: Node, document: Document): DocumentFragment;\n}\n\ndeclare var XSLTProcessor: {\n\tprototype: XSLTProcessor;\n\tnew(): XSLTProcessor;\n};\n\ninterface AbstractWorkerEventMap {\n\t"error": ErrorEvent;\n}\n\ninterface AbstractWorker {\n\tonerror: (this: AbstractWorker, ev: ErrorEvent) => any;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ninterface Body {\n\treadonly bodyUsed: boolean;\n\tarrayBuffer(): Promise<ArrayBuffer>;\n\tblob(): Promise<Blob>;\n\tjson(): Promise<any>;\n\ttext(): Promise<string>;\n\tformData(): Promise<FormData>;\n}\n\ninterface CanvasPathMethods {\n\tarc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\n\tarcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\n\tbezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;\n\tclosePath(): void;\n\tellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\n\tlineTo(x: number, y: number): void;\n\tmoveTo(x: number, y: number): void;\n\tquadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\n\trect(x: number, y: number, w: number, h: number): void;\n}\n\ninterface ChildNode {\n\tremove(): void;\n}\n\ninterface DocumentEvent {\n\tcreateEvent(eventInterface: "AnimationEvent"): AnimationEvent;\n\tcreateEvent(eventInterface: "BeforeUnloadEvent"): BeforeUnloadEvent;\n\tcreateEvent(eventInterface: "ClipboardEvent"): ClipboardEvent;\n\tcreateEvent(eventInterface: "CloseEvent"): CloseEvent;\n\tcreateEvent(eventInterface: "CompositionEvent"): CompositionEvent;\n\tcreateEvent(eventInterface: "CustomEvent"): CustomEvent;\n\tcreateEvent(eventInterface: "DeviceLightEvent"): DeviceLightEvent;\n\tcreateEvent(eventInterface: "DeviceMotionEvent"): DeviceMotionEvent;\n\tcreateEvent(eventInterface: "DeviceOrientationEvent"): DeviceOrientationEvent;\n\tcreateEvent(eventInterface: "DragEvent"): DragEvent;\n\tcreateEvent(eventInterface: "ErrorEvent"): ErrorEvent;\n\tcreateEvent(eventInterface: "Event"): Event;\n\tcreateEvent(eventInterface: "Events"): Event;\n\tcreateEvent(eventInterface: "FocusEvent"): FocusEvent;\n\tcreateEvent(eventInterface: "FocusNavigationEvent"): FocusNavigationEvent;\n\tcreateEvent(eventInterface: "GamepadEvent"): GamepadEvent;\n\tcreateEvent(eventInterface: "HashChangeEvent"): HashChangeEvent;\n\tcreateEvent(eventInterface: "IDBVersionChangeEvent"): IDBVersionChangeEvent;\n\tcreateEvent(eventInterface: "KeyboardEvent"): KeyboardEvent;\n\tcreateEvent(eventInterface: "ListeningStateChangedEvent"): ListeningStateChangedEvent;\n\tcreateEvent(eventInterface: "LongRunningScriptDetectedEvent"): LongRunningScriptDetectedEvent;\n\tcreateEvent(eventInterface: "MessageEvent"): MessageEvent;\n\tcreateEvent(eventInterface: "MouseEvent"): MouseEvent;\n\tcreateEvent(eventInterface: "MouseEvents"): MouseEvent;\n\tcreateEvent(eventInterface: "MutationEvent"): MutationEvent;\n\tcreateEvent(eventInterface: "MutationEvents"): MutationEvent;\n\tcreateEvent(eventInterface: "NavigationCompletedEvent"): NavigationCompletedEvent;\n\tcreateEvent(eventInterface: "NavigationEvent"): NavigationEvent;\n\tcreateEvent(eventInterface: "NavigationEventWithReferrer"): NavigationEventWithReferrer;\n\tcreateEvent(eventInterface: "OverflowEvent"): OverflowEvent;\n\tcreateEvent(eventInterface: "PageTransitionEvent"): PageTransitionEvent;\n\tcreateEvent(eventInterface: "PaymentRequestUpdateEvent"): PaymentRequestUpdateEvent;\n\tcreateEvent(eventInterface: "PermissionRequestedEvent"): PermissionRequestedEvent;\n\tcreateEvent(eventInterface: "PointerEvent"): PointerEvent;\n\tcreateEvent(eventInterface: "PopStateEvent"): PopStateEvent;\n\tcreateEvent(eventInterface: "ProgressEvent"): ProgressEvent;\n\tcreateEvent(eventInterface: "ScriptNotifyEvent"): ScriptNotifyEvent;\n\tcreateEvent(eventInterface: "ServiceWorkerMessageEvent"): ServiceWorkerMessageEvent;\n\tcreateEvent(eventInterface: "StorageEvent"): StorageEvent;\n\tcreateEvent(eventInterface: "TextEvent"): TextEvent;\n\tcreateEvent(eventInterface: "TouchEvent"): TouchEvent;\n\tcreateEvent(eventInterface: "TransitionEvent"): TransitionEvent;\n\tcreateEvent(eventInterface: "UIEvent"): UIEvent;\n\tcreateEvent(eventInterface: "UIEvents"): UIEvent;\n\tcreateEvent(eventInterface: "UnviewableContentIdentifiedEvent"): UnviewableContentIdentifiedEvent;\n\tcreateEvent(eventInterface: "WheelEvent"): WheelEvent;\n\tcreateEvent(eventInterface: string): Event;\n}\n\ninterface DOML2DeprecatedColorProperty {\n\tcolor: string;\n}\n\ninterface DOML2DeprecatedSizeProperty {\n\tsize: number;\n}\n\ninterface ElementTraversal {\n\treadonly childElementCount: number;\n\treadonly firstElementChild: Element | null;\n\treadonly lastElementChild: Element | null;\n\treadonly nextElementSibling: Element | null;\n\treadonly previousElementSibling: Element | null;\n}\n\ninterface GlobalEventHandlersEventMap {\n\t"pointercancel": PointerEvent;\n\t"pointerdown": PointerEvent;\n\t"pointerenter": PointerEvent;\n\t"pointerleave": PointerEvent;\n\t"pointermove": PointerEvent;\n\t"pointerout": PointerEvent;\n\t"pointerover": PointerEvent;\n\t"pointerup": PointerEvent;\n\t"wheel": WheelEvent;\n}\n\ninterface GlobalEventHandlers {\n\tonpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;\n\tonpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;\n\tonpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;\n\tonpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;\n\tonpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;\n\tonpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;\n\tonpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;\n\tonpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;\n\tonwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ninterface GlobalFetch {\n\tfetch(input: RequestInfo, init?: RequestInit): Promise<Response>;\n}\n\ninterface HTMLTableAlignment {\n\t/**\n\t * Sets or retrieves a value that you can use to implement your own ch functionality for the object.\n\t */\n\tch: string;\n\t/**\n\t * Sets or retrieves a value that you can use to implement your own chOff functionality for the object.\n\t */\n\tchOff: string;\n\t/**\n\t * Sets or retrieves how text and other content are vertically aligned within the object that contains them.\n\t */\n\tvAlign: string;\n}\n\ninterface IDBEnvironment {\n\treadonly indexedDB: IDBFactory;\n}\n\ninterface LinkStyle {\n\treadonly sheet: StyleSheet;\n}\n\ninterface NavigatorBeacon {\n\tsendBeacon(url: USVString, data?: BodyInit): boolean;\n}\n\ninterface NavigatorConcurrentHardware {\n\treadonly hardwareConcurrency: number;\n}\n\ninterface NavigatorContentUtils {\n}\n\ninterface NavigatorGeolocation {\n\treadonly geolocation: Geolocation;\n}\n\ninterface NavigatorID {\n\treadonly appCodeName: string;\n\treadonly appName: string;\n\treadonly appVersion: string;\n\treadonly platform: string;\n\treadonly product: string;\n\treadonly productSub: string;\n\treadonly userAgent: string;\n\treadonly vendor: string;\n\treadonly vendorSub: string;\n}\n\ninterface NavigatorOnLine {\n\treadonly onLine: boolean;\n}\n\ninterface NavigatorStorageUtils {\n}\n\ninterface NodeSelector {\n\tquerySelector<K extends keyof ElementTagNameMap>(selectors: K): ElementTagNameMap[K] | null;\n\tquerySelector(selectors: string): Element | null;\n\tquerySelectorAll<K extends keyof ElementListTagNameMap>(selectors: K): ElementListTagNameMap[K];\n\tquerySelectorAll(selectors: string): NodeListOf<Element>;\n}\n\ninterface RandomSource {\n\tgetRandomValues(array: ArrayBufferView): ArrayBufferView;\n}\n\ninterface WindowBase64 {\n\tatob(encodedString: string): string;\n\tbtoa(rawString: string): string;\n}\n\ninterface WindowConsole {\n\treadonly console: Console;\n}\n\ninterface WindowLocalStorage {\n\treadonly localStorage: Storage;\n}\n\ninterface WindowSessionStorage {\n\treadonly sessionStorage: Storage;\n}\n\ninterface WindowTimers extends Object, WindowTimersExtension {\n\tclearInterval(handle: number): void;\n\tclearTimeout(handle: number): void;\n\tsetInterval(handler: (...args: any[]) => void, timeout: number): number;\n\tsetInterval(handler: any, timeout?: any, ...args: any[]): number;\n\tsetTimeout(handler: (...args: any[]) => void, timeout: number): number;\n\tsetTimeout(handler: any, timeout?: any, ...args: any[]): number;\n}\n\ninterface WindowTimersExtension {\n\tclearImmediate(handle: number): void;\n\tsetImmediate(handler: (...args: any[]) => void): number;\n\tsetImmediate(handler: any, ...args: any[]): number;\n}\n\ninterface XMLHttpRequestEventTargetEventMap {\n\t"abort": Event;\n\t"error": ErrorEvent;\n\t"load": Event;\n\t"loadend": ProgressEvent;\n\t"loadstart": Event;\n\t"progress": ProgressEvent;\n\t"timeout": ProgressEvent;\n}\n\ninterface XMLHttpRequestEventTarget {\n\tonabort: (this: XMLHttpRequestEventTarget, ev: Event) => any;\n\tonerror: (this: XMLHttpRequestEventTarget, ev: ErrorEvent) => any;\n\tonload: (this: XMLHttpRequestEventTarget, ev: Event) => any;\n\tonloadend: (this: XMLHttpRequestEventTarget, ev: ProgressEvent) => any;\n\tonloadstart: (this: XMLHttpRequestEventTarget, ev: Event) => any;\n\tonprogress: (this: XMLHttpRequestEventTarget, ev: ProgressEvent) => any;\n\tontimeout: (this: XMLHttpRequestEventTarget, ev: ProgressEvent) => any;\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ninterface ErrorEventInit {\n\tmessage?: string;\n\tfilename?: string;\n\tlineno?: number;\n\tconlno?: number;\n\terror?: any;\n}\n\ninterface StorageEventInit extends EventInit {\n\tkey?: string;\n\toldValue?: string;\n\tnewValue?: string;\n\turl: string;\n\tstorageArea?: Storage;\n}\n\ninterface Canvas2DContextAttributes {\n\talpha?: boolean;\n\twillReadFrequently?: boolean;\n\tstorage?: boolean;\n\t[attribute: string]: boolean | string | undefined;\n}\n\ninterface ImageBitmapOptions {\n\timageOrientation?: "none" | "flipY";\n\tpremultiplyAlpha?: "none" | "premultiply" | "default";\n\tcolorSpaceConversion?: "none" | "default";\n\tresizeWidth?: number;\n\tresizeHeight?: number;\n\tresizeQuality?: "pixelated" | "low" | "medium" | "high";\n}\n\ninterface ImageBitmap {\n\treadonly width: number;\n\treadonly height: number;\n\tclose(): void;\n}\n\ninterface URLSearchParams {\n\t/**\n\t * Appends a specified key/value pair as a new search parameter.\n\t */\n\tappend(name: string, value: string): void;\n\t/**\n\t * Deletes the given search parameter, and its associated value, from the list of all search parameters.\n\t */\n\tdelete(name: string): void;\n\t/**\n\t * Returns the first value associated to the given search parameter.\n\t */\n\tget(name: string): string | null;\n\t/**\n\t * Returns all the values association with a given search parameter.\n\t */\n\tgetAll(name: string): string[];\n\t/**\n\t * Returns a Boolean indicating if such a search parameter exists.\n\t */\n\thas(name: string): boolean;\n\t/**\n\t * Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.\n\t */\n\tset(name: string, value: string): void;\n}\n\ndeclare var URLSearchParams: {\n\tprototype: URLSearchParams;\n\t/**\n\t * Constructor returning a URLSearchParams object.\n\t */\n\tnew (init?: string | URLSearchParams): URLSearchParams;\n};\n\ninterface NodeListOf<TNode extends Node> extends NodeList {\n\tlength: number;\n\titem(index: number): TNode;\n\t[index: number]: TNode;\n}\n\ninterface HTMLCollectionOf<T extends Element> extends HTMLCollection {\n\titem(index: number): T;\n\tnamedItem(name: string): T;\n\t[index: number]: T;\n}\n\ninterface BlobPropertyBag {\n\ttype?: string;\n\tendings?: string;\n}\n\ninterface FilePropertyBag {\n\ttype?: string;\n\tlastModified?: number;\n}\n\ninterface EventListenerObject {\n\thandleEvent(evt: Event): void;\n}\n\ninterface ProgressEventInit extends EventInit {\n\tlengthComputable?: boolean;\n\tloaded?: number;\n\ttotal?: number;\n}\n\ninterface ScrollOptions {\n\tbehavior?: ScrollBehavior;\n}\n\ninterface ScrollToOptions extends ScrollOptions {\n\tleft?: number;\n\ttop?: number;\n}\n\ninterface ScrollIntoViewOptions extends ScrollOptions {\n\tblock?: ScrollLogicalPosition;\n\tinline?: ScrollLogicalPosition;\n}\n\ninterface ClipboardEventInit extends EventInit {\n\tdata?: string;\n\tdataType?: string;\n}\n\ninterface IDBArrayKey extends Array<IDBValidKey> {\n}\n\ninterface EcKeyImportParams {\n\tnamedCurve: string;\n}\n\ninterface ParentNode {\n\treadonly children: HTMLCollection;\n\treadonly firstElementChild: Element | null;\n\treadonly lastElementChild: Element | null;\n\treadonly childElementCount: number;\n}\n\ninterface DocumentOrShadowRoot {\n\treadonly activeElement: Element | null;\n\treadonly stylesheets: StyleSheetList;\n\tgetSelection(): Selection | null;\n\telementFromPoint(x: number, y: number): Element | null;\n\telementsFromPoint(x: number, y: number): Element[];\n}\n\ninterface ShadowRoot extends DocumentOrShadowRoot, DocumentFragment {\n\treadonly host: Element;\n\tinnerHTML: string;\n}\n\ninterface ShadowRootInit {\n\tmode: "open" | "closed";\n\tdelegatesFocus?: boolean;\n}\n\ninterface HTMLSlotElement extends HTMLElement {\n\tname: string;\n\tassignedNodes(options?: AssignedNodesOptions): Node[];\n}\n\ninterface AssignedNodesOptions {\n\tflatten?: boolean;\n}\n\ninterface ElementDefinitionOptions {\n\textends: string;\n}\n\ninterface CustomElementRegistry {\n\tdefine(name: string, constructor: Function, options?: ElementDefinitionOptions): void;\n\tget(name: string): any;\n\twhenDefined(name: string): PromiseLike<void>;\n}\n\ninterface PromiseRejectionEvent extends Event {\n\treadonly promise: PromiseLike<any>;\n\treadonly reason: any;\n}\n\ninterface PromiseRejectionEventInit extends EventInit {\n\tpromise: PromiseLike<any>;\n\treason?: any;\n}\n\ninterface EventListenerOptions {\n\tcapture?: boolean;\n}\n\ninterface AddEventListenerOptions extends EventListenerOptions {\n\tpassive?: boolean;\n\tonce?: boolean;\n}\n\ninterface TouchEventInit extends EventModifierInit {\n\ttouches?: Touch[];\n\ttargetTouches?: Touch[];\n\tchangedTouches?: Touch[];\n}\n\ndeclare type EventListenerOrEventListenerObject = EventListener | EventListenerObject;\n\ninterface ErrorEventHandler {\n\t(message: string, filename?: string, lineno?: number, colno?: number, error?: Error): void;\n}\ninterface ForEachCallback {\n}\ninterface FrameRequestCallback {\n\t(time: number): void;\n}\ninterface FunctionStringCallback {\n\t(data: string): void;\n}\ninterface IntersectionObserverCallback {\n\t(entries: IntersectionObserverEntry[], observer: IntersectionObserver): void;\n}\ninterface MediaQueryListListener {\n\t(mql: MediaQueryList): void;\n}\ninterface MutationCallback {\n\t(mutations: MutationRecord[], observer: MutationObserver): void;\n}\ninterface NotificationPermissionCallback {\n\t(permission: NotificationPermission): void;\n}\ninterface PositionCallback {\n\t(position: Position): void;\n}\ninterface PositionErrorCallback {\n\t(error: PositionError): void;\n}\ninterface VoidFunction {\n\t(): void;\n}\ninterface HTMLElementTagNameMap {\n\t"a": HTMLAnchorElement;\n\t"applet": HTMLAppletElement;\n\t"area": HTMLAreaElement;\n\t"base": HTMLBaseElement;\n\t"basefont": HTMLBaseFontElement;\n\t"blockquote": HTMLQuoteElement;\n\t"body": HTMLBodyElement;\n\t"br": HTMLBRElement;\n\t"button": HTMLButtonElement;\n\t"canvas": HTMLCanvasElement;\n\t"caption": HTMLTableCaptionElement;\n\t"col": HTMLTableColElement;\n\t"colgroup": HTMLTableColElement;\n\t"data": HTMLDataElement;\n\t"datalist": HTMLDataListElement;\n\t"del": HTMLModElement;\n\t"dir": HTMLDirectoryElement;\n\t"div": HTMLDivElement;\n\t"dl": HTMLDListElement;\n\t"embed": HTMLEmbedElement;\n\t"fieldset": HTMLFieldSetElement;\n\t"font": HTMLFontElement;\n\t"form": HTMLFormElement;\n\t"frame": HTMLFrameElement;\n\t"frameset": HTMLFrameSetElement;\n\t"h1": HTMLHeadingElement;\n\t"h2": HTMLHeadingElement;\n\t"h3": HTMLHeadingElement;\n\t"h4": HTMLHeadingElement;\n\t"h5": HTMLHeadingElement;\n\t"h6": HTMLHeadingElement;\n\t"head": HTMLHeadElement;\n\t"hr": HTMLHRElement;\n\t"html": HTMLHtmlElement;\n\t"iframe": HTMLIFrameElement;\n\t"img": HTMLImageElement;\n\t"input": HTMLInputElement;\n\t"ins": HTMLModElement;\n\t"isindex": HTMLUnknownElement;\n\t"label": HTMLLabelElement;\n\t"legend": HTMLLegendElement;\n\t"li": HTMLLIElement;\n\t"link": HTMLLinkElement;\n\t"listing": HTMLPreElement;\n\t"map": HTMLMapElement;\n\t"marquee": HTMLMarqueeElement;\n\t"menu": HTMLMenuElement;\n\t"meta": HTMLMetaElement;\n\t"meter": HTMLMeterElement;\n\t"nextid": HTMLUnknownElement;\n\t"object": HTMLObjectElement;\n\t"ol": HTMLOListElement;\n\t"optgroup": HTMLOptGroupElement;\n\t"option": HTMLOptionElement;\n\t"output": HTMLOutputElement;\n\t"p": HTMLParagraphElement;\n\t"param": HTMLParamElement;\n\t"picture": HTMLPictureElement;\n\t"pre": HTMLPreElement;\n\t"progress": HTMLProgressElement;\n\t"q": HTMLQuoteElement;\n\t"script": HTMLScriptElement;\n\t"select": HTMLSelectElement;\n\t"source": HTMLSourceElement;\n\t"span": HTMLSpanElement;\n\t"style": HTMLStyleElement;\n\t"table": HTMLTableElement;\n\t"tbody": HTMLTableSectionElement;\n\t"td": HTMLTableDataCellElement;\n\t"template": HTMLTemplateElement;\n\t"textarea": HTMLTextAreaElement;\n\t"tfoot": HTMLTableSectionElement;\n\t"th": HTMLTableHeaderCellElement;\n\t"thead": HTMLTableSectionElement;\n\t"time": HTMLTimeElement;\n\t"title": HTMLTitleElement;\n\t"tr": HTMLTableRowElement;\n\t"ul": HTMLUListElement;\n\t"video": HTMLElement;\n\t"xmp": HTMLPreElement;\n}\n\ninterface ElementTagNameMap extends HTMLElementTagNameMap {\n\t"abbr": HTMLElement;\n\t"acronym": HTMLElement;\n\t"address": HTMLElement;\n\t"article": HTMLElement;\n\t"aside": HTMLElement;\n\t"b": HTMLElement;\n\t"bdo": HTMLElement;\n\t"big": HTMLElement;\n\t"center": HTMLElement;\n\t"cite": HTMLElement;\n\t"code": HTMLElement;\n\t"dd": HTMLElement;\n\t"dfn": HTMLElement;\n\t"dt": HTMLElement;\n\t"em": HTMLElement;\n\t"figcaption": HTMLElement;\n\t"figure": HTMLElement;\n\t"footer": HTMLElement;\n\t"header": HTMLElement;\n\t"hgroup": HTMLElement;\n\t"i": HTMLElement;\n\t"kbd": HTMLElement;\n\t"keygen": HTMLElement;\n\t"mark": HTMLElement;\n\t"nav": HTMLElement;\n\t"nobr": HTMLElement;\n\t"noframes": HTMLElement;\n\t"noscript": HTMLElement;\n\t"plaintext": HTMLElement;\n\t"rt": HTMLElement;\n\t"ruby": HTMLElement;\n\t"s": HTMLElement;\n\t"samp": HTMLElement;\n\t"section": HTMLElement;\n\t"small": HTMLElement;\n\t"strike": HTMLElement;\n\t"strong": HTMLElement;\n\t"sub": HTMLElement;\n\t"sup": HTMLElement;\n\t"tt": HTMLElement;\n\t"u": HTMLElement;\n\t"var": HTMLElement;\n\t"wbr": HTMLElement;\n}\n\ntype ElementListTagNameMap = {\n\t[key in keyof ElementTagNameMap]: NodeListOf<ElementTagNameMap[key]>\n};\n\ndeclare var Image: { new(width?: number, height?: number): HTMLImageElement; };\ndeclare var Option: { new(text?: string, value?: string, defaultSelected?: boolean, selected?: boolean): HTMLOptionElement; };\ndeclare var applicationCache: ApplicationCache;\ndeclare var caches: CacheStorage;\ndeclare var clientInformation: Navigator;\ndeclare var closed: boolean;\ndeclare var defaultStatus: string;\ndeclare var devicePixelRatio: number;\ndeclare var document: Document;\ndeclare var doNotTrack: string;\ndeclare var event: Event | undefined;\ndeclare var frameElement: Element;\ndeclare var frames: Window;\ndeclare var history: History;\ndeclare var innerHeight: number;\ndeclare var innerWidth: number;\ndeclare var isSecureContext: boolean;\ndeclare var length: number;\ndeclare var location: Location;\ndeclare var locationbar: BarProp;\ndeclare var menubar: BarProp;\n\ndeclare const name: never;\ndeclare var navigator: Navigator;\ndeclare var offscreenBuffering: string | boolean;\ndeclare var onabort: (this: Window, ev: UIEvent) => any;\ndeclare var onafterprint: (this: Window, ev: Event) => any;\ndeclare var onbeforeprint: (this: Window, ev: Event) => any;\ndeclare var onbeforeunload: (this: Window, ev: BeforeUnloadEvent) => any;\ndeclare var onblur: (this: Window, ev: FocusEvent) => any;\ndeclare var oncanplay: (this: Window, ev: Event) => any;\ndeclare var oncanplaythrough: (this: Window, ev: Event) => any;\ndeclare var onchange: (this: Window, ev: Event) => any;\ndeclare var onclick: (this: Window, ev: MouseEvent) => any;\ndeclare var oncompassneedscalibration: (this: Window, ev: Event) => any;\ndeclare var oncontextmenu: (this: Window, ev: PointerEvent) => any;\ndeclare var ondblclick: (this: Window, ev: MouseEvent) => any;\ndeclare var ondevicelight: (this: Window, ev: DeviceLightEvent) => any;\ndeclare var ondevicemotion: (this: Window, ev: DeviceMotionEvent) => any;\ndeclare var ondeviceorientation: (this: Window, ev: DeviceOrientationEvent) => any;\ndeclare var ondrag: (this: Window, ev: DragEvent) => any;\ndeclare var ondragend: (this: Window, ev: DragEvent) => any;\ndeclare var ondragenter: (this: Window, ev: DragEvent) => any;\ndeclare var ondragleave: (this: Window, ev: DragEvent) => any;\ndeclare var ondragover: (this: Window, ev: DragEvent) => any;\ndeclare var ondragstart: (this: Window, ev: DragEvent) => any;\ndeclare var ondrop: (this: Window, ev: DragEvent) => any;\ndeclare var ondurationchange: (this: Window, ev: Event) => any;\ndeclare var onemptied: (this: Window, ev: Event) => any;\ndeclare var onerror: ErrorEventHandler;\ndeclare var onfocus: (this: Window, ev: FocusEvent) => any;\ndeclare var onhashchange: (this: Window, ev: HashChangeEvent) => any;\ndeclare var oninput: (this: Window, ev: Event) => any;\ndeclare var oninvalid: (this: Window, ev: Event) => any;\ndeclare var onkeydown: (this: Window, ev: KeyboardEvent) => any;\ndeclare var onkeypress: (this: Window, ev: KeyboardEvent) => any;\ndeclare var onkeyup: (this: Window, ev: KeyboardEvent) => any;\ndeclare var onload: (this: Window, ev: Event) => any;\ndeclare var onloadeddata: (this: Window, ev: Event) => any;\ndeclare var onloadedmetadata: (this: Window, ev: Event) => any;\ndeclare var onloadstart: (this: Window, ev: Event) => any;\ndeclare var onmessage: (this: Window, ev: MessageEvent) => any;\ndeclare var onmousedown: (this: Window, ev: MouseEvent) => any;\ndeclare var onmouseenter: (this: Window, ev: MouseEvent) => any;\ndeclare var onmouseleave: (this: Window, ev: MouseEvent) => any;\ndeclare var onmousemove: (this: Window, ev: MouseEvent) => any;\ndeclare var onmouseout: (this: Window, ev: MouseEvent) => any;\ndeclare var onmouseover: (this: Window, ev: MouseEvent) => any;\ndeclare var onmouseup: (this: Window, ev: MouseEvent) => any;\ndeclare var onmousewheel: (this: Window, ev: WheelEvent) => any;\ndeclare var onoffline: (this: Window, ev: Event) => any;\ndeclare var ononline: (this: Window, ev: Event) => any;\ndeclare var onorientationchange: (this: Window, ev: Event) => any;\ndeclare var onpagehide: (this: Window, ev: PageTransitionEvent) => any;\ndeclare var onpageshow: (this: Window, ev: PageTransitionEvent) => any;\ndeclare var onpause: (this: Window, ev: Event) => any;\ndeclare var onplay: (this: Window, ev: Event) => any;\ndeclare var onplaying: (this: Window, ev: Event) => any;\ndeclare var onpopstate: (this: Window, ev: PopStateEvent) => any;\ndeclare var onprogress: (this: Window, ev: ProgressEvent) => any;\ndeclare var onratechange: (this: Window, ev: Event) => any;\ndeclare var onreadystatechange: (this: Window, ev: ProgressEvent) => any;\ndeclare var onreset: (this: Window, ev: Event) => any;\ndeclare var onresize: (this: Window, ev: UIEvent) => any;\ndeclare var onscroll: (this: Window, ev: UIEvent) => any;\ndeclare var onseeked: (this: Window, ev: Event) => any;\ndeclare var onseeking: (this: Window, ev: Event) => any;\ndeclare var onselect: (this: Window, ev: UIEvent) => any;\ndeclare var onstalled: (this: Window, ev: Event) => any;\ndeclare var onstorage: (this: Window, ev: StorageEvent) => any;\ndeclare var onsubmit: (this: Window, ev: Event) => any;\ndeclare var onsuspend: (this: Window, ev: Event) => any;\ndeclare var ontimeupdate: (this: Window, ev: Event) => any;\ndeclare var ontouchcancel: (ev: TouchEvent) => any;\ndeclare var ontouchend: (ev: TouchEvent) => any;\ndeclare var ontouchmove: (ev: TouchEvent) => any;\ndeclare var ontouchstart: (ev: TouchEvent) => any;\ndeclare var onunload: (this: Window, ev: Event) => any;\ndeclare var onvolumechange: (this: Window, ev: Event) => any;\ndeclare var onwaiting: (this: Window, ev: Event) => any;\ndeclare var opener: any;\ndeclare var orientation: string | number;\ndeclare var outerHeight: number;\ndeclare var outerWidth: number;\ndeclare var pageXOffset: number;\ndeclare var pageYOffset: number;\ndeclare var parent: Window;\ndeclare var performance: Performance;\ndeclare var personalbar: BarProp;\ndeclare var screen: Screen;\ndeclare var screenLeft: number;\ndeclare var screenTop: number;\ndeclare var screenX: number;\ndeclare var screenY: number;\ndeclare var scrollbars: BarProp;\ndeclare var scrollX: number;\ndeclare var scrollY: number;\ndeclare var self: Window;\ndeclare var status: string;\ndeclare var statusbar: BarProp;\ndeclare var styleMedia: StyleMedia;\ndeclare var toolbar: BarProp;\ndeclare var top: Window;\ndeclare var window: Window;\ndeclare var customElements: CustomElementRegistry;\ndeclare function alert(message?: any): void;\ndeclare function blur(): void;\ndeclare function cancelAnimationFrame(handle: number): void;\ndeclare function captureEvents(): void;\ndeclare function close(): void;\ndeclare function confirm(message?: string): boolean;\ndeclare function departFocus(navigationReason: NavigationReason, origin: FocusNavigationOrigin): void;\ndeclare function focus(): void;\ndeclare function getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\ndeclare function getMatchedCSSRules(elt: Element, pseudoElt?: string): CSSRuleList;\ndeclare function getSelection(): Selection;\ndeclare function matchMedia(mediaQuery: string): MediaQueryList;\ndeclare function moveBy(x?: number, y?: number): void;\ndeclare function moveTo(x?: number, y?: number): void;\n\ndeclare function open(url?: string, target?: string, features?: string, replace?: boolean): Window;\ndeclare function postMessage(message: any, targetOrigin: string, transfer?: any[]): void;\ndeclare function print(): void;\ndeclare function prompt(message?: string, _default?: string): string | null;\ndeclare function releaseEvents(): void;\ndeclare function requestAnimationFrame(callback: FrameRequestCallback): number;\ndeclare function resizeBy(x?: number, y?: number): void;\ndeclare function resizeTo(x?: number, y?: number): void;\ndeclare function scroll(x?: number, y?: number): void;\ndeclare function scrollBy(x?: number, y?: number): void;\ndeclare function scrollTo(x?: number, y?: number): void;\ndeclare function stop(): void;\n\n\n\n\ndeclare function createImageBitmap(image: HTMLImageElement   | HTMLCanvasElement | ImageBitmap | ImageData | Blob, options?: ImageBitmapOptions): Promise<ImageBitmap>;\ndeclare function createImageBitmap(image: HTMLImageElement   | HTMLCanvasElement | ImageBitmap | ImageData | Blob, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>;\ndeclare function scroll(options?: ScrollToOptions): void;\ndeclare function scrollTo(options?: ScrollToOptions): void;\ndeclare function scrollBy(options?: ScrollToOptions): void;\ndeclare function toString(): string;\ndeclare function dispatchEvent(evt: Event): boolean;\ndeclare function removeEventListener(type: string, listener?: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\ndeclare function clearInterval(handle: number): void;\ndeclare function clearTimeout(handle: number): void;\ndeclare function setInterval(handler: (...args: any[]) => void, timeout: number): number;\ndeclare function setInterval(handler: any, timeout?: any, ...args: any[]): number;\ndeclare function setTimeout(handler: (...args: any[]) => void, timeout: number): number;\ndeclare function setTimeout(handler: any, timeout?: any, ...args: any[]): number;\ndeclare function clearImmediate(handle: number): void;\ndeclare function setImmediate(handler: (...args: any[]) => void): number;\ndeclare function setImmediate(handler: any, ...args: any[]): number;\ndeclare var sessionStorage: Storage;\ndeclare var localStorage: Storage;\ndeclare var console: Console;\ndeclare var onpointercancel: (this: Window, ev: PointerEvent) => any;\ndeclare var onpointerdown: (this: Window, ev: PointerEvent) => any;\ndeclare var onpointerenter: (this: Window, ev: PointerEvent) => any;\ndeclare var onpointerleave: (this: Window, ev: PointerEvent) => any;\ndeclare var onpointermove: (this: Window, ev: PointerEvent) => any;\ndeclare var onpointerout: (this: Window, ev: PointerEvent) => any;\ndeclare var onpointerover: (this: Window, ev: PointerEvent) => any;\ndeclare var onpointerup: (this: Window, ev: PointerEvent) => any;\ndeclare var onwheel: (this: Window, ev: WheelEvent) => any;\ndeclare var indexedDB: IDBFactory;\ndeclare function atob(encodedString: string): string;\ndeclare function btoa(rawString: string): string;\ndeclare function fetch(input: RequestInfo, init?: RequestInit): Promise<Response>;\n\ndeclare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\ntype AAGUID = string;\ntype BodyInit = any;\ntype ByteString = string;\ntype ConstrainBoolean = boolean | ConstrainBooleanParameters;\ntype ConstrainDOMString = string | string[] | ConstrainDOMStringParameters;\ntype ConstrainDouble = number | ConstrainDoubleRange;\ntype ConstrainLong = number | ConstrainLongRange;\ntype GLbitfield = number;\ntype GLboolean = boolean;\ntype GLbyte = number;\ntype GLclampf = number;\ntype GLenum = number;\ntype GLfloat = number;\ntype GLint = number;\ntype GLintptr = number;\ntype GLshort = number;\ntype GLsizei = number;\ntype GLsizeiptr = number;\ntype GLubyte = number;\ntype GLuint = number;\ntype GLushort = number;\ntype HeadersInit = any;\ntype IDBKeyPath = string;\ntype KeyFormat = string;\ntype KeyType = string;\ntype KeyUsage = string;\ntype RequestInfo = Request | string;\ntype USVString = string;\ntype payloadtype = number;\ntype ScrollBehavior = "auto" | "instant" | "smooth";\ntype ScrollLogicalPosition = "start" | "center" | "end" | "nearest";\ntype IDBValidKey = number | string | Date | IDBArrayKey;\ntype BufferSource = ArrayBuffer | ArrayBufferView;\ntype MouseWheelEvent = WheelEvent;\ntype ScrollRestoration = "auto" | "manual";\ntype FormDataEntryValue = string | File;\ntype InsertPosition = "beforebegin" | "afterbegin" | "beforeend" | "afterend";\ntype AppendMode = "segments" | "sequence";\ntype BiquadFilterType = "lowpass" | "highpass" | "bandpass" | "lowshelf" | "highshelf" | "peaking" | "notch" | "allpass";\ntype CanvasFillRule = "nonzero" | "evenodd";\ntype DistanceModelType = "linear" | "inverse" | "exponential";\ntype ExpandGranularity = "character" | "word" | "sentence" | "textedit";\ntype GamepadInputEmulationType = "mouse" | "keyboard" | "gamepad";\ntype IDBCursorDirection = "next" | "nextunique" | "prev" | "prevunique";\ntype IDBRequestReadyState = "pending" | "done";\ntype IDBTransactionMode = "readonly" | "readwrite" | "versionchange";\ntype ListeningState = "inactive" | "active" | "disambiguation";\ntype NavigationReason = "up" | "down" | "left" | "right";\ntype NavigationType = "navigate" | "reload" | "back_forward" | "prerender";\ntype NotificationDirection = "auto" | "ltr" | "rtl";\ntype NotificationPermission = "default" | "denied" | "granted";\ntype OverSampleType = "none" | "2x" | "4x";\ntype PanningModelType = "equalpower";\ntype PaymentComplete = "success" | "fail" | "";\ntype PaymentShippingType = "shipping" | "delivery" | "pickup";\ntype PushEncryptionKeyName = "p256dh" | "auth";\ntype PushPermissionState = "granted" | "denied" | "prompt";\ntype ReferrerPolicy = "" | "no-referrer" | "no-referrer-when-downgrade" | "origin-only" | "origin-when-cross-origin" | "unsafe-url";\ntype RequestCache = "default" | "no-store" | "reload" | "no-cache" | "force-cache";\ntype RequestCredentials = "omit" | "same-origin" | "include";\ntype RequestDestination = "" | "document" | "sharedworker" | "subresource" | "unknown" | "worker";\ntype RequestMode = "navigate" | "same-origin" | "no-cors" | "cors";\ntype RequestRedirect = "follow" | "error" | "manual";\ntype RequestType = "" | "audio" | "font" | "image" | "script" | "style" | "track" | "video";\ntype ResponseType = "basic" | "cors" | "default" | "error" | "opaque" | "opaqueredirect";\ntype ServiceWorkerState = "installing" | "installed" | "activating" | "activated" | "redundant";\ntype Transport = "usb" | "nfc" | "ble";\ntype VisibilityState = "hidden" | "visible" | "prerender" | "unloaded";\ntype XMLHttpRequestResponseType = "" | "arraybuffer" | "blob" | "document" | "json" | "text";\n\n\n/////////////////////////////\n/// WorkerGlobalScope APIs\n/////////////////////////////\n// These are only available in a Web Worker\ndeclare function importScripts(...urls: string[]): void;\n\n\n\n\n/////////////////////////////\n/// Windows Script Host APIS\n/////////////////////////////\n\n\n\n\ninterface ITextWriter {\n\tWrite(s: string): void;\n\tWriteLine(s: string): void;\n\tClose(): void;\n}\n\n/**\n * Allows enumerating over a COM collection, which may not have indexed item access.\n */\ninterface Enumerator<T> {\n\t/**\n\t * Returns true if the current item is the last one in the collection, or the collection is empty,\n\t * or the current item is undefined.\n\t */\n\tatEnd(): boolean;\n\n\t/**\n\t * Returns the current item in the collection\n\t */\n\titem(): T;\n\n\t/**\n\t * Resets the current item in the collection to the first item. If there are no items in the collection,\n\t * the current item is set to undefined.\n\t */\n\tmoveFirst(): void;\n\n\t/**\n\t * Moves the current item to the next item in the collection. If the enumerator is at the end of\n\t * the collection or the collection is empty, the current item is set to undefined.\n\t */\n\tmoveNext(): void;\n}\n\ninterface EnumeratorConstructor {\n\tnew <T>(collection: any): Enumerator<T>;\n\tnew (collection: any): Enumerator<any>;\n}\n\ndeclare var Enumerator: EnumeratorConstructor;\n\n\n\n/**\n * Automation date (VT_DATE)\n */\ninterface VarDate { }\n\ninterface DateConstructor {\n\tnew (vd: VarDate): Date;\n}\n\ninterface Date {\n\tgetVarDate: () => VarDate;\n}\n'
}});